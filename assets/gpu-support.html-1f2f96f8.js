import{_ as r,r as o,o as i,c as u,a as s,b as n,d as a,w as p,e as l}from"./app-95e21c4a.js";const d={},k=s("br",null,null,-1),v=s("p",null,[n("아래 섹션의 예제에서는 Docker Compose로 서비스 컨테이너에 GPU 장치 접근을 제공하는 것을 다루겠습니다. "),s("code",null,"docker-compose"),n(" 또는 "),s("code",null,"docker compose"),n(" 명령어를 사용하겠습니다.")],-1),m=s("h3",{id:"compose-v2-3-형식에서-서비스-runtime-속성-사용-구형",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#compose-v2-3-형식에서-서비스-runtime-속성-사용-구형","aria-hidden":"true"},"#"),n(" Compose v2.3 형식에서 서비스 "),s("code",null,"runtime"),n(" 속성 사용 (구형)")],-1),b=s("br",null,null,-1),_=s("br",null,null,-1),g=l(`<div class="language-yaml line-numbers-mode" data-ext="yml"><pre class="language-yaml"><code><span class="token key atrule">services</span><span class="token punctuation">:</span>
  <span class="token key atrule">test</span><span class="token punctuation">:</span>
    <span class="token key atrule">image</span><span class="token punctuation">:</span> nvidia/cuda<span class="token punctuation">:</span>10.2<span class="token punctuation">-</span>base
    <span class="token key atrule">command</span><span class="token punctuation">:</span> nvidia<span class="token punctuation">-</span>smi
    <span class="token key atrule">runtime</span><span class="token punctuation">:</span> nvidia
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="서비스-컨테이너에-gpu-접근-활성화" tabindex="-1"><a class="header-anchor" href="#서비스-컨테이너에-gpu-접근-활성화" aria-hidden="true">#</a> 서비스 컨테이너에 GPU 접근 활성화</h3>`,2),h={href:"https://github.com/compose-spec/compose-spec/blob/master/deploy.md#devices",target:"_blank",rel:"noopener noreferrer"},y=s("br",null,null,-1),f={href:"https://github.com/compose-spec/compose-spec/blob/master/deploy.md#capabilities",target:"_blank",rel:"noopener noreferrer"},P=s("code",null,"capabilities: [gpu]",-1),U={href:"https://github.com/compose-spec/compose-spec/blob/master/deploy.md#count",target:"_blank",rel:"noopener noreferrer"},C=s("code",null,"all",-1),G={href:"https://github.com/compose-spec/compose-spec/blob/master/deploy.md#device_ids",target:"_blank",rel:"noopener noreferrer"},w=s("code",null,"nvidia-smi",-1),x={href:"https://github.com/compose-spec/compose-spec/blob/master/deploy.md#driver",target:"_blank",rel:"noopener noreferrer"},M=s("code",null,"driver: 'nvidia'",-1),D={href:"https://github.com/compose-spec/compose-spec/blob/master/deploy.md#options",target:"_blank",rel:"noopener noreferrer"},T=s("blockquote",null,[s("p",null,[s("strong",null,"노트")]),s("p",null,[s("code",null,"capabilities"),n(" 항목을 무조건 설정해야합니다. 그렇지 않으면 서비스 배포시 오류가 발생합니다.")]),s("p",null,[s("code",null,"count"),n("와 "),s("code",null,"device_ids"),n("는 한번에 사용할 수 없습니다. 둘중 하나만 정의해야합니다.")])],-1),B={href:"https://github.com/compose-spec/compose-spec/blob/master/deploy.md#devices",target:"_blank",rel:"noopener noreferrer"},I=s("code",null,"deploy",-1),A=l(`<p>1 GPU 장치를 접근하여 서비스를 실행하는 Compose 파일 예제입니다.</p><div class="language-yaml line-numbers-mode" data-ext="yml"><pre class="language-yaml"><code><span class="token key atrule">services</span><span class="token punctuation">:</span>
  <span class="token key atrule">test</span><span class="token punctuation">:</span>
    <span class="token key atrule">image</span><span class="token punctuation">:</span> nvidia/cuda<span class="token punctuation">:</span>10.2<span class="token punctuation">-</span>base
    <span class="token key atrule">command</span><span class="token punctuation">:</span> nvidia<span class="token punctuation">-</span>smi
    <span class="token key atrule">deploy</span><span class="token punctuation">:</span>
      <span class="token key atrule">resources</span><span class="token punctuation">:</span>
        <span class="token key atrule">reservations</span><span class="token punctuation">:</span>
          <span class="token key atrule">devices</span><span class="token punctuation">:</span>
          <span class="token punctuation">-</span> <span class="token key atrule">driver</span><span class="token punctuation">:</span> nvidia
            <span class="token key atrule">count</span><span class="token punctuation">:</span> <span class="token number">1</span>
            <span class="token key atrule">capabilities</span><span class="token punctuation">:</span> <span class="token punctuation">[</span>gpu<span class="token punctuation">,</span> utility<span class="token punctuation">]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Docker Compose로 실행하겠습니다.</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>$ <span class="token function">docker-compose</span> up
Creating network <span class="token string">&quot;gpu_default&quot;</span> with the default driver
Creating gpu_test_1 <span class="token punctuation">..</span>. <span class="token keyword">done</span>
Attaching to gpu_test_1    
test_1  <span class="token operator">|</span> +-----------------------------------------------------------------------------+
test_1  <span class="token operator">|</span> <span class="token operator">|</span> NVIDIA-SMI <span class="token number">450.80</span>.02    Driver Version: <span class="token number">450.80</span>.02    CUDA Version: <span class="token number">11.1</span>     <span class="token operator">|</span>
test_1  <span class="token operator">|</span> <span class="token operator">|</span>-------------------------------+----------------------+----------------------+
test_1  <span class="token operator">|</span> <span class="token operator">|</span> GPU  Name        Persistence-M<span class="token operator">|</span> Bus-Id        Disp.A <span class="token operator">|</span> Volatile Uncorr. ECC <span class="token operator">|</span>
test_1  <span class="token operator">|</span> <span class="token operator">|</span> Fan  Temp  Perf  Pwr:Usage/Cap<span class="token operator">|</span>         Memory-Usage <span class="token operator">|</span> GPU-Util  Compute M. <span class="token operator">|</span>
test_1  <span class="token operator">|</span> <span class="token operator">|</span>                               <span class="token operator">|</span>                      <span class="token operator">|</span>               MIG M. <span class="token operator">|</span>
test_1  <span class="token operator">|</span> <span class="token operator">|</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">=</span><span class="token operator">+=</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">=</span><span class="token operator">+=</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">=</span><span class="token operator">|</span>
test_1  <span class="token operator">|</span> <span class="token operator">|</span>   <span class="token number">0</span>  Tesla T4            On   <span class="token operator">|</span> 00000000:00:1E.0 Off <span class="token operator">|</span>                    <span class="token number">0</span> <span class="token operator">|</span>
test_1  <span class="token operator">|</span> <span class="token operator">|</span> N/A   23C    P8     9W /  70W <span class="token operator">|</span>      0MiB / 15109MiB <span class="token operator">|</span>      <span class="token number">0</span>%      Default <span class="token operator">|</span>
test_1  <span class="token operator">|</span> <span class="token operator">|</span>                               <span class="token operator">|</span>                      <span class="token operator">|</span>                  N/A <span class="token operator">|</span>
test_1  <span class="token operator">|</span> +-------------------------------+----------------------+----------------------+
test_1  <span class="token operator">|</span>                                                                                
test_1  <span class="token operator">|</span> +-----------------------------------------------------------------------------+
test_1  <span class="token operator">|</span> <span class="token operator">|</span> Processes:                                                                  <span class="token operator">|</span>
test_1  <span class="token operator">|</span> <span class="token operator">|</span>  GPU   GI   CI        PID   Type   Process name                  GPU Memory <span class="token operator">|</span>
test_1  <span class="token operator">|</span> <span class="token operator">|</span>        ID   ID                                                   Usage      <span class="token operator">|</span>
test_1  <span class="token operator">|</span> <span class="token operator">|</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">=</span><span class="token operator">|</span>
test_1  <span class="token operator">|</span> <span class="token operator">|</span>  No running processes found                                                 <span class="token operator">|</span>
test_1  <span class="token operator">|</span> +-----------------------------------------------------------------------------+
gpu_test_1 exited with code <span class="token number">0</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>만약 <code>count</code>나 <code>device_ids</code>가 설정되지 않으면 호스트의 모든 GPU에 접근하도록 기본설정됩니다.</p><div class="language-yaml line-numbers-mode" data-ext="yml"><pre class="language-yaml"><code><span class="token key atrule">services</span><span class="token punctuation">:</span>
  <span class="token key atrule">test</span><span class="token punctuation">:</span>
    <span class="token key atrule">image</span><span class="token punctuation">:</span> tensorflow/tensorflow<span class="token punctuation">:</span>latest<span class="token punctuation">-</span>gpu
    <span class="token key atrule">command</span><span class="token punctuation">:</span> python <span class="token punctuation">-</span>c &quot;import tensorflow as tf;tf.test.gpu_device_name()&quot;
    <span class="token key atrule">deploy</span><span class="token punctuation">:</span>
      <span class="token key atrule">resources</span><span class="token punctuation">:</span>
        <span class="token key atrule">reservations</span><span class="token punctuation">:</span>
          <span class="token key atrule">devices</span><span class="token punctuation">:</span>
          <span class="token punctuation">-</span> <span class="token key atrule">capabilities</span><span class="token punctuation">:</span> <span class="token punctuation">[</span>gpu<span class="token punctuation">]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>$ <span class="token function">docker-compose</span> up
Creating network <span class="token string">&quot;gpu_default&quot;</span> with the default driver
Creating gpu_test_1 <span class="token punctuation">..</span>. <span class="token keyword">done</span>
Attaching to gpu_test_1
test_1  <span class="token operator">|</span> I tensorflow/stream_executor/platform/default/dso_loader.cc:48<span class="token punctuation">]</span> Successfully opened dynamic library libcudart.so.10.1
<span class="token punctuation">..</span><span class="token punctuation">..</span>.
test_1  <span class="token operator">|</span> I tensorflow/core/common_runtime/gpu/gpu_device.cc:1402<span class="token punctuation">]</span>
Created TensorFlow device <span class="token punctuation">(</span>/device:GPU:0 with <span class="token number">13970</span> MB memory<span class="token punctuation">)</span> -<span class="token operator">&gt;</span> physical GPU <span class="token punctuation">(</span>device: <span class="token number">0</span>, name: Tesla T4, pci bus id: 0000:00:1e.0, compute capability: <span class="token number">7.5</span><span class="token punctuation">)</span>
test_1  <span class="token operator">|</span> /device:GPU:0
gpu_test_1 exited with code <span class="token number">0</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>만약 호스트가 다수의 GPU를 가지고 있으면, <code>device_ids</code> 항목은 특정 GPU 장치로 설정하고 <code>count</code>는 서비스 컨테이너에 접근한정할 GPU 장치 수를 사용하게 됩니다.<br> 만약 <code>count</code>가 호스트의 가능한 GPU 수를 초과하게 되면, 배포에서 오류가 발생됩니다.</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>$ nvidia-smi   
+-----------------------------------------------------------------------------+
| NVIDIA-SMI 450.80.02    Driver Version: 450.80.02    CUDA Version: 11.0     |
|-------------------------------+----------------------+----------------------+
| GPU  Name        Persistence-M| Bus-Id        Disp.A | Volatile Uncorr. ECC |
| Fan  Temp  Perf  Pwr:Usage/Cap|         Memory-Usage | GPU-Util  Compute M. |
|                               |                      |               MIG M. |
|===============================+======================+======================|
|   0  Tesla T4            On   | 00000000:00:1B.0 Off |                    0 |
| N/A   72C    P8    12W /  70W |      0MiB / 15109MiB |      0%      Default |
|                               |                      |                  N/A |
+-------------------------------+----------------------+----------------------+
|   1  Tesla T4            On   | 00000000:00:1C.0 Off |                    0 |
| N/A   67C    P8    11W /  70W |      0MiB / 15109MiB |      0%      Default |
|                               |                      |                  N/A |
+-------------------------------+----------------------+----------------------+
|   2  Tesla T4            On   | 00000000:00:1D.0 Off |                    0 |
| N/A   74C    P8    12W /  70W |      0MiB / 15109MiB |      0%      Default |
|                               |                      |                  N/A |
+-------------------------------+----------------------+----------------------+
|   3  Tesla T4            On   | 00000000:00:1E.0 Off |                    0 |
| N/A   62C    P8    11W /  70W |      0MiB / 15109MiB |      0%      Default |
|                               |                      |                  N/A |
+-------------------------------+----------------------+----------------------+
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>만약 GPU-0과 GPU-3 장치에만 접근활성화 하려면 다음과 같이 합니다.</p><div class="language-yaml line-numbers-mode" data-ext="yml"><pre class="language-yaml"><code><span class="token key atrule">services</span><span class="token punctuation">:</span>
  <span class="token key atrule">test</span><span class="token punctuation">:</span>
    <span class="token key atrule">image</span><span class="token punctuation">:</span> tensorflow/tensorflow<span class="token punctuation">:</span>latest<span class="token punctuation">-</span>gpu
    <span class="token key atrule">command</span><span class="token punctuation">:</span> python <span class="token punctuation">-</span>c &quot;import tensorflow as tf;tf.test.gpu_device_name()&quot;
    <span class="token key atrule">deploy</span><span class="token punctuation">:</span>
      <span class="token key atrule">resources</span><span class="token punctuation">:</span>
        <span class="token key atrule">reservations</span><span class="token punctuation">:</span>
          <span class="token key atrule">devices</span><span class="token punctuation">:</span>
          <span class="token punctuation">-</span> <span class="token key atrule">driver</span><span class="token punctuation">:</span> nvidia
            <span class="token key atrule">device_ids</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">&#39;0&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;3&#39;</span><span class="token punctuation">]</span>
            <span class="token key atrule">capabilities</span><span class="token punctuation">:</span> <span class="token punctuation">[</span>gpu<span class="token punctuation">]</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>$ <span class="token function">docker-compose</span> up
<span class="token punctuation">..</span>.
Created TensorFlow device <span class="token punctuation">(</span>/device:GPU:0 with <span class="token number">13970</span> MB memory -<span class="token operator">&gt;</span> physical GPU <span class="token punctuation">(</span>device: <span class="token number">0</span>, name: Tesla T4, pci bus id: 0000:00:1b.0, compute capability: <span class="token number">7.5</span><span class="token punctuation">)</span>
<span class="token punctuation">..</span>.
Created TensorFlow device <span class="token punctuation">(</span>/device:GPU:1 with <span class="token number">13970</span> MB memory<span class="token punctuation">)</span> -<span class="token operator">&gt;</span> physical GPU <span class="token punctuation">(</span>device: <span class="token number">1</span>, name: Tesla T4, pci bus id: 0000:00:1e.0, compute capability: <span class="token number">7.5</span><span class="token punctuation">)</span>
<span class="token punctuation">..</span>.
gpu_test_1 exited with code <span class="token number">0</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,12);function N(V,O){const t=o("RouterLink"),e=o("ExternalLinkIcon"),c=o("AdsenseB");return i(),u("div",null,[s("p",null,[n("Compose 서비스는 Docker 호스트에 GPU를 가지고 있고 Docker 데몬에 맞게 설정되어있으면 GPU 장치 예약을 정의할 수 있습니다."),k,n(" 이것을 위해, 아직 설정되어있지 않다면 "),a(t,{to:"/docker/config/containers/resource_constraints.html#gpu"},{default:p(()=>[n("사전요구사항")]),_:1}),n("을 설치해야합니다.")]),v,m,s("p",null,[n("Docker Compose v1.27.0+에서 2.x과 3.x 버전의 모든 속성에 대한 조합을 가진 Compose 명세 스키마를 사용할 수 있도록 전환되었습니다."),b,n(" 이것은 컨테이너에 GPU 접근을 제공할 수 있도록 "),a(t,{to:"/compose-file/compose-file-v2.html#runtime"},{default:p(()=>[n("runtime")]),_:1}),n("이라는 서비스 속성의 사용을 다시 가능하게 합니다."),_,n(" 하지만, GPU 장치의 특정 속성을 제어할 수는 없습니다.")]),g,s("p",null,[n("Docker Compose v1.28.0+ 부터 Compose 명세에 "),s("a",h,[n("device"),a(e)]),n(" 구조 정의를 사용하여 GPU 예약을 정의할 수 있도록 합니다."),y,n(" 이것은 아래의 창치 속성을 사용하여 GPU 예약에 사용자정의 값을 활용한 제어를 제공합니다.")]),s("ul",null,[s("li",null,[s("a",f,[n("capabilities"),a(e)]),n(" - 문자열 목록의 값 정의 (예. "),P,n("). Compose 파일에 필히 설정해야합니다. 그렇지 않으면 서비스 배포시 오류가 발생합니다.")]),s("li",null,[s("a",U,[n("count"),a(e)]),n(" - 예약할 GPU 장치의 번호를 가리키는 숫자 또는 "),C,n(" 값 정의 ( 호스트에서 연결할 GPU의 번호 제공 ).")]),s("li",null,[s("a",G,[n("device_ids"),a(e)]),n(" - 호스트의 GPU 장치 ID를 표현하는 문자열 목록의 값 정의. 호스트에서 "),w,n(" 명령의 출력으로 장치 ID를 찾을 수 있습니다.")]),s("li",null,[s("a",x,[n("driver"),a(e)]),n(" - 문자열의 값 정의 (예. "),M,n(")")]),s("li",null,[s("a",D,[n("options"),a(e)]),n(" - 드라이버의 특정 옵션을 표현하는 키-값 쌍")])]),T,s("p",null,[n("이 속성에 대한 더 많은 정보는 "),s("a",B,[n("Compose 명세"),a(e)]),n("의 "),I,n(" 섹션을 보시기 바랍니다.")]),A,a(c)])}const q=r(d,[["render",N],["__file","gpu-support.html.vue"]]);export{q as default};
