import{_ as o,r as t,o as l,c as i,a as n,b as s,d as a,e as p}from"./app-95e21c4a.js";const r={},u={href:"https://dart.dev/language/generics",target:"_blank",rel:"noopener noreferrer"},d={href:"https://api.dart.dev/stable/dart-core/List-class.html",target:"_blank",rel:"noopener noreferrer"},k=n("code",null,"List",-1),m=n("code",null,"List<E>",-1),g=n("br",null,null,-1),v=n("code",null,"<...>",-1),b=n("br",null,null,-1),h={href:"https://dart.dev/guides/language/effective-dart/design#do-follow-existing-mnemonic-conventions-when-naming-type-parameters",target:"_blank",rel:"noopener noreferrer"},y=p(`<h2 id="why-use-generics" tabindex="-1"><a class="header-anchor" href="#why-use-generics" aria-hidden="true">#</a> 왜 제너릭을 사용하는가?</h2><p>제너릭은 자주 타입보장이 필요할 때 사용되지만 코드가 실행가능하도록 많은 이점을 가지고 있습니다.</p><ul><li>제너릭타입을 적절하게 지정하면 코드가 더 잘 생성됩니다.</li><li>제너릭을 사용하여 코드중복을 줄일 수 있습니다.</li></ul><p>목록에 문자열만 포함하려고 하는 경우 <code>List&lt;String&gt;</code>(문자열 목록으로 부름)으로 선언하면 됩니다.<br> 이것으로 당신과 같이 일하는 프로그래머, 도구 등이 목록에 문자열이 아닌 것이 할당되면 잘못됨을 감지할 수 있습니다.<br> 아래 예제가 있습니다.</p><div class="language-dart line-numbers-mode" data-ext="dart"><pre class="language-dart"><code><span class="token comment">// 정적분석 : 에러/경고</span>
<span class="token keyword">var</span> names <span class="token operator">=</span> <span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
names<span class="token punctuation">.</span><span class="token function">addAll</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string-literal"><span class="token string">&#39;Seth&#39;</span></span><span class="token punctuation">,</span> <span class="token string-literal"><span class="token string">&#39;Kathy&#39;</span></span><span class="token punctuation">,</span> <span class="token string-literal"><span class="token string">&#39;Lars&#39;</span></span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
names<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">42</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// Error</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>제너릭을 사용하는 다른 이유로 코드 중복을 줄여주는 것 입니다.<br> 제너릭은 정적 분석의 이점을 가져간 채로 다수의 타입에 대하여 단일 인터페이스와 구현을 공유할 수 있습니다.<br> 예로 들어, 객체에 대한 캐시용 인터페이스를 생성하겠습니다.</p><div class="language-dart line-numbers-mode" data-ext="dart"><pre class="language-dart"><code><span class="token keyword">abstract</span> <span class="token keyword">class</span> <span class="token class-name">ObjectCache</span> <span class="token punctuation">{</span>
  <span class="token class-name">Object</span> <span class="token function">getByKey</span><span class="token punctuation">(</span><span class="token class-name">String</span> key<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">void</span> <span class="token function">setByKey</span><span class="token punctuation">(</span><span class="token class-name">String</span> key<span class="token punctuation">,</span> <span class="token class-name">Object</span> value<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>이 인터페이스의 문자열용 버전이 필요함을 발견하고 다른 인터페이스를 생성합니다.</p><div class="language-dart line-numbers-mode" data-ext="dart"><pre class="language-dart"><code><span class="token keyword">abstract</span> <span class="token keyword">class</span> <span class="token class-name">StringCache</span> <span class="token punctuation">{</span>
  <span class="token class-name">String</span> <span class="token function">getByKey</span><span class="token punctuation">(</span><span class="token class-name">String</span> key<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">void</span> <span class="token function">setByKey</span><span class="token punctuation">(</span><span class="token class-name">String</span> key<span class="token punctuation">,</span> <span class="token class-name">String</span> value<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>나중에, 이 인터페이스의 숫자용 버전이 필요함을 발견하고....<br> 아이디어를 생각해봅시다.</p><p>제너릭 타입은 이 모든 인터페이스의 생성에 대한 문제를 해결해줍니다.<br> 기존과 다르게 타입 매개변수를 받는 단일 인터페이스를 생성합니다.</p><div class="language-dart line-numbers-mode" data-ext="dart"><pre class="language-dart"><code><span class="token keyword">abstract</span> <span class="token keyword">class</span> <span class="token class-name">Cache</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span> <span class="token punctuation">{</span>
  <span class="token class-name">T</span> <span class="token function">getByKey</span><span class="token punctuation">(</span><span class="token class-name">String</span> key<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">void</span> <span class="token function">setByKey</span><span class="token punctuation">(</span><span class="token class-name">String</span> key<span class="token punctuation">,</span> <span class="token class-name">T</span> value<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>코드에서 T는 들어오는 타입입니다.<br> 개발자가 나중에 정의할 타입의 자리표시자로 생각하시면 됩니다.</p><h2 id="using-collection-literals" tabindex="-1"><a class="header-anchor" href="#using-collection-literals" aria-hidden="true">#</a> 콜렉션 리터럴에서 사용하기</h2><p>리스트, 세트, 맵 리터럴은 매개변수화 되어있습니다.<br> 매개변수화된 리터럴은 기존에 사용하는 리터럴과 유사하지만 중괄호를 열기전 <code>&lt;type&gt;</code>(리스트, 세트) 또는 <code>&lt;keyType, valueType&gt;</code>(맵)을 추가합니다.<br> 타입화 리터럴에 대한 예제입니다.</p><div class="language-dart line-numbers-mode" data-ext="dart"><pre class="language-dart"><code><span class="token keyword">var</span> names <span class="token operator">=</span> <span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">[</span><span class="token string-literal"><span class="token string">&#39;Seth&#39;</span></span><span class="token punctuation">,</span> <span class="token string-literal"><span class="token string">&#39;Kathy&#39;</span></span><span class="token punctuation">,</span> <span class="token string-literal"><span class="token string">&#39;Lars&#39;</span></span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token keyword">var</span> uniqueNames <span class="token operator">=</span> <span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">{</span><span class="token string-literal"><span class="token string">&#39;Seth&#39;</span></span><span class="token punctuation">,</span> <span class="token string-literal"><span class="token string">&#39;Kathy&#39;</span></span><span class="token punctuation">,</span> <span class="token string-literal"><span class="token string">&#39;Lars&#39;</span></span><span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token keyword">var</span> pages <span class="token operator">=</span> <span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">{</span>
  <span class="token string-literal"><span class="token string">&#39;index.html&#39;</span></span><span class="token punctuation">:</span> <span class="token string-literal"><span class="token string">&#39;Homepage&#39;</span></span><span class="token punctuation">,</span>
  <span class="token string-literal"><span class="token string">&#39;robots.txt&#39;</span></span><span class="token punctuation">:</span> <span class="token string-literal"><span class="token string">&#39;Hints for web robots&#39;</span></span><span class="token punctuation">,</span>
  <span class="token string-literal"><span class="token string">&#39;humans.txt&#39;</span></span><span class="token punctuation">:</span> <span class="token string-literal"><span class="token string">&#39;We are people, not machines&#39;</span></span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="using-parameterized-types-with-constructors" tabindex="-1"><a class="header-anchor" href="#using-parameterized-types-with-constructors" aria-hidden="true">#</a> 생성자에 매개변수화된 타입 사용하기</h2><p>생성자를 사용할 때 한개 이상의 타입을 지정하려면 클래스 이름에 꺾쇠 괄호(<code>&lt;...&gt;</code>)에 타입을 추가합니다.<br> 예로 들면 다음과 같습니다.</p><div class="language-dart line-numbers-mode" data-ext="dart"><pre class="language-dart"><code><span class="token keyword">var</span> nameSet <span class="token operator">=</span> <span class="token class-name">Set</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">.</span><span class="token function">from</span><span class="token punctuation">(</span>names<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>아래 코드는 정수 키와 View 타입의 값을 가지는 Map을 생성하는 것 입니다.</p><div class="language-dart line-numbers-mode" data-ext="dart"><pre class="language-dart"><code><span class="token keyword">var</span> views <span class="token operator">=</span> <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span>int<span class="token punctuation">,</span> <span class="token class-name">View</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h2 id="generic-collections-and-the-types-they-contain" tabindex="-1"><a class="header-anchor" href="#generic-collections-and-the-types-they-contain" aria-hidden="true">#</a> 제너릭 콜렉션과 가지고있는 타입</h2><p>Dart의 제너릭 타입은 _구체화_되어있습니다.<br> 다시말해 런타입동안 타입 정보를 가지고 다니게 됩니다.<br> 예로 들어, 콜렉션의 타입에 대한 테스트가 가능합니다.</p><div class="language-dart line-numbers-mode" data-ext="dart"><pre class="language-dart"><code><span class="token keyword">var</span> names <span class="token operator">=</span> <span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
names<span class="token punctuation">.</span><span class="token function">addAll</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string-literal"><span class="token string">&#39;Seth&#39;</span></span><span class="token punctuation">,</span> <span class="token string-literal"><span class="token string">&#39;Kathy&#39;</span></span><span class="token punctuation">,</span> <span class="token string-literal"><span class="token string">&#39;Lars&#39;</span></span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">print</span><span class="token punctuation">(</span>names <span class="token operator">is</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// true</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="hint-container note"><p class="hint-container-title">Note</p><p>대조적으로 자바의 제너릭은 _지워 없앰_을 사용합니다.<br> 다시 말해, 제너릭 타입 매개변수가 런타임에 삭제됩니다.<br> 자바에서 객체가 List인지 테스트는 가능하지만 <code>List&lt;String&gt;</code>인지는 테스트가 불가능합니다.</p></div><h2 id="restricting-the-parameterized-type" tabindex="-1"><a class="header-anchor" href="#restricting-the-parameterized-type" aria-hidden="true">#</a> 매개변수화 타입 제한하기</h2><p>제너럭 타입을 구현할 때 인자로 제공되는 타입에 대한 제한을 하고 특정 타입의 하위 타입만 가능하도록 하고 싶을 수 있습니다.<br> 이때 <code>extends</code> 키워드를 사용하여 할 수 있습니다.</p>`,27),_=n("code",null,"Object",-1),f={href:"https://dart.dev/null-safety/understanding-null-safety#top-and-bottom",target:"_blank",rel:"noopener noreferrer"},x=n("code",null,"Object?",-1),w=p(`<div class="language-dart line-numbers-mode" data-ext="dart"><pre class="language-dart"><code><span class="token keyword">class</span> <span class="token class-name">Foo</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span> <span class="token keyword">extends</span> <span class="token class-name">Object</span><span class="token punctuation">&gt;</span></span> <span class="token punctuation">{</span>
  <span class="token comment">// T에 어느 타입이든 가능하지만 null이 아니어야 합니다.</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>Object</code> 대신 다른 타입에도 <code>extends</code>를 사용할 수 있습니다.<br> 아래 예제는 <code>SomeBaseClass</code>를 확장하는 것이며 <code>SomeBaseClass</code>의 멤버만 T 타입의 객체로 호출될 수 있습니다.</p><div class="language-dart line-numbers-mode" data-ext="dart"><pre class="language-dart"><code><span class="token keyword">class</span> <span class="token class-name">Foo</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span> <span class="token keyword">extends</span> <span class="token class-name">SomeBaseClass</span><span class="token punctuation">&gt;</span></span> <span class="token punctuation">{</span>
  <span class="token comment">// 구현은 여기서...</span>
  <span class="token class-name">String</span> <span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">&gt;</span> <span class="token string-literal"><span class="token string">&quot;Instance of &#39;Foo&lt;</span><span class="token interpolation"><span class="token punctuation">$</span><span class="token expression"><span class="token class-name">T</span></span></span><span class="token string">&gt;&#39;&quot;</span></span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">class</span> <span class="token class-name">Extender</span> <span class="token keyword">extends</span> <span class="token class-name">SomeBaseClass</span> <span class="token punctuation">{</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>SomeBaseClass</code>나 그 하위 타입을 제너릭 인자로 사용하는것이 허용됩니다.</p><div class="language-dart line-numbers-mode" data-ext="dart"><pre class="language-dart"><code><span class="token keyword">var</span> someBaseClassFoo <span class="token operator">=</span> <span class="token class-name">Foo</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">SomeBaseClass</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">var</span> extenderFoo <span class="token operator">=</span> <span class="token class-name">Foo</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Extender</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>또한 제너릭 인자를 사용하지 않는 것도 허용됩니다.</p><div class="language-dart line-numbers-mode" data-ext="dart"><pre class="language-dart"><code><span class="token keyword">var</span> foo <span class="token operator">=</span> <span class="token class-name">Foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">print</span><span class="token punctuation">(</span>foo<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// Foo&lt;SomeBaseClass&gt;의 인스턴스</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p><code>SomeBaseClass</code>가 아닌 것으로 타입을 지정하면 에러가 발생합니다.</p><div class="language-dart line-numbers-mode" data-ext="dart"><pre class="language-dart"><code><span class="token comment">// 정적 분석 : 에러/경고</span>
<span class="token keyword">var</span> foo <span class="token operator">=</span> <span class="token class-name">Foo</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Object</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="using-generic-methods" tabindex="-1"><a class="header-anchor" href="#using-generic-methods" aria-hidden="true">#</a> 제너릭 함수 사용하기</h2><p>메소드와 함수에서도 타입 인자가 허용됩니다.</p><div class="language-dart line-numbers-mode" data-ext="dart"><pre class="language-dart"><code><span class="token class-name">T</span> first<span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span> ts<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token comment">// Do some initial work or error checking, then...</span>
  <span class="token class-name">T</span> tmp <span class="token operator">=</span> ts<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
  <span class="token comment">// Do some additional checking or processing...</span>
  <span class="token keyword">return</span> tmp<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>여기서 <code>first&lt;T&gt;</code>의 제너릭 타입 매개변수는 다양한 위치에서 타입 인자 <code>T</code>를 사용할 수 있습니다.</p><ul><li>함수의 반환 타입 (<code>T</code>)</li><li>인자의 타입 (<code>List&lt;T&gt;</code>)</li><li>로컬 변수의 타입 (<code>T map</code>)</li></ul>`,14);function S(T,B){const e=t("ExternalLinkIcon"),c=t("AdsenseB");return l(),i("div",null,[n("p",null,[s("원문 : "),n("a",u,[s("https://dart.dev/language/generics"),a(e)])]),n("p",null,[s("기본 배열타입인 "),n("a",d,[k,a(e)]),s("에 대한 API 문서를 보다보면, 실제 "),m,s("와 같은 타입을 볼 수 있습니다."),g,v,s(" 표기법은 리스트의 제너릭(또는 매개변수화된) 타입(형식 타입 매개변수를 가지는 타입)을 표기합니다."),b,n("a",h,[s("관례에 따르면"),a(e)]),s(", 대부분 타입 변수는 단일문자 이름(E 및 T, S, K, V 같은)을 가집니다.")]),y,n("p",null,[s("일반적인 사용사례는 "),_,s("의 하위 유형으로 만들어진 null이 아닌 타입(기본값 "),n("a",f,[x,a(e)]),s(" 대신)으로 확정하는 것 입니다.")]),w,a(c)])}const C=o(r,[["render",S],["__file","generics.html.vue"]]);export{C as default};
