import{_ as i,r as c,o as u,c as r,a as s,b as n,d as a,w as e,e as p}from"./app-95e21c4a.js";const d={},k={href:"https://dart.dev/language/classes",target:"_blank",rel:"noopener noreferrer"},m=s("br",null,null,-1),v=s("code",null,"Null",-1),b={href:"https://api.dart.dev/stable/dart-core/Object-class.html",target:"_blank",rel:"noopener noreferrer"},g=s("br",null,null,-1),h={href:"https://dart.dev/null-safety/understanding-null-safety#top-and-bottom",target:"_blank",rel:"noopener noreferrer"},_=s("code",null,"Object?",-1),y=s("br",null,null,-1),f=p(`<h2 id="using-class-members" tabindex="-1"><a class="header-anchor" href="#using-class-members" aria-hidden="true">#</a> 클래스 멤버 사용하기</h2><p>객체는 함수와 데이터로 구성된 <em>멤버</em> 가 있습니다. (각기 <em>메소드</em> 와 <em>인스턴스 변수</em>)<br> 메소드를 호출할 때 객체 위에서 <em>실행</em> 하므로 메소드는 객체의 함수와 데이터에 접근할 수 있습니다.</p><p>점(<code>.</code>)을 사용하여 인스턴스 변수나 메소드를 참조할 수 있습니다.</p><div class="language-dart line-numbers-mode" data-ext="dart"><pre class="language-dart"><code><span class="token keyword">var</span> p <span class="token operator">=</span> <span class="token class-name">Point</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// y의 값을 가져오기</span>
<span class="token keyword">assert</span><span class="token punctuation">(</span>p<span class="token punctuation">.</span>y <span class="token operator">==</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// p의 distanceTo() 실행하기</span>
double distance <span class="token operator">=</span> p<span class="token punctuation">.</span><span class="token function">distanceTo</span><span class="token punctuation">(</span><span class="token class-name">Point</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>.</code>대신 <code>?.</code>을 사용하여 왼쪽 피연산자가 null일때 예외가 발생함을 방지할 수 있습니다.</p><div class="language-dart line-numbers-mode" data-ext="dart"><pre class="language-dart"><code><span class="token comment">// p가 null이 아니면 그것의 y 값과 같게 변수가 설정됩니다.</span>
<span class="token keyword">var</span> a <span class="token operator">=</span> p<span class="token operator">?</span><span class="token punctuation">.</span>y<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="using-constructors" tabindex="-1"><a class="header-anchor" href="#using-constructors" aria-hidden="true">#</a> 생성자 사용하기</h2><p>생성자를 사용하여 객체를 만들 수 있습니다.<br> 생성자 이름은 <code>ClassName</code> 이나 <code>ClassName.identifier</code> 입니다.<br> 예로들어, 아래 코드는 <code>Point</code> 객체들을 <code>Point()</code>와 <code>Point.fromJson()</code> 생성자로 만드는 것 입니다.</p><div class="language-dart line-numbers-mode" data-ext="dart"><pre class="language-dart"><code><span class="token keyword">var</span> p1 <span class="token operator">=</span> <span class="token class-name">Point</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">var</span> p2 <span class="token operator">=</span> <span class="token class-name">Point</span><span class="token punctuation">.</span><span class="token function">fromJson</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token string-literal"><span class="token string">&#39;x&#39;</span></span><span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token string-literal"><span class="token string">&#39;y&#39;</span></span><span class="token punctuation">:</span> <span class="token number">2</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>아래 코드는 동일한 내용이지만 <code>new</code> 키워드를 생성자 이름전에 사용한 것 입니다.</p><div class="language-dart line-numbers-mode" data-ext="dart"><pre class="language-dart"><code><span class="token keyword">var</span> p1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Point</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">var</span> p2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Point</span><span class="token punctuation">.</span><span class="token function">fromJson</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token string-literal"><span class="token string">&#39;x&#39;</span></span><span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token string-literal"><span class="token string">&#39;y&#39;</span></span><span class="token punctuation">:</span> <span class="token number">2</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div>`,11),w=s("br",null,null,-1),x=s("code",null,"const",-1),P=p(`<div class="language-dart line-numbers-mode" data-ext="dart"><pre class="language-dart"><code><span class="token keyword">var</span> p <span class="token operator">=</span> <span class="token keyword">const</span> <span class="token class-name">ImmutablePoint</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>두개의 동일한 컴파일타임 상수를 생성하면 한개의 정식 인스턴스가 생성됩니다.</p><div class="language-dart line-numbers-mode" data-ext="dart"><pre class="language-dart"><code><span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token keyword">const</span> <span class="token class-name">ImmutablePoint</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">var</span> b <span class="token operator">=</span> <span class="token keyword">const</span> <span class="token class-name">ImmutablePoint</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">assert</span><span class="token punctuation">(</span><span class="token function">identical</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 동일한 인스턴스 입니다.</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>상수 문맥에서 생성자나 리터럴 전에 <code>const</code> 키워드를 생략할 수 있습니다.<br> 아래 코드 예제에서 상수 맵을 만드는 것 입니다.</p><div class="language-dart line-numbers-mode" data-ext="dart"><pre class="language-dart"><code><span class="token comment">// 다수의 const 키워드가 있습니다.</span>
<span class="token keyword">const</span> pointAndLine <span class="token operator">=</span> <span class="token keyword">const</span> <span class="token punctuation">{</span>
    <span class="token string-literal"><span class="token string">&#39;point&#39;</span></span><span class="token punctuation">:</span> <span class="token keyword">const</span> <span class="token punctuation">[</span><span class="token keyword">const</span> <span class="token class-name">ImmutablePoint</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
    <span class="token string-literal"><span class="token string">&#39;line&#39;</span></span><span class="token punctuation">:</span> <span class="token keyword">const</span> <span class="token punctuation">[</span><span class="token keyword">const</span> <span class="token class-name">ImmutablePoint</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token class-name">ImmutablePoint</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">11</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>모두 생략해도 되나 첫번째 <code>const</code> 키워드는 사용해야 합니다.</p><div class="language-dart line-numbers-mode" data-ext="dart"><pre class="language-dart"><code><span class="token comment">// 상수 문맥을 시작하는 한개의 const만 존재</span>
<span class="token keyword">const</span> pointAndLine <span class="token operator">=</span> <span class="token punctuation">{</span>
    <span class="token string-literal"><span class="token string">&#39;point&#39;</span></span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token class-name">ImmutablePoint</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
    <span class="token string-literal"><span class="token string">&#39;line&#39;</span></span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token class-name">ImmutablePoint</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token class-name">ImmutablePoint</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">11</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>상수 생성자가 상수 문맥 밖에 있고 <code>const</code> 키워드 없이 실행된다면, <strong>상수가 아닌 객체</strong>가 생성됩니다.</p><div class="language-dart line-numbers-mode" data-ext="dart"><pre class="language-dart"><code><span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token keyword">const</span> <span class="token class-name">ImmutablePoint</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 상수가 생성됨</span>
<span class="token keyword">var</span> b <span class="token operator">=</span> <span class="token class-name">ImmutablePoint</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 상수로 생성안됨</span>

<span class="token keyword">assert</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">identical</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 동일한 인스턴스가 아님</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="getting-an-objects-type" tabindex="-1"><a class="header-anchor" href="#getting-an-objects-type" aria-hidden="true">#</a> 객체 유형 가져오기</h2>`,10),I={href:"https://api.dart.dev/stable/dart-core/Type-class.html",target:"_blank",rel:"noopener noreferrer"},B=s("code",null,"Type",-1),T=s("code",null,"Object",-1),A=s("code",null,"runtimeType",-1),C=p('<div class="language-dart line-numbers-mode" data-ext="dart"><pre class="language-dart"><code><span class="token function">print</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&#39;a의 유형은 </span><span class="token interpolation"><span class="token punctuation">${</span><span class="token expression">a<span class="token punctuation">.</span>runtimeType</span><span class="token punctuation">}</span></span><span class="token string">입니다.&#39;</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div>',1),N={class:"hint-container warning"},S=s("p",{class:"hint-container-title"},"Note",-1),j=s("code",null,"runtimeType",-1),L=s("br",null,null,-1),z=s("code",null,"object is Type",-1),D=s("code",null,"object.runtimeType == Type",-1),O=p(`<p>여기까지 클래스를 어떻게 사용하는지 살펴봤습니다.<br> 아래부터는 클래스를 어떻게 구현하는지 살펴보겠습니다.</p><h2 id="instance-variables" tabindex="-1"><a class="header-anchor" href="#instance-variables" aria-hidden="true">#</a> 인스턴스 변수</h2><p>인스턴스 변수를 어떻게 선언하는지 보여줍니다.</p><div class="language-dart line-numbers-mode" data-ext="dart"><pre class="language-dart"><code><span class="token keyword">class</span> <span class="token class-name">Point</span> <span class="token punctuation">{</span>
    double<span class="token operator">?</span> x<span class="token punctuation">;</span> <span class="token comment">// 인스턴스 변수 x를 선언, null로 초기화</span>
    double<span class="token operator">?</span> y<span class="token punctuation">;</span> <span class="token comment">// y를 선언, null로 초기화</span>
    double z <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token comment">// z를 선언, 0으로 초기화</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>모든 초기화되지 않은 인스턴스 변수는 <code>null</code> 값을 가집니다.</p>`,5),V=s("br",null,null,-1),$=s("code",null,"late final",-1),E=s("br",null,null,-1),J=p(`<p><code>late</code>가 아닌 인스턴스 변수를 선언한 곳에 초기화하려면 값은 생성자나 초기화 목록이 실행되기 전인 인스턴스가 생성될 때 설정됩니다.<br> 결과적으로 <code>late</code>가 아닌 인스턴스 변수 초기화는 <code>this</code>에 접근할 수 없습니다.</p><div class="language-dart line-numbers-mode" data-ext="dart"><pre class="language-dart"><code><span class="token keyword">class</span> <span class="token class-name">Point</span> <span class="token punctuation">{</span>
    double<span class="token operator">?</span> x<span class="token punctuation">;</span> <span class="token comment">// 인스턴스 변수 x를 선언, null로 초기화</span>
    double<span class="token operator">?</span> y<span class="token punctuation">;</span> <span class="token comment">// y를 선언, null로 초기화</span>
<span class="token punctuation">}</span>

<span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">var</span> point <span class="token operator">=</span> <span class="token class-name">Point</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    point<span class="token punctuation">.</span>x <span class="token operator">=</span> <span class="token number">4</span><span class="token punctuation">;</span> <span class="token comment">// x의 setter 메소드를 사용</span>
    <span class="token keyword">assert</span><span class="token punctuation">(</span>point<span class="token punctuation">.</span>x <span class="token operator">==</span> <span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// x의 getter 메소드를 사용</span>
    <span class="token function">aasert</span><span class="token punctuation">(</span>point<span class="token punctuation">.</span>y <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 기본값은 null</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,2),M=s("code",null,"final",-1),H=s("br",null,null,-1),Q=s("code",null,"final",-1),R=s("code",null,"late",-1),q=p(`<div class="language-dart line-numbers-mode" data-ext="dart"><pre class="language-dart"><code><span class="token keyword">class</span> <span class="token class-name">ProfileMark</span> <span class="token punctuation">{</span>
    <span class="token keyword">final</span> <span class="token class-name">String</span> name<span class="token punctuation">;</span>
    <span class="token keyword">final</span> <span class="token class-name">DateTime</span> start <span class="token operator">=</span> <span class="token class-name">DateTime</span><span class="token punctuation">.</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token class-name">ProfileMark</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">ProfileMark</span><span class="token punctuation">.</span><span class="token function">unnamed</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">:</span> name <span class="token operator">=</span> <span class="token string-literal"><span class="token string">&#39;&#39;</span></span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>final</code> 인스턴스 변수의 값을 생성자 본문이 시작한 이후 할당해야 할 경우 다음의 한가지를 사용하면 됩니다.</p>`,2),K=s("code",null,"late final",-1),F={href:"https://dart.dev/guides/language/effective-dart/design#avoid-public-late-final-fields-without-initializers",target:"_blank",rel:"noopener noreferrer"},G=s("code",null,"late final",-1),U=s("h2",{id:"abstract-classes",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#abstract-classes","aria-hidden":"true"},"#"),n(" 추상 클래스")],-1),W=s("code",null,"abstract",-1),X=s("br",null,null,-1),Y=s("br",null,null,-1),Z=s("br",null,null,-1),nn=p(`<div class="language-dart line-numbers-mode" data-ext="dart"><pre class="language-dart"><code><span class="token comment">// 이 클래스는 추상으로 선언되며 인스턴스화가 불가합니다.</span>
<span class="token keyword">abstract</span> <span class="token keyword">class</span> <span class="token class-name">AbstractContainer</span> <span class="token punctuation">{</span>
    <span class="token comment">// 생성자, 필드, 메소드를 선언...</span>

    <span class="token keyword">void</span> <span class="token function">updateChildren</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 추상 메소드</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="implicit-interfaces" tabindex="-1"><a class="header-anchor" href="#implicit-interfaces" aria-hidden="true">#</a> 암시적 인터페이스</h2><p>모든 클래스는 암묵적으로 클래스와 구현된 인터페이스의 모든 인스턴스 멤버를 포함한 인터페이스를 정의합니다.<br> B의 구현을 상속하지 않고 B 클래스의 API를 지원하는 클래스 A를 생성하려면, 클래스 A는 B 인터페이스를 구현해야합니다.</p><p>A 클래스는 <code>implements</code> 절에 선언된 한개 이상의 인터페이스를 구현하며 해당 인터페이스에 필요한 API를 제공합니다.<br> 예로 들면,</p><div class="language-dart line-numbers-mode" data-ext="dart"><pre class="language-dart"><code><span class="token comment">// Person, greet()를 포함한 암시적 인터페이스</span>
<span class="token keyword">class</span> <span class="token class-name">Person</span> <span class="token punctuation">{</span>
    <span class="token comment">// 인터페이스에 있지만 이 라이브러리에서만 볼 수 있음</span>
    <span class="token keyword">final</span> <span class="token class-name">String</span> _name<span class="token punctuation">;</span>

    <span class="token comment">// 생성자이기 때문에 인터페이스에 없음</span>
    <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>_name<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">// 인터페이스</span>
    <span class="token class-name">String</span> <span class="token function">greet</span><span class="token punctuation">(</span><span class="token class-name">String</span> who<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">&gt;</span> <span class="token string-literal"><span class="token string">&#39;Hello, </span><span class="token interpolation"><span class="token punctuation">$</span><span class="token expression">who</span></span><span class="token string">. I am </span><span class="token interpolation"><span class="token punctuation">$</span><span class="token expression">_name</span></span><span class="token string">.&#39;</span></span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token comment">// Person 인터페이스 구현체</span>
<span class="token keyword">class</span> <span class="token class-name">Impostor</span> <span class="token keyword">implements</span> <span class="token class-name">Person</span> <span class="token punctuation">{</span>
    <span class="token class-name">String</span> <span class="token keyword">get</span> _name <span class="token operator">=</span><span class="token operator">&gt;</span> <span class="token string-literal"><span class="token string">&#39;&#39;</span></span><span class="token punctuation">;</span>

    <span class="token class-name">String</span> <span class="token function">greet</span><span class="token punctuation">(</span><span class="token class-name">String</span> who<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">&gt;</span> <span class="token string-literal"><span class="token string">&#39;Hi </span><span class="token interpolation"><span class="token punctuation">$</span><span class="token expression">who</span></span><span class="token string">. Do you know who I am?&#39;</span></span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token class-name">String</span> <span class="token function">greetBob</span><span class="token punctuation">(</span><span class="token class-name">Person</span> person<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">&gt;</span> person<span class="token punctuation">.</span><span class="token function">greet</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&#39;Bob&#39;</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token function">print</span><span class="token punctuation">(</span><span class="token function">greetBob</span><span class="token punctuation">(</span><span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&#39;Kathy&#39;</span></span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">print</span><span class="token punctuation">(</span><span class="token function">greetBob</span><span class="token punctuation">(</span><span class="token class-name">Impostor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>아래는 다수의 인터페이스를 구현하는 클래스를 정의하는 예제입니다.</p><div class="language-dart line-numbers-mode" data-ext="dart"><pre class="language-dart"><code><span class="token keyword">class</span> <span class="token class-name">Point</span> <span class="token keyword">implements</span> <span class="token class-name">Comparable</span><span class="token punctuation">,</span> <span class="token class-name">Location</span> <span class="token punctuation">{</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h2 id="class-variables-and-methods" tabindex="-1"><a class="header-anchor" href="#class-variables-and-methods" aria-hidden="true">#</a> 클래스 변수 및 함수</h2><p><code>static</code> 키워드를 사용하여 클래스전반 변수와 메소드를 구현할 수 있습니다.</p><h3 id="static-variables" tabindex="-1"><a class="header-anchor" href="#static-variables" aria-hidden="true">#</a> 정적 변수</h3><p>정적 변수(클래스 변수)는 클래스전반 상태나 상수에 유용합니다.</p><div class="language-dart line-numbers-mode" data-ext="dart"><pre class="language-dart"><code><span class="token keyword">class</span> <span class="token class-name">Queue</span> <span class="token punctuation">{</span>
    <span class="token keyword">static</span> <span class="token keyword">const</span> initialCapacity <span class="token operator">=</span> <span class="token number">16</span><span class="token punctuation">;</span>
    <span class="token comment">// ...</span>
<span class="token punctuation">}</span>

<span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">assert</span><span class="token punctuation">(</span><span class="token class-name">Queue</span><span class="token punctuation">.</span>initialCapacity <span class="token operator">==</span> <span class="token number">16</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>정적변수는 사용되기 전까지 초기화되지 않습니다.</p>`,13),sn={class:"hint-container note"},an=s("p",{class:"hint-container-title"},"Note",-1),tn={href:"https://dart.dev/guides/language/effective-dart/style#identifiers",target:"_blank",rel:"noopener noreferrer"},en=s("code",null,"lowerCamelCase",-1),pn=p(`<h3 id="static-methods" tabindex="-1"><a class="header-anchor" href="#static-methods" aria-hidden="true">#</a> 정적 함수</h3><p>정적 메소드(클래스 메소드)는 인스턴스에서 동작하지 않기 때문에 <code>this</code>에 접근할 수 있습니다.<br> 그러나, 정적 변수에 접근할 수 있습니다.<br> 아래 예제에서 보여주듯, 클래스에서 정적 메소드를 직접 실행할 수 있습니다.</p><div class="language-dart line-numbers-mode" data-ext="dart"><pre class="language-dart"><code><span class="token keyword">import</span> <span class="token string-literal"><span class="token string">&#39;dart:math&#39;</span></span><span class="token punctuation">;</span>

<span class="token keyword">class</span> <span class="token class-name">Point</span> <span class="token punctuation">{</span>
    double x<span class="token punctuation">,</span> y<span class="token punctuation">;</span>
    <span class="token class-name">Point</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>x<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>y<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">static</span> double <span class="token function">distanceBetween</span><span class="token punctuation">(</span><span class="token class-name">Point</span> a<span class="token punctuation">,</span> <span class="token class-name">Point</span> b<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">var</span> dx <span class="token operator">=</span> a<span class="token punctuation">.</span>x <span class="token operator">-</span> b<span class="token punctuation">.</span>y<span class="token punctuation">;</span>
        <span class="token keyword">var</span> dy <span class="token operator">=</span> a<span class="token punctuation">.</span>y <span class="token operator">-</span> b<span class="token punctuation">.</span>y<span class="token punctuation">;</span>
        <span class="token keyword">return</span> <span class="token function">sqrt</span><span class="token punctuation">(</span>dx <span class="token operator">*</span> dx <span class="token operator">+</span> dy <span class="token operator">*</span> dy<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token class-name">Point</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">var</span> b <span class="token operator">=</span> <span class="token class-name">Point</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">var</span> distance <span class="token operator">=</span> <span class="token class-name">Point</span><span class="token punctuation">.</span><span class="token function">distanceBetween</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">assert</span><span class="token punctuation">(</span><span class="token number">2.8</span> <span class="token operator">&lt;</span> distance <span class="token operator">&amp;&amp;</span> distance <span class="token operator">&lt;</span> <span class="token number">2.9</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">print</span><span class="token punctuation">(</span>distance<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="hint-container note"><p class="hint-container-title">Note</p><p>공통적이거나 넓은 방면에서 유틸리티적 기능으로 사용될 경우 정적 메소드대신 최상위 함수를 사용함을 고려하세요.</p></div><p>정적 메소드를 컴파일타임 상수로 사용할 수 있습니다.<br> 예로 들어, 상수 생성자에 매개변수로 정적 메소드를 전달할 수 있습니다.</p>`,5);function on(cn,ln){const o=c("ExternalLinkIcon"),t=c("RouterLink"),l=c("AdsenseB");return u(),r("div",null,[s("p",null,[n("원문 : "),s("a",k,[n("https://dart.dev/language/classes"),a(o)])]),s("p",null,[n("Dart는 클래스와 혼합된 계승을 지원하는 객체지향 언어입니다."),m,n(" 모든 객체는 클래스의 인스턴스이며 "),v,n("을 제외한 클래스는 "),s("a",b,[n("Object"),a(o)]),n("에서 파생됩니다."),g,n(" 혼합된 계승은 모든 클래스는 정확히 하나의 상위클래스(예외로 "),s("a",h,[n("최상위 클래스"),a(o)]),n(),_,n(")를 가지지만 클래스 본문은 다수의 클래스 계층을 재사용될 수 있습니다."),y,a(t,{to:"/dart/language/extension-methods.html"},{default:e(()=>[n("확장메소드")]),_:1}),n("는 클래스를 변경하거나 하위 클래스를 만들지 않고 클래스의 기능을 추가할 수 있는 방법입니다.")]),f,s("p",null,[n("몇몇 클래스는 "),a(t,{to:"/dart/language/constructors.html#constant-constructors"},{default:e(()=>[n("상수 생성자")]),_:1}),n("를 제공합니다."),w,n(" 상수 생성자를 사용해서 컴파일타임 상수를 생성하려면 생성자 이름 앞에 "),x,n(" 키워드를 추가하면 됩니다.")]),P,s("p",null,[n("런타임에 객체의 유형을 가져오려면 "),s("a",I,[B,a(o)]),n(" 객체를 반환하는 "),T,n("의 "),A,n("를 사용합니다.")]),C,s("div",N,[S,s("p",null,[n("객체의 유형을 테스트할 때 "),j,n(" 보다 "),a(t,{to:"/dart/language/operators.html#type-test-operators"},{default:e(()=>[n("유형 테스트 연산자")]),_:1}),n("를 사용하세요."),L,n(" 운영 환경에서 "),z,n(" 테스트가 "),D,n(" 테스트보다 안전합니다.")])]),O,s("p",null,[n("모든 인스턴스 변수는 암시적인 getter 메소드를 생성합니다."),V,n(" 또한 final이 아닌 인스턴스 변수와 초기화없는 "),$,n(" 인스턴스 변수는 암시적인 setter 메소드를 생성합니다."),E,n(" 자세한 정보는 "),a(t,{to:"/dart/language/methods.html#getters-and-setters"},{default:e(()=>[n("getter와 setter")]),_:1}),n("를 참고하세요.")]),J,s("p",null,[n("정확히 한번만 설정이 가능한 경우 인스턴스 변수는 "),M,n("이 됩니다."),H,n(" 선언부에서 "),Q,n("이거나 "),R,n("가 아닌 인스턴스 변수의 초기화는 생성자 매개변수나 생성자 "),a(t,{to:"/dart/language/constructors.html#initializer-list"},{default:e(()=>[n("초기화 목록")]),_:1}),n("을 사용합니다.")]),q,s("ul",null,[s("li",null,[a(t,{to:"/dart/language/constructors.html#factory-constructors"},{default:e(()=>[n("팩토리 생성자")]),_:1}),n("를 사용")]),s("li",null,[K,n("을 사용하는 것은 "),s("a",F,[n("주의해야 합니다."),a(o)]),n(" 초기화 없는 "),G,n("은 API에 setter를 추가합니다.")])]),U,s("p",null,[n("인스턴스가 될 수 없는 추상 클래스를 정의하기 위해 "),W,n(" 수식어를 사용합니다."),X,n(" 추상 클래스는 자주 구현되는 인터페이스를 정의하기 위해 유용합니다."),Y,n(" 추상 클래스를 인스턴스화할 수 있도록 보이려면, "),a(t,{to:"/dart/language/constructors.html#factory-constructors"},{default:e(()=>[n("팩토리 생성자")]),_:1}),n("를 정의합니다.")]),s("p",null,[n("추상 클래스는 자주 "),a(t,{to:"/dart/language/methods.html#abstract-methods"},{default:e(()=>[n("추상 메소드")]),_:1}),n("를 가지고 있습니다."),Z,n(" 다음 예제는 추상 메소드를 가지고 있는 추상 클래스를 선언하는 것 입니다.")]),nn,s("div",sn,[an,s("p",null,[n("본 페이지에서 상수 이름에 "),s("a",tn,[n("스타일 가이드 추천"),a(o)]),n("에 따라 "),en,n("를 선호합니다.")])]),pn,a(l)])}const rn=i(d,[["render",on],["__file","classes.html.vue"]]);export{rn as default};
