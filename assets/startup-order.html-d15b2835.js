import{_ as c,r as l,o as r,c as u,a as s,d as a,w as t,b as n,e as p}from"./app-95e21c4a.js";const d={},k=s("br",null,null,-1),m=s("code",null,"depends_on",-1),v=s("code",null,"links",-1),b=s("code",null,"volumes_from",-1),_=s("code",null,'network_mode: "service:..."',-1),h=s("p",null,'그러나, Compose의 시작에서 컨테이너가 "대기" 상태가 될때까지 기다리지 않고, 실행중만 되면 다음 단계로 처리합니다. 여기에는 그럴만한 이유가 있습니다.',-1),g=s("p",null,"예를 들어, 데이터베이스를 기다리는 문제는 분산 시스템에서 발생하는 더 큰 문제들의 일부일 뿐입니다. 운영환경에서는 언제든지 데이터베이스를 사용할 수 없게 되거나, 호스트의 이동이 발생하게 됩니다. 어플리케이션은 이런 유형의 실패에 탄력적 대응이 가능해야합니다.",-1),f=s("p",null,"이를 처리하려면 실패 후 데이터베이스에 대한 연결을 다시 설정하도록 어플리케이션을 설계해야합니다. 연결을 재시도하면 결국 데이터베이스에 연결할 수 있게 됩니다.",-1),q=s("p",null,"가장 좋은 해결책은 시작할 때와 어떤 이유로 연결이 끊길 때마다 어플리케이션 코드에서 이 검사를 수행하는 것 입니다. 그러나 이 수준의 복원력이 필요하지 않은 경우 래퍼 스크립트를 사용하여 해결할 수 도 있습니다.",-1),y={href:"https://github.com/vishnubob/wait-for-it",target:"_blank",rel:"noopener noreferrer"},w={href:"https://github.com/jwilder/dockerize",target:"_blank",rel:"noopener noreferrer"},x={href:"https://github.com/Eficode/wait-for",target:"_blank",rel:"noopener noreferrer"},C={href:"https://github.com/jasonsychau/RelayAndContainers",target:"_blank",rel:"noopener noreferrer"},P=p(`<p>예로들어, <code>wait-for-it.sh</code> 또는 <code>wait-for</code> 를 서비스 명령에 래핑해서 사용하고자 한다면 다음과 같습니다.</p><div class="language-yaml line-numbers-mode" data-ext="yml"><pre class="language-yaml"><code><span class="token key atrule">version</span><span class="token punctuation">:</span> <span class="token string">&quot;2&quot;</span>
<span class="token key atrule">services</span><span class="token punctuation">:</span>
  <span class="token key atrule">web</span><span class="token punctuation">:</span>
    <span class="token key atrule">build</span><span class="token punctuation">:</span> .
    <span class="token key atrule">ports</span><span class="token punctuation">:</span>
      <span class="token punctuation">-</span> <span class="token string">&quot;80:8000&quot;</span>
    <span class="token key atrule">depends_on</span><span class="token punctuation">:</span>
      <span class="token punctuation">-</span> <span class="token string">&quot;db&quot;</span>
    <span class="token key atrule">command</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">&quot;./wait-for-it.sh&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;db:5432&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;--&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;python&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;app.py&quot;</span><span class="token punctuation">]</span>
  <span class="token key atrule">db</span><span class="token punctuation">:</span>
    <span class="token key atrule">image</span><span class="token punctuation">:</span> postgres
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p><strong>팁</strong></p><p>첫번째 솔루션에는 제약사항이 있습니다. 예로들어, 특정 서비스가 정말로 준비되었는지 검증하지 않습니다. 명령어에 더 많은 인수를 추가할 경우, 다음 예제와 같이 루프와 함께 <code>bash shift</code> 명령을 사용하세요.</p></blockquote>`,3),R=p(`<li><p>대안으로, 어플리케이션에 맞는 상태체크를 수행하는 래퍼 스크립트를 작성하는 것 입니다. 아래예제는 Postgres가 명령을 수행할 준비가 될때까지 대기하는 것 입니다.</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token shebang important">#!/bin/sh</span>
<span class="token comment"># wait-for-postgres.sh</span>

<span class="token builtin class-name">set</span> <span class="token parameter variable">-e</span>

<span class="token assign-left variable">host</span><span class="token operator">=</span><span class="token string">&quot;<span class="token variable">$1</span>&quot;</span>
<span class="token builtin class-name">shift</span>
<span class="token assign-left variable">cmd</span><span class="token operator">=</span><span class="token string">&quot;<span class="token variable">$@</span>&quot;</span>

<span class="token keyword">until</span> <span class="token assign-left variable">PGPASSWORD</span><span class="token operator">=</span><span class="token variable">$POSTGRES_PASSWORD</span> psql <span class="token parameter variable">-h</span> <span class="token string">&quot;<span class="token variable">$host</span>&quot;</span> <span class="token parameter variable">-U</span> <span class="token string">&quot;postgres&quot;</span> <span class="token parameter variable">-c</span> <span class="token string">&#39;\\q&#39;</span><span class="token punctuation">;</span> <span class="token keyword">do</span>
  <span class="token operator">&gt;</span><span class="token file-descriptor important">&amp;2</span> <span class="token builtin class-name">echo</span> <span class="token string">&quot;Postgres is unavailable - sleeping&quot;</span>
  <span class="token function">sleep</span> <span class="token number">1</span>
<span class="token keyword">done</span>

<span class="token operator">&gt;</span><span class="token file-descriptor important">&amp;2</span> <span class="token builtin class-name">echo</span> <span class="token string">&quot;Postgres is up - executing command&quot;</span>
<span class="token builtin class-name">exec</span> <span class="token variable">$cmd</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>이전 예제에서 다음 설정으로 래퍼 스크립트를 사용할 수 있습니다.</p></li><li><div class="language-yaml line-numbers-mode" data-ext="yml"><pre class="language-yaml"><code><span class="token key atrule">command</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">&quot;./wait-for-postgres.sh&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;db&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;python&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;app.py&quot;</span><span class="token punctuation">]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li>`,2),S=s("h2",{id:"compose-문서",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#compose-문서","aria-hidden":"true"},"#"),n(" Compose 문서")],-1);function A(B,E){const e=l("RouterLink"),o=l("ExternalLinkIcon"),i=l("AdsenseB");return r(),u("div",null,[s("p",null,[a(e,{to:"/docker/compose/compose-file/compose-file-v3.html#depends_on"},{default:t(()=>[n("depends_on")]),_:1}),n(" 옵션을 사용해서 서비스의 시작과 종료 순서를 제어할 수 있습니다."),k,n(" Compose는 항상 "),m,n(", "),v,n(", "),b,n(", and "),_,n(" 에서 결정되는 의존성을 가지고 그 순서대로 컨테이너를 시작과 종료하게 됩니다.")]),h,g,f,q,s("ul",null,[s("li",null,[s("p",null,[s("a",y,[n("wait-for-it"),a(o)]),n(" 또는 "),s("a",w,[n("dockerize"),a(o)]),n(", sh-호환되는 "),s("a",x,[n("wait-for"),a(o)]),n(", "),s("a",C,[n("RelayAndContainers"),a(o)]),n(" 템플릿과 같은 툴을 사용할 수 있습니다. 이것은 TCP 연결을 수락할 때까지 주어진 호스트와 포트를 폴링하기 위해 어플리케이션 이미지에 포함할 수 있는 작은 래퍼 스크립트입니다.")]),P]),R]),S,s("ul",null,[s("li",null,[a(e,{to:"/docker/compose/"},{default:t(()=>[n("사용자가이드")]),_:1})]),s("li",null,[a(e,{to:"/docker/compose/install.html"},{default:t(()=>[n("Compose 설치하기")]),_:1})]),s("li",null,[a(e,{to:"/docker/compose/gettingstarted.html"},{default:t(()=>[n("시작하기")]),_:1})]),s("li",null,[a(e,{to:"/docker/compose/reference/"},{default:t(()=>[n("명령어 레퍼런스")]),_:1})]),s("li",null,[a(e,{to:"/docker/compose/compose-file/"},{default:t(()=>[n("Compose 파일 레퍼런스")]),_:1})]),s("li",null,[a(e,{to:"/docker/compose/samples-for-compose.html"},{default:t(()=>[n("Compose를 활용한 샘플 어플리케이션")]),_:1})])]),a(i)])}const L=c(d,[["render",A],["__file","startup-order.html.vue"]]);export{L as default};
