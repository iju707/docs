import{_ as r,r as d,o as p,c as t,a as o,b as e,d as s,w as c,e as n}from"./app-95e21c4a.js";const i={},m=n(`<p>개발환경에서 Compose로 어플리케이션을 정의할 때, 이 정의를 CI, 스테이징, 운영환경 등 다른 환경에서 어플리케이션을 실행하기 위해 사용할 수 있습니다.</p><p>어플리케이션을 배포하기 가장 쉬운방법은 개발환경에서 실행하는 것과 유사하게 단일 서버에 실행하는 것 입니다.<br> 어플리케이션의 스케일 확장이 필요한 경우, Compose 어플리케이션을 스웜 클러스터에 실행하면 됩니다.</p><h3 id="운영환경을-위한-compose-파일-수정" tabindex="-1"><a class="header-anchor" href="#운영환경을-위한-compose-파일-수정" aria-hidden="true">#</a> 운영환경을 위한 Compose 파일 수정</h3><p>아마도 운영에 적합하게 만들려면 어플리케이션의 구성을 변경해야할 것입니다.<br> 변경에는 다음 사항이 포함될 것 입니다.</p><ul><li>어플리케이션 코드가 있는 볼륨 바인딩 제거하여 코드는 컨테이너 내부에만 있고 밖에서 변경이 불가능하도록 함</li><li>호스트의 다른 포트로 바인딩</li><li>다른 환경변수로 설정, 예로 로깅 수준 감소, 이메일 서버와 같은 외부 서비스 설정 변경</li><li>중단 시간 방지를 위하여 <code>restart: always</code>와 같은 재시작 정책 정의</li><li>로그 수집기 같은 추가 서비스 추가</li></ul><p>이와 같은 이유로, <code>production.yml</code>이라는 운영에 적합한 구성을 정의한 추가적인 Compose 파일 정의를 고려하게 됩니다.<br> 이 구성파일은 원본 Compose 파일에서 변경하고 싶은 내용만 포함하게 됩니다.<br> 추가적인 Compose 파일은 원본 <code>docker-compose.yml</code>에 병합되어 새로운 구성을 만들게 됩니다.</p><p>두번째 구성파일이 생기면, <code>-f</code> 옵션을 활용하여 해당 파일을 사용한다고 Compose에 전달해야합니다.</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">docker-compose</span> <span class="token parameter variable">-f</span> docker-compose.yml <span class="token parameter variable">-f</span> production.yml up <span class="token parameter variable">-d</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div>`,8),u=n(`<h3 id="변경-배포" tabindex="-1"><a class="header-anchor" href="#변경-배포" aria-hidden="true">#</a> 변경 배포</h3><p>어플리케이션 코드의 변경이 있으면 이미지를 재빌드하고 어플리케이션 컨테이너를 재생성해야함을 기억해야합니다.<br><code>web</code> 서비스를 재배포할 경우 다음과 같습니다.</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>    $ <span class="token function">docker-compose</span> build web
    $ <span class="token function">docker-compose</span> up --no-deps <span class="token parameter variable">-d</span> web
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>첫번째로 <code>web</code>을 위한 이미지를 재빌드하고 <code>web</code> 서비스 <em>하나만</em> 중지, 삭제, 재생성을 합니다.<br><code>--no-deps</code> 항목은 Compose에서 <code>web</code>에 의존되어있는 다른 서비스의 재생성을 방지합니다.</p><h3 id="단일-서버에서-compose-실행" tabindex="-1"><a class="header-anchor" href="#단일-서버에서-compose-실행" aria-hidden="true">#</a> 단일 서버에서 Compose 실행</h3><p><code>DOCKER_HOST</code>, <code>DOCKER_TLS_VERIFY</code>, <code>DOCKER_CERT_PATH</code> 환경변수를 적절하게 설정하면 원격 도커 호스트에 어플리케이션을 배포하도록 Compose를 사용할 수 있습니다.</p><p>환경변수를 한번만 설정하면 모든 일반적인 <code>docker-compose</code> 명령은 추가구성없이 동작합니다.</p><h2 id="compose-문서" tabindex="-1"><a class="header-anchor" href="#compose-문서" aria-hidden="true">#</a> Compose 문서</h2>`,8);function h(b,_){const a=d("RouterLink"),l=d("AdsenseB");return p(),t("div",null,[m,o("p",null,[e("더 복잡한 예제는 "),s(a,{to:"/docker/compose/extends.html#%EB%8B%A4%EB%A5%B8-%ED%99%98%EA%B2%BD"},{default:c(()=>[e("다중 Compose 파일 사용")]),_:1}),e("을 참고하세요.")]),u,o("ul",null,[o("li",null,[s(a,{to:"/docker/compose/"},{default:c(()=>[e("사용자가이드")]),_:1})]),o("li",null,[s(a,{to:"/docker/compose/install.html"},{default:c(()=>[e("Compose 설치하기")]),_:1})]),o("li",null,[s(a,{to:"/docker/compose/gettingstarted.html"},{default:c(()=>[e("시작하기")]),_:1})]),o("li",null,[s(a,{to:"/docker/compose/reference/"},{default:c(()=>[e("명령어 레퍼런스")]),_:1})]),o("li",null,[s(a,{to:"/docker/compose/compose-file/"},{default:c(()=>[e("Compose 파일 레퍼런스")]),_:1})]),o("li",null,[s(a,{to:"/docker/compose/samples-for-compose.html"},{default:c(()=>[e("Compose를 활용한 샘플 어플리케이션")]),_:1})])]),s(l)])}const k=r(i,[["render",h],["__file","production.html.vue"]]);export{k as default};
