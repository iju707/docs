import{_ as i,r as c,o as d,c as r,a as s,b as n,d as a,w as t,e as o}from"./app-95e21c4a.js";const u={},k={href:"https://dart.dev/guides/language/language-tour#variables",target:"_blank",rel:"noopener noreferrer"},m=o(`<p>변수를 만들고 초기화하는 예제가 있습니다.</p><div class="language-dart line-numbers-mode" data-ext="dart"><pre class="language-dart"><code><span class="token keyword">var</span> name <span class="token operator">=</span> <span class="token string-literal"><span class="token string">&#39;Bob&#39;</span></span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>변수는 참조를 저장합니다.<br><code>name</code>이라는 변수는 &quot;Bob&quot;의 값을 가지는 <code>String</code> 객체의 참조를 포함하고 있습니다.</p><p><code>name</code> 변수의 타입은 <code>String</code>으로 유추되지만 타입을 지정해서 변경할 수 있습니다.<br> 객체가 한가지 타입으로 제한되지 않는 경우에는 <code>Object</code> 타입으로 지정하면 됩니다. (또는 필요할 경우 <code>dynamic</code>)</p><div class="language-dart line-numbers-mode" data-ext="dart"><pre class="language-dart"><code><span class="token class-name">Object</span> name <span class="token operator">=</span> <span class="token string-literal"><span class="token string">&#39;Bob&#39;</span></span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>다른 방법으로는 유추할 수 있는 타입을 명시적으로 지정하는 것 입니다.</p><div class="language-dart line-numbers-mode" data-ext="dart"><pre class="language-dart"><code><span class="token class-name">String</span> name <span class="token operator">=</span> <span class="token string-literal"><span class="token string">&#39;Bob&#39;</span></span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div>`,7),v={class:"hint-container note"},b=s("p",{class:"hint-container-title"},"Note",-1),g=s("code",null,"var",-1),h={href:"https://dart.dev/guides/language/effective-dart/design#types",target:"_blank",rel:"noopener noreferrer"},_=s("h2",{id:"default-value",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#default-value","aria-hidden":"true"},"#"),n(" 기본값")],-1),f=s("code",null,"null",-1),y={href:"https://dart.dev/null-safety",target:"_blank",rel:"noopener noreferrer"},w=s("br",null,null,-1),x=s("br",null,null,-1),B=o(`<div class="language-dart line-numbers-mode" data-ext="dart"><pre class="language-dart"><code>int<span class="token operator">?</span> lineCount<span class="token punctuation">;</span>
<span class="token keyword">assert</span><span class="token punctuation">(</span>lineCount <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div>`,1),C={class:"hint-container note"},N=s("p",{class:"hint-container-title"},"Note",-1),L=s("code",null,"assert()",-1),S=s("br",null,null,-1),D=s("code",null,"assert(condition)",-1),T=s("br",null,null,-1),j=o(`<p>null 안전을 활성화 하면 변수를 사용하기 전에 null이 아닌 값으로 무조건 초기화 해야합니다.</p><div class="language-dart line-numbers-mode" data-ext="dart"><pre class="language-dart"><code>int lineCount <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>로컬변수를 선언한 곳에 초기화할 필요는 없지만 사용하기전 값을 할당해야 합니다.<br> 예로 들어, 아래 코드는 Dart가 <code>print()</code>로 전달 할 시점에 <code>lineCount</code>가 null이 아님을 감지할 수 있기 떄문에 문제가 없습니다.</p><div class="language-dart line-numbers-mode" data-ext="dart"><pre class="language-dart"><code>int lineCount<span class="token punctuation">;</span>

<span class="token keyword">if</span> <span class="token punctuation">(</span>weLikeToCount<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    lineCount <span class="token operator">=</span> <span class="token function">countLines</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
    lineCount <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token function">print</span><span class="token punctuation">(</span>lineCount<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>최상위 및 클래스 변수는 지연되어 초기화합니다.<br> 초기화 코드는 변수가 처음 사용될 때 실행됩니다.</p><h2 id="late-variables" tabindex="-1"><a class="header-anchor" href="#late-variables" aria-hidden="true">#</a> 지연된 변수</h2><p>Dart 2.12에는 <code>late</code>라는 수정자가 추가되었으며 다음과 같은 경우에 사용합니다.</p><ul><li>null이 불가능한 변수를 선언하는데 선언 이후 초기화할 때</li><li>변수의 지연된 초기화할 때</li></ul><p>종종 Dart의 제어흐름 분석은 null이 불가능한 변수를 사용하기전 null이 아닌 값으로 설정된 것을 감지할 수 있지만 때로는 분석이 실패합니다.<br> 두가지 일반적인 경우는 최상위 변수와 인스턴스 변수입니다.<br> Dart는 종종 설정의 여부를 확인할 수 없으므로 시도하지 않습니다.</p><p>사용하기전 변수가 설정됨을 확신할 수 있지만 Dart에서 인정되지 않는 경우 오류를 수정하기 위해 <code>late</code>를 변수에 마킹하는 것 입니다.</p><div class="language-dart line-numbers-mode" data-ext="dart"><pre class="language-dart"><code>late <span class="token class-name">String</span> description<span class="token punctuation">;</span>

<span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    description <span class="token operator">=</span> <span class="token string-literal"><span class="token string">&#39;Feijoada!&#39;</span></span><span class="token punctuation">;</span>
    <span class="token function">print</span><span class="token punctuation">(</span>description<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="hint-container warning"><p class="hint-container-title">Note</p><p><code>late</code> 변수의 초기화에 실패한다면, 변수가 사용할 때 런타임 오류가 발생할 것 입니다.</p></div><p><code>late</code>로 지정된 변수가 선언할 때 같이 초기화 된다면, 초기화는 변수가 처음사용될 때 실행됩니다.<br> 지연된 초기화는 다음과 같은 경우에 유용합니다.</p><ul><li>변수가 필요하지 않을 수 있으며 초기화하는데 비용이 많이 드는 경우</li><li>인스턴스 변수를 초기화하는데 초기화할 때 <code>this</code>에 접근이 필요한 경우</li></ul><p>아래 예제에서 <code>temperature</code> 변수는 전혀 사용되지 않으면 비용이 많이 드는 <code>readThermometer()</code>함수는 절대 호출되지 않습니다.</p><div class="language-dart line-numbers-mode" data-ext="dart"><pre class="language-dart"><code><span class="token comment">// 이 프로그램은 readThermometer()만 호출합니다.</span>
late <span class="token class-name">String</span> temperature <span class="token operator">=</span> <span class="token function">readThermometer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 지연된 초기화</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="final-and-const" tabindex="-1"><a class="header-anchor" href="#final-and-const" aria-hidden="true">#</a> final과 const</h2><p>만약 변수를 변경할 생각이 없는 경우에는 <code>final</code>이나 <code>const</code>를 <code>var</code>대신 사용하거나 타입 앞에 추가합니다.<br> final 변수는 한번만 설정됩니다.<br> const 변수는 컴파일타임 상수입니다. (const 변수는 암시적으로 final이 됩니다)</p>`,18),A={class:"hint-container note"},V=s("p",{class:"hint-container-title"},"Note",-1),z=s("code",null,"final",-1),E=s("code",null,"const",-1),O=o(`<p><code>final</code> 변수를 생성하고 설정하는 예제입니다.</p><div class="language-dart line-numbers-mode" data-ext="dart"><pre class="language-dart"><code><span class="token keyword">final</span> name <span class="token operator">=</span> <span class="token string-literal"><span class="token string">&#39;Bob&#39;</span></span><span class="token punctuation">;</span> <span class="token comment">// 타입 지정없는 예제</span>
<span class="token keyword">final</span> <span class="token class-name">String</span> nickname <span class="token operator">=</span> <span class="token string-literal"><span class="token string">&#39;Bobby&#39;</span></span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p><code>final</code> 변수의 값은 변경할 수 없습니다.</p><div class="language-dart line-numbers-mode" data-ext="dart"><pre class="language-dart"><code><span class="token comment">// 정적 분석 : 오류/경고</span>
name <span class="token operator">=</span> <span class="token string-literal"><span class="token string">&#39;Alice&#39;</span></span><span class="token punctuation">;</span> <span class="token comment">// 오류 : final 변수는 한번만 설정이 가능합니다.</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>컴파일타임 상수</strong>로 만들고 싶으면 <code>const</code> 변수를 사용하면 됩니다.<br> 클래스수준의 const 변수는 <code>static const</code>로 지정하면 됩니다.<br> 변수를 선언하는 곳에 숫자, 문자열, const 변수, 상수 숫자의 수치적연산 결과와 같은 컴파일타임 상수를 값으로 설정하면 됩니다.</p><div class="language-dart line-numbers-mode" data-ext="dart"><pre class="language-dart"><code><span class="token keyword">const</span> bar <span class="token operator">=</span> <span class="token number">1000000</span><span class="token punctuation">;</span> <span class="token comment">// 압력 단위 (dynes/cm2)</span>
<span class="token keyword">const</span> double atm <span class="token operator">=</span> <span class="token number">1.01325</span> <span class="token operator">*</span> bar<span class="token punctuation">;</span> <span class="token comment">// 표준 대기</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p><code>const</code> 키워드는 상수 변수를 선언할때만 사용하는 것은 아닙니다.<br> 상수값들을 생성하거나 상수값들을 생성하는 생성자를 선언할 떄도 사용합니다.<br> 모든 변수는 상수값을 가질 수 있습니다.</p><div class="language-dart line-numbers-mode" data-ext="dart"><pre class="language-dart"><code><span class="token keyword">var</span> foo <span class="token operator">=</span> <span class="token keyword">const</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token keyword">final</span> bar <span class="token operator">=</span> <span class="token keyword">const</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> baz <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">// const [] 와 동일</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,8),q=s("code",null,"baz",-1),I=s("code",null,"const",-1),R=s("code",null,"const",-1),F=s("br",null,null,-1),G={href:"https://dart.dev/guides/language/effective-dart/usage#dont-use-const-redundantly",target:"_blank",rel:"noopener noreferrer"},H=o(`<p><code>fianl</code>이나 <code>const</code>가 아닌 변수의 값은 <code>const</code> 값을 사용했더라도 변경이 가능합니다.</p><div class="language-dart line-numbers-mode" data-ext="dart"><pre class="language-dart"><code>foo <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">// 원래는 const []</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>그러나, <code>const</code> 변수의 값은 변경이 불가능합니다.</p><div class="language-dart line-numbers-mode" data-ext="dart"><pre class="language-dart"><code><span class="token comment">// 정적 분석 : 오류/경고</span>
baz <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">42</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">// 오류 : 상수 변수는 값을 할당할 수 없습니다.</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div>`,4),J=s("code",null,"is",-1),K=s("code",null,"as",-1),M=s("code",null,"...",-1),P=s("code",null,"...?",-1),Q=o(`<div class="language-dart line-numbers-mode" data-ext="dart"><pre class="language-dart"><code><span class="token keyword">const</span> <span class="token class-name">Object</span> i <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">;</span> <span class="token comment">// i는 int 값을 가지는 const 객체</span>
<span class="token keyword">const</span> list <span class="token operator">=</span> <span class="token punctuation">[</span>i <span class="token operator">as</span> int<span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">// 타입변환을 사용</span>
<span class="token keyword">const</span> map <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">is</span> int<span class="token punctuation">)</span> i<span class="token punctuation">:</span> <span class="token string-literal"><span class="token string">&#39;int&#39;</span></span><span class="token punctuation">}</span><span class="token punctuation">;</span> <span class="token comment">// is와 콜렉션 if를 사용</span>
<span class="token keyword">const</span> <span class="token keyword">set</span> <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token keyword">if</span> <span class="token punctuation">(</span>list <span class="token operator">is</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span>int<span class="token punctuation">&gt;</span></span><span class="token punctuation">)</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>list<span class="token punctuation">}</span><span class="token punctuation">;</span> <span class="token comment">// ...와 스프레드</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="hint-container note"><p class="hint-container-title">Note</p><p><code>final</code>객체는 수정할 수 없지만 내부의 필드는 변경이 가능합니다.<br> 이와 대조되어 불변성을 가지기 떄문에 <code>const</code> 객체와 필드는 변경이 불가능합니다.</p></div>`,2),U=s("code",null,"const",-1);function W(X,Y){const l=c("ExternalLinkIcon"),e=c("RouterLink"),p=c("AdsenseB");return d(),r("div",null,[s("p",null,[n("원문 : "),s("a",k,[n("https://dart.dev/guides/language/language-tour#variables"),a(l)])]),m,s("div",v,[b,s("p",null,[n("이 문서에서는 로컬 변수에 대하여 타입명시보단 "),g,n("를 사용하는 "),s("a",h,[n("스타일 가이드 권장사항"),a(l)]),n("을 따릅니다.")])]),_,s("p",null,[n("null이 가능한 타입의 초기화안된 변수는 "),f,n("로 초기화됩니다. ("),s("a",y,[n("null 안전"),a(l)]),n("을 선택하지 않은 경우 모든 변수는 null이 가능한 타입입니다)"),w,n(" 숫자 타입의 변수라도 null로 초기화 됩니다."),x,n(" Dart의 다른것과 마찬가지로 숫자 또한 객체이기 때문입니다.")]),B,s("div",C,[N,s("p",null,[n("운영 코드는 "),L,n(" 호출을 무시합니다."),S,n(" 하지만 개발중에는 "),D,n("에서 조건이 false일 경우 예외가 발생하게 됩니다."),T,n(" 자세한 정보는 "),a(e,{to:"/flutter/dart-tour/control-flow-statements.html#assert"},{default:t(()=>[n("Assert")]),_:1}),n("를 참고하세요.")])]),j,s("div",A,[V,s("p",null,[a(e,{to:"/flutter/dart-tour/classes.html#instance-variables"},{default:t(()=>[n("인스턴스 변수")]),_:1}),n("는 "),z,n("이 될 수 있으나 "),E,n("는 불가능합니다.")])]),O,s("p",null,[n("위의 "),q,n("와 같이 "),I,n(" 선언의 초기화 표현식에 "),R,n("를 생략할 수도 있습니다."),F,n(" 자세한 내용은 "),s("a",G,[n("불필요하게 const 사용하지 않기"),a(l)]),n("를 참고하세요.")]),H,s("p",null,[a(e,{to:"/flutter/dart-tour/operators.html#type-test-operators"},{default:t(()=>[n("타입 확인 및 변환")]),_:1}),n("("),J,n("와 "),K,n("), "),a(e,{to:"/flutter/dart-tour/built-in-types.html#collection-operators"},{default:t(()=>[n("콜렉션 if")]),_:1}),n("와 "),a(e,{to:"/flutter/dart-tour/built-in-types.html#spread-operator"},{default:t(()=>[n("스프레드 연산자")]),_:1}),n(" ("),M,n("와 "),P,n(")를 사용하여 상수를 선언할 수 있습니다.")]),Q,s("p",null,[n("상수값을 생성할 때 "),U,n("를 사용하는 것에 대한 자세한 정보는 "),a(e,{to:"/flutter/dart-tour/built-in-types.html#lists"},{default:t(()=>[n("리스트")]),_:1}),n(", "),a(e,{to:"/flutter/dart-tour/built-in-types.html#maps"},{default:t(()=>[n("맵")]),_:1}),n("이나 "),a(e,{to:"/flutter/dart-tour/classes.html"},{default:t(()=>[n("클래스")]),_:1}),n("를 참고하세요.")]),a(p)])}const $=i(u,[["render",W],["__file","variables.html.vue"]]);export{$ as default};
