import{_ as l,r as o,o as r,c as u,a as s,b as n,d as a,w as c,e}from"./app-95e21c4a.js";const d={},k={href:"https://dart.dev/language/extension-methods",target:"_blank",rel:"noopener noreferrer"},m=s("p",null,[n("확장된 메소드은 기존의 라이브러리에 기능요소를 추가하는 것 입니다."),s("br"),n(" 아마 자세히 알지 못한 상태에서 확장된 메소드를 사용하고 있을 것 입니다."),s("br"),n(" 예로 들어, IDE에서 코드완성을 사용할 때 일반 메소드말고 확장된 메소드를 제안할 것 입니다.")],-1),v=s("iframe",{width:"560",height:"315",src:"https://www.youtube.com/embed/D3j0OSfT9ZI",frameborder:"0",allow:"accelerometer; encrypted-media; gyroscope; picture-in-picture",allowfullscreen:""}," ",-1),g=e(`<p><em>이 비디오를 시청하시면 확장된 메소드에 대한 개요를 배울 수 있습니다.</em></p><h2 id="overview" tabindex="-1"><a class="header-anchor" href="#overview" aria-hidden="true">#</a> 개요</h2><p>몇몇 API를 사용하거나 널리사용되는 라이브러리를 구현할 때 API를 바꾸는 것이 비실용적이거나 불가능할 때가 많습니다.<br> 그러나 일부 기능을 추가하고 싶을 때가 있습니다.</p><p>예로 들어, 문자열을 정수로 파싱하는 아래 코드를 고려해보겠습니다.</p><div class="language-dart line-numbers-mode" data-ext="dart"><pre class="language-dart"><code>int<span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&#39;42&#39;</span></span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>대신 문자열에 이 기능을 가지고 있다면, 툴에서 좀더 짧고 쉽게 사용할 수 있을 것 입니다.</p><div class="language-dart line-numbers-mode" data-ext="dart"><pre class="language-dart"><code><span class="token string-literal"><span class="token string">&#39;42&#39;</span></span><span class="token punctuation">.</span><span class="token function">parseInt</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>위 코드가 가능하려면 <code>String</code> 클래스의 확장을 포함한 라이브러리를 가져와야 합니다.</p><div class="language-dart line-numbers-mode" data-ext="dart"><pre class="language-dart"><code><span class="token keyword">import</span> <span class="token string-literal"><span class="token string">&#39;string_apis.dart&#39;</span></span><span class="token punctuation">;</span>
<span class="token comment">// ···</span>
<span class="token function">print</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&#39;42&#39;</span></span><span class="token punctuation">.</span><span class="token function">parseInt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 확장된 함수 사용하기</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>확장은 메소드 뿐만아니라 getter, setter와 연산자 등 다른 멤버도 가능합니다.<br> 또한, 확장은 API 충돌이 발생할때 도움이 되도록 명명할 수 있습니다.<br> 아래에서 문자열의 연산자인 확장(<code>NumberParsing</code>)을 사용하여 확장된 메소드 <code>parseInt()</code>를 어떻게 구현하는지 보여줍니다.</p><div class="language-dart line-numbers-mode" data-ext="dart"><pre class="language-dart"><code><span class="token keyword">extension</span> <span class="token class-name">NumberParsing</span> <span class="token keyword">on</span> <span class="token class-name">String</span> <span class="token punctuation">{</span>
  int <span class="token function">parseInt</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> int<span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  <span class="token comment">// ···</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>다음 절에서는 확장된 메소드를 어떻게 사용하는지 보겠습니다.<br> 그 후 확장된 메소드를 구현하는 것을 살펴보겠습니다.</p><h2 id="using-extension-methods" tabindex="-1"><a class="header-anchor" href="#using-extension-methods" aria-hidden="true">#</a> 확장된 메소드 사용하기</h2><p>모든 Dart 코드 처럼, 확장된 메소드는 라이브러리에 있습니다.<br> 이미 확장된 메소드를 어떻게 사용하는지 봤을 것 입니다.<br> 라이브러리 자체를 가져와서 평범한 메소드처럼 사용하면 됩니다.</p><div class="language-dart line-numbers-mode" data-ext="dart"><pre class="language-dart"><code><span class="token comment">// String에 확장을 가지고 있는 라이브러리를 가져옵니다.</span>
<span class="token keyword">import</span> <span class="token string-literal"><span class="token string">&#39;string_apis.dart&#39;</span></span><span class="token punctuation">;</span>
<span class="token comment">// ···</span>
<span class="token function">print</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&#39;42&#39;</span></span><span class="token punctuation">.</span><span class="token function">padLeft</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// String 메소드를 사용</span>
<span class="token function">print</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&#39;42&#39;</span></span><span class="token punctuation">.</span><span class="token function">parseInt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 확장된 메소드를 사용</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,15),b=s("br",null,null,-1),h=s("code",null,"dynamic",-1),_=e(`<h3 id="static-types-and-dynamic" tabindex="-1"><a class="header-anchor" href="#static-types-and-dynamic" aria-hidden="true">#</a> 정적 타입과 dynamic</h3><p>변수의 타입이 <code>dynamic</code>일 경우 확장된 메소드를 실행할 수 없습니다.<br> 예로 들어, 아래 코드의 결과는 런타임 예외가 발생합니다.</p><div class="language-dart line-numbers-mode" data-ext="dart"><pre class="language-dart"><code><span class="token keyword">dynamic</span> d <span class="token operator">=</span> <span class="token string-literal"><span class="token string">&#39;2&#39;</span></span><span class="token punctuation">;</span>
<span class="token function">print</span><span class="token punctuation">(</span>d<span class="token punctuation">.</span><span class="token function">parseInt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 런타임 예외: NoSuchMethodError</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>확장된 메소드는 Dart의 타입추론에도 동작합니다.<br> 아래 코드는 변수 <code>v</code>가 <code>String</code> 타입을 가지도록 추론되어 정상동작을 합니다.</p><div class="language-dart line-numbers-mode" data-ext="dart"><pre class="language-dart"><code><span class="token keyword">var</span> v <span class="token operator">=</span> <span class="token string-literal"><span class="token string">&#39;2&#39;</span></span><span class="token punctuation">;</span>
<span class="token function">print</span><span class="token punctuation">(</span>v<span class="token punctuation">.</span><span class="token function">parseInt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 출력 : 2</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p><code>dynamic</code>이 동작하지 않은 이유는 확장된 메소드가 정적 타입의 수신자에 대해 처리되기 때문입니다.<br> 확장된 메소드가 정적으로 처리되기 때문에 정적 함수를 호출하는 것처럼 빠릅니다.</p>`,6),f=s("code",null,"dynamic",-1),x=e(`<h3 id="api-conflicts" tabindex="-1"><a class="header-anchor" href="#api-conflicts" aria-hidden="true">#</a> API 충돌</h3><p>확장된 멤버가 인터페이스나 다른 확장된 멤버와 충돌할 경우 몇가지 선택지가 있습니다.</p><p>한가지는 <code>show</code>나 <code>hide</code>를 사용하여 노출되는 API를 제한하는 충돌된 확장을 가져오는 것으로 변경합니다.</p><div class="language-dart line-numbers-mode" data-ext="dart"><pre class="language-dart"><code><span class="token comment">// String 확장된 메소드 parseInt()를 정의</span>
<span class="token keyword">import</span> <span class="token string-literal"><span class="token string">&#39;string_apis.dart&#39;</span></span><span class="token punctuation">;</span>

<span class="token comment">// 동일하게 parseInt()를 정의했지만 NumberParsing2를 숨겨서 확장된 메소드를 숨김</span>
<span class="token keyword">import</span> <span class="token string-literal"><span class="token string">&#39;string_apis_2.dart&#39;</span></span> <span class="token keyword">hide</span> <span class="token class-name">NumberParsing2</span><span class="token punctuation">;</span>

<span class="token comment">// ···</span>
<span class="token comment">// &#39;string_apis.dart&#39;에 정의된 parseInt()</span>
<span class="token function">print</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&#39;42&#39;</span></span><span class="token punctuation">.</span><span class="token function">parseInt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>다른방법으로는 확장이 래퍼클래스처럼 보이도록 명시적 확장을 사용하는 것 입니다.</p><div class="language-dart line-numbers-mode" data-ext="dart"><pre class="language-dart"><code><span class="token comment">// 두 라이브러리 모두 다른 이름을 가진 확장으로 문자열의 확장인 parseInt()를 정의합니다.</span>
<span class="token keyword">import</span> <span class="token string-literal"><span class="token string">&#39;string_apis.dart&#39;</span></span><span class="token punctuation">;</span> <span class="token comment">// NumberParsing 확장을 포함</span>
<span class="token keyword">import</span> <span class="token string-literal"><span class="token string">&#39;string_apis_2.dart&#39;</span></span><span class="token punctuation">;</span> <span class="token comment">// NumberParsing2 확장을 포함</span>

<span class="token comment">// ···</span>
<span class="token comment">// print(&#39;42&#39;.parseInt()); // 동작하지 않음</span>
<span class="token function">print</span><span class="token punctuation">(</span><span class="token class-name">NumberParsing</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&#39;42&#39;</span></span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">parseInt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">print</span><span class="token punctuation">(</span><span class="token class-name">NumberParsing2</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&#39;42&#39;</span></span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">parseInt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>만약 확장의 이름이 동일하다면 접두어를 사용하여 가져와야됩니다.</p><div class="language-dart line-numbers-mode" data-ext="dart"><pre class="language-dart"><code><span class="token comment">// 두 라이브러리 모두 다른 이름을 가진 확장으로 문자열의 확장인 parseInt()를 정의합니다.</span>
<span class="token comment">// 또한 &#39;string_apis_3.dart&#39;의 NumberParsing 확장은 parseNum()을 정의합니다.</span>
<span class="token keyword">import</span> <span class="token string-literal"><span class="token string">&#39;string_apis.dart&#39;</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token string-literal"><span class="token string">&#39;string_apis_3.dart&#39;</span></span> <span class="token operator">as</span> rad<span class="token punctuation">;</span>

<span class="token comment">// ···</span>
<span class="token comment">// print(&#39;42&#39;.parseInt()); // 동작하지 않음</span>

<span class="token comment">// string_apis.dart의 ParseNumbers 확장을 사용</span>
<span class="token function">print</span><span class="token punctuation">(</span><span class="token class-name">NumberParsing</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&#39;42&#39;</span></span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">parseInt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// string_apis_3.dart의 ParseNumbers 확장을 사용</span>
<span class="token function">print</span><span class="token punctuation">(</span><span class="token class-name"><span class="token namespace">rad<span class="token punctuation">.</span></span>NumberParsing</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&#39;42&#39;</span></span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">parseInt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// string_apis_3.dart만 parseNum()를 가짐</span>
<span class="token function">print</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&#39;42&#39;</span></span><span class="token punctuation">.</span><span class="token function">parseNum</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>예제가 보여주듯 접두어를 사용하여 가져오더라도 확장된 메소드를 암묵적으로 실행할 수 있습니다.<br> 확장을 명시적으로 실행할 때 이름이 충돌되는 것을 피하고자 할때만 접두어를 사용하시면 됩니다.</p><h2 id="implementing-extension-methods" tabindex="-1"><a class="header-anchor" href="#implementing-extension-methods" aria-hidden="true">#</a> 확장된 메소드 구현하기</h2><p>아래의 문법이 확장을 생성하는 것 입니다.</p><div class="language-dart line-numbers-mode" data-ext="dart"><pre class="language-dart"><code><span class="token keyword">extension</span> <span class="token generics"><span class="token punctuation">&lt;</span><span class="token keyword">extension</span> name<span class="token punctuation">&gt;</span></span><span class="token operator">?</span> <span class="token keyword">on</span> <span class="token generics"><span class="token punctuation">&lt;</span>type<span class="token punctuation">&gt;</span></span> <span class="token punctuation">{</span>
  <span class="token punctuation">(</span><span class="token generics"><span class="token punctuation">&lt;</span>member definition<span class="token punctuation">&gt;</span></span><span class="token punctuation">)</span><span class="token operator">*</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>예로 들어, <code>String</code> 클래스에 확장을 구현하는 것 입니다.</p><div class="language-dart line-numbers-mode" data-ext="dart"><pre class="language-dart"><code><span class="token keyword">extension</span> <span class="token class-name">NumberParsing</span> <span class="token keyword">on</span> <span class="token class-name">String</span> <span class="token punctuation">{</span>
  int <span class="token function">parseInt</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> int<span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>

  double <span class="token function">parseDouble</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> double<span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>확장의 멤버는 메소드, getter, setter 또는 연산자가 될 수 있습니다.<br> 또한 확장은 정적 필드와 정적 도우미 메소드를 가질 수 있습니다.</p><h3 id="unnamed-extensions" tabindex="-1"><a class="header-anchor" href="#unnamed-extensions" aria-hidden="true">#</a> 이름없는 확장</h3>`,16),y=s("br",null,null,-1),w=s("br",null,null,-1),I=e(`<div class="language-dart line-numbers-mode" data-ext="dart"><pre class="language-dart"><code><span class="token keyword">extension</span> <span class="token keyword">on</span> <span class="token class-name">String</span> <span class="token punctuation">{</span>
  bool <span class="token keyword">get</span> isBlank <span class="token operator">=</span><span class="token operator">&gt;</span> <span class="token function">trim</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>isEmpty<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="hint-container note"><p class="hint-container-title">Note</p><p>이름없는 확장의 정적 멤버는 확장 선언 내에서만 실행할 수 있습니다.</p></div><h2 id="implementing-generic-extensions" tabindex="-1"><a class="header-anchor" href="#implementing-generic-extensions" aria-hidden="true">#</a> 제너릭 확장 구현하기</h2><p>확장은 제너릭 타입 매개변수를 가질 수 있습니다.<br> 예로 들어, 내장형 <code>List&lt;T&gt;</code> 타입에 getter, 연산자, 메소드를 확장하는 코드입니다.</p><div class="language-dart line-numbers-mode" data-ext="dart"><pre class="language-dart"><code><span class="token keyword">extension</span> <span class="token class-name">MyFancyList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span> <span class="token keyword">on</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span> <span class="token punctuation">{</span>
  int <span class="token keyword">get</span> doubleLength <span class="token operator">=</span><span class="token operator">&gt;</span> length <span class="token operator">*</span> <span class="token number">2</span><span class="token punctuation">;</span>
  <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span> <span class="token keyword">operator</span> <span class="token operator">-</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">&gt;</span> reversed<span class="token punctuation">.</span><span class="token function">toList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">List</span><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span><span class="token punctuation">&gt;</span></span> <span class="token function">split</span><span class="token punctuation">(</span>int at<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">&gt;</span> <span class="token punctuation">[</span><span class="token function">sublist</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> at<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">sublist</span><span class="token punctuation">(</span>at<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>T</code> 타입은 메소드가 호출되는 list의 정적 타입에 기반으로 할당됩니다.</p><h2 id="resources" tabindex="-1"><a class="header-anchor" href="#resources" aria-hidden="true">#</a> 자료</h2><p>확장된 메소드에 더 자세한 정보는 아래를 참고하세요.</p>`,8),N={href:"https://medium.com/dartlang/extension-methods-2d466cd8b308",target:"_blank",rel:"noopener noreferrer"},P={href:"https://github.com/dart-lang/language/blob/main/accepted/2.7/static-extension-methods/feature-specification.md#dart-static-extension-methods-design",target:"_blank",rel:"noopener noreferrer"},L={href:"https://github.com/dart-lang/samples/tree/main/extension_methods",target:"_blank",rel:"noopener noreferrer"};function S(A,T){const t=o("ExternalLinkIcon"),p=o("RouterLink"),i=o("AdsenseB");return r(),u("div",null,[s("p",null,[n("원문 : "),s("a",k,[n("https://dart.dev/language/extension-methods"),a(t)])]),m,v,g,s("p",null,[n("확장된 메소드를 사용하기 위해 알아야될 전부 입니다."),b,n(" 코드를 작성할 때 확장된 메소드를 정적 타입("),h,n("과 반대)에 의존시키고 "),a(p,{to:"/dart/language/extension-methods.html#api-conflicts"},{default:c(()=>[n("API 충돌")]),_:1}),n("을 해결해야하는 방법이 필요할 수 있습니다.")]),_,s("p",null,[n("정적 타입과 "),f,n("에 대한 자세한 내용은 "),a(p,{to:"/dart/language/type-system.html"},{default:c(()=>[n("Dart 타입 시스템")]),_:1}),n("을 참고하세요.")]),x,s("p",null,[n("확장을 선언할 때 이름을 생략할 수 있습니다."),y,n(" 이름없는 확장은 선언된 라이브러리 내에서만 보입니다."),w,n(" 이름을 가지지 않기 때문에, "),a(p,{to:"/dart/language/extension-methods.html#api-conflicts"},{default:c(()=>[n("API 충돌")]),_:1}),n("을 해결하기 위해 명시적으로 적용할 수 없습니다.")]),I,s("ul",null,[s("li",null,[s("a",N,[n("문서: Dart 확장된 메소드 기본사항"),a(t)])]),s("li",null,[s("a",P,[n("기능 명세"),a(t)])]),s("li",null,[s("a",L,[n("확장된 메소드 예제"),a(t)])])]),a(i)])}const B=l(d,[["render",S],["__file","extension-methods.html.vue"]]);export{B as default};
