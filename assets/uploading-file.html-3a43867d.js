import{_ as c,r as t,o as l,c as i,a as n,b as s,d as a,e as p}from"./app-95e21c4a.js";const u={},r={href:"https://boto3.amazonaws.com/v1/documentation/api/latest/guide/s3-uploading-files.html",target:"_blank",rel:"noopener noreferrer"},d=p(`<p>파이썬용 AWS SDK는 S3 버킷에 파일을 업로드하는 두가지 함수를 제공합니다.</p><p><code>upload_file</code> 함수는 파일이름, 버킷이름, 객체이름을 인자로 받습니다.<br> 함수는 작은 청크로 분할하고 병렬로 청크를 업로드하여 큰파일을 다룹니다.</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">import</span> logging
<span class="token keyword">import</span> boto3
<span class="token keyword">from</span> botocore<span class="token punctuation">.</span>exceptions <span class="token keyword">import</span> ClientError
<span class="token keyword">import</span> os

<span class="token keyword">def</span> <span class="token function">upload_file</span><span class="token punctuation">(</span>file_name<span class="token punctuation">,</span> bucket<span class="token punctuation">,</span> object_name<span class="token operator">=</span><span class="token boolean">None</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token triple-quoted-string string">&quot;&quot;&quot; S3 버킷에 파일을 업로드합니다.
    
    :param file_name: 업로드할 파일
    :param bucket: 업로드될 버킷
    :param object_name: S3 객체이름. 없으면 file_name 사용
    :return: 파일이 업로드되면 True, 아니면 False
    &quot;&quot;&quot;</span>
    
    <span class="token comment"># S3 객체이름이 정의되지 않으면, file_name을 사용</span>
    <span class="token keyword">if</span> object_name <span class="token keyword">is</span> <span class="token boolean">None</span><span class="token punctuation">:</span>
        object_name <span class="token operator">=</span> os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>basename<span class="token punctuation">(</span>file_name<span class="token punctuation">)</span>
    
    <span class="token comment"># 파일 업로드</span>
    s3_client <span class="token operator">=</span> boto3<span class="token punctuation">.</span>client<span class="token punctuation">(</span><span class="token string">&#39;s3&#39;</span><span class="token punctuation">)</span>
    <span class="token keyword">try</span><span class="token punctuation">:</span>
        resposne <span class="token operator">=</span> s3_client<span class="token punctuation">.</span>upload_file<span class="token punctuation">(</span>file_name<span class="token punctuation">,</span> bucket<span class="token punctuation">,</span> object_name<span class="token punctuation">)</span>
    <span class="token keyword">except</span> ClientError <span class="token keyword">as</span> e<span class="token punctuation">:</span>
        logging<span class="token punctuation">.</span>error<span class="token punctuation">(</span>e<span class="token punctuation">)</span>
        <span class="token keyword">return</span> <span class="token boolean">False</span>
    <span class="token keyword">return</span> <span class="token boolean">True</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>upload_fileobj</code> 함수는 읽기가능한 파일같은 객체를 허용합니다.<br> 파일객체는 텍스트모드가 아닌 바이너리 모드로 열려있어야 합니다.</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>s3 <span class="token operator">=</span> boto3<span class="token punctuation">.</span>client<span class="token punctuation">(</span><span class="token string">&#39;s3&#39;</span><span class="token punctuation">)</span>
<span class="token keyword">with</span> <span class="token builtin">open</span><span class="token punctuation">(</span><span class="token string">&quot;FILE_NAME&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;rb&quot;</span><span class="token punctuation">)</span> <span class="token keyword">as</span> f<span class="token punctuation">:</span>
    s3<span class="token punctuation">.</span>upload_fileobj<span class="token punctuation">(</span>f<span class="token punctuation">,</span> <span class="token string">&quot;BUCKET_NAME&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;OBJECT_NAME&quot;</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>upload_file</code>과 <code>upload_fileobj</code> 함수는 S3의 <code>Client</code>, <code>Bucket</code>, <code>Object</code> 클래스에서 모두 제공합니다.<br> 각각의 클래스에서 제공하는 함수의 기능은 모두 동일합니다.<br> 한 클래스의 함수를 다른 클래스에서 호출하는 것에 대한 이점은 없습니다.<br> 어떤 클래스던 편리한 것을 사용하세요.</p><h2 id="extraargs-파라미터" tabindex="-1"><a class="header-anchor" href="#extraargs-파라미터" aria-hidden="true">#</a> ExtraArgs 파라미터</h2>`,7),k=n("code",null,"upload_file",-1),v=n("code",null,"upload_fileobj",-1),m=n("code",null,"ExtraArgs",-1),b=n("br",null,null,-1),_=n("code",null,"ExtraArgs",-1),g=n("code",null,"S3Transfer",-1),f=n("code",null,"ALLOWED_UPLOAD_ARGS",-1),h=n("br",null,null,-1),y={href:"https://boto3.amazonaws.com/v1/documentation/api/latest/reference/customizations/s3.html#boto3.s3.transfer.S3Transfer.ALLOWED_UPLOAD_ARGS",target:"_blank",rel:"noopener noreferrer"},E=n("code",null,"boto3.s3.transfer.S3Transfer.ALLOWED_UPLOAD_ARGS",-1),A=p(`<p>아래의 <code>ExtraArgs</code> 설정은 S3 객체에 붙일 메타데이터를 정의한 것입니다.</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>s3<span class="token punctuation">.</span>upload_file<span class="token punctuation">(</span>
    <span class="token string">&#39;FILE_NAME&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;BUCKET_NAME&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;OBJECT_NAME&#39;</span><span class="token punctuation">,</span>
    ExtraArgs<span class="token operator">=</span><span class="token punctuation">{</span><span class="token string">&#39;Metadata&#39;</span><span class="token punctuation">:</span> <span class="token punctuation">{</span><span class="token string">&#39;myKey&#39;</span><span class="token punctuation">:</span> <span class="token string">&#39;myValue&#39;</span><span class="token punctuation">}</span><span class="token punctuation">}</span>
<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>아래의 <code>ExtraArgs</code> 설정은 S3 객체에 &#39;public-read&#39;라는 고정된 ACL(접근 제어 목록, access control list)을 정의하는 것 입니다.</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>s3<span class="token punctuation">.</span>upload_file<span class="token punctuation">(</span>
    <span class="token string">&#39;FILE_NAME&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;BUCKET_NAME&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;OBJECT_NAME&#39;</span><span class="token punctuation">,</span>
    ExtraArgs<span class="token operator">=</span><span class="token punctuation">{</span><span class="token string">&#39;ACL&#39;</span><span class="token punctuation">:</span> <span class="token string">&#39;public-read&#39;</span><span class="token punctuation">}</span>
<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>또한, <code>ExtraArgs</code>에 사용자정이 또는 다수의 ACL을 설정할 수 있습니다.</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>s3<span class="token punctuation">.</span>upload_file<span class="token punctuation">(</span>
    <span class="token string">&#39;FILE_NAME&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;BUCKET_NAME&#39;</span><span class="token punctuation">,</span> &#39;OBJECT_NAME&quot;<span class="token punctuation">,</span>
    ExtraArgs<span class="token operator">=</span><span class="token punctuation">{</span>
        <span class="token string">&#39;GrantRead&#39;</span><span class="token punctuation">:</span> <span class="token string">&#39;uri=&quot;http://acs.amazonaws.com/groups/global/AllUsers&quot;&#39;</span><span class="token punctuation">,</span>
        <span class="token string">&#39;GrantFullControl&#39;</span><span class="token punctuation">:</span> <span class="token string">&#39;id=&quot;01234567890abcdefg&quot;&#39;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="callback-파라미터" tabindex="-1"><a class="header-anchor" href="#callback-파라미터" aria-hidden="true">#</a> Callback 파라미터</h2><p><code>upload_file</code>과 <code>upload_fileobj</code>는 선택적으로 <code>Callback</code> 파라미터를 받습니다.<br> 이 파라미터는 파이썬 SDK가 전송동작중 간헐적으로 호출되는 클래스를 참조합니다.</p><p>호출되는 파이썬 클래스는 <code>__call__</code> 함수를 실행합니다.<br> 각각의 호출에서 클래스는 그 시점에 전송된 바이트수를 전달받을 수 있습니다.<br> 이 정보는 진행률 모니터를 구현하는데 사용될 수 있습니다.</p><p>아래 <code>Callback</code> 설정은 파이썬 SDK가 <code>ProgressPercentage</code> 클래스의 인스턴스를 생성하는 동작입니다.<br> 업로드 중에 인스턴스의 <code>__call__</code> 함수가 간헐적으로 호출되어집니다.</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>s3<span class="token punctuation">.</span>upload_file<span class="token punctuation">(</span>
    <span class="token string">&#39;FILE_NAME&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;BUCKET_NAME&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;OBJECT_NAME&#39;</span><span class="token punctuation">,</span>
    Callback<span class="token operator">=</span>ProgressPercentage<span class="token punctuation">(</span><span class="token string">&#39;FILE_NAME&#39;</span><span class="token punctuation">)</span>
<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>ProgressPercentage</code> 클래스의 예제구현은 아래와 같습니다.</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">import</span> os
<span class="token keyword">import</span> sys
<span class="token keyword">import</span> threading

<span class="token keyword">class</span> <span class="token class-name">ProgressPercentage</span><span class="token punctuation">(</span><span class="token builtin">object</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> filename<span class="token punctuation">)</span><span class="token punctuation">:</span>
        self<span class="token punctuation">.</span>_filename <span class="token operator">=</span> filename
        self<span class="token punctuation">.</span>_size <span class="token operator">=</span> <span class="token builtin">float</span><span class="token punctuation">(</span>os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>getsize<span class="token punctuation">(</span>filename<span class="token punctuation">)</span><span class="token punctuation">)</span>
        self<span class="token punctuation">.</span>_seen_so_far <span class="token operator">=</span> <span class="token number">0</span>
        self<span class="token punctuation">.</span>_lock <span class="token operator">=</span> threading<span class="token punctuation">.</span>lock<span class="token punctuation">(</span><span class="token punctuation">)</span>
    
    <span class="token keyword">def</span> <span class="token function">__call__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> bytes_amount<span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token comment"># 단순하게 단일 파일을 처리한다고 가정하자</span>
        <span class="token keyword">with</span> self<span class="token punctuation">.</span>_lock<span class="token punctuation">:</span>
            self<span class="token punctuation">.</span>_seen_so_far <span class="token operator">+=</span> bytes_amount
            percentage <span class="token operator">=</span> <span class="token punctuation">(</span>self<span class="token punctuation">.</span>_seen_so_far <span class="token operator">/</span> self<span class="token punctuation">.</span>size<span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">100</span>
            sys<span class="token punctuation">.</span>stdout<span class="token punctuation">.</span>write<span class="token punctuation">(</span>
                <span class="token string">&quot;\\r%s  %s / %s  (%.2f%%)&quot;</span> <span class="token operator">%</span> <span class="token punctuation">(</span>
                    self<span class="token punctuation">.</span>_filename<span class="token punctuation">,</span> self<span class="token punctuation">.</span>_seen_so_far<span class="token punctuation">,</span> self<span class="token punctuation">.</span>_size<span class="token punctuation">,</span>
                    percentage<span class="token punctuation">)</span><span class="token punctuation">)</span>
            sys<span class="token punctuation">.</span>stdout<span class="token punctuation">.</span>flush<span class="token punctuation">(</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,13);function w(x,q){const e=t("ExternalLinkIcon"),o=t("AdsenseB");return l(),i("div",null,[n("p",null,[s("원문 : "),n("a",r,[s("https://boto3.amazonaws.com/v1/documentation/api/latest/guide/s3-uploading-files.html"),a(e)])]),d,n("p",null,[k,s("과 "),v,s("는 다양한 목적으로 사용되는 "),m,s(" 파라미터를 받습니다."),b,_,s("에 가능한 셋팅목록은 "),g,s(" 객체의 "),f,s(" 속성에 정의되어있습니다."),h,n("a",y,[E,a(e)]),s("를 참고하세요.")]),A,a(o)])}const N=c(u,[["render",w],["__file","uploading-file.html.vue"]]);export{N as default};
