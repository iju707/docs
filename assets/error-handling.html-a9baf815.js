import{_ as c,r as p,o as l,c as i,a as s,b as n,d as a,e}from"./app-95e21c4a.js";const r={},u={href:"https://dart.dev/language/error-handling",target:"_blank",rel:"noopener noreferrer"},d=s("h2",{id:"exceptions",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#exceptions","aria-hidden":"true"},"#"),n(" 예외")],-1),k=s("br",null,null,-1),v=s("br",null,null,-1),m={href:"https://dart.dev/language/concurrency#how-isolates-work",target:"_blank",rel:"noopener noreferrer"},b=s("p",null,[n("Java와는 달리, 모든 Dart의 예외는 미확인 예외입니다."),s("br"),n(" 함수는 어떤 예외가 발생할지 선언하지 않으며, 어떤 예외든 감지할 필요는 없습니다.")],-1),h={href:"https://api.dart.dev/stable/dart-core/Exception-class.html",target:"_blank",rel:"noopener noreferrer"},g={href:"https://api.dart.dev/stable/dart-core/Error-class.html",target:"_blank",rel:"noopener noreferrer"},_=s("br",null,null,-1),f=s("br",null,null,-1),y=e(`<h3 id="throw" tabindex="-1"><a class="header-anchor" href="#throw" aria-hidden="true">#</a> throw</h3><p>여기 예외를 발생시키거나 전달시키는 예제입니다.</p><div class="language-dart line-numbers-mode" data-ext="dart"><pre class="language-dart"><code><span class="token keyword">throw</span> <span class="token class-name">FormatException</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&#39;Expected at least 1 section&#39;</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>또한 임의의 객체를 가지고 예외를 발생시킬 수 있습니다.</p><div class="language-dart line-numbers-mode" data-ext="dart"><pre class="language-dart"><code><span class="token keyword">throw</span> <span class="token string-literal"><span class="token string">&#39;Out of llamas&#39;</span></span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div>`,5),x={class:"hint-container note"},w=s("p",{class:"hint-container-title"},"Note",-1),E={href:"https://api.dart.dev/stable/dart-core/Error-class.html",target:"_blank",rel:"noopener noreferrer"},L={href:"https://api.dart.dev/stable/dart-core/Exception-class.html",target:"_blank",rel:"noopener noreferrer"},$=e(`<p>예외를 발생시키는 것은 표현식이기 때문에 <code>=&gt;</code> 명렴운 안에 예외를 발생시킬 수 있으며 표현식이 가능한 어디든 사용할 수 있습니다.</p><div class="language-dart line-numbers-mode" data-ext="dart"><pre class="language-dart"><code><span class="token keyword">void</span> <span class="token function">distanceTo</span><span class="token punctuation">(</span><span class="token class-name">Point</span> other<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">&gt;</span> <span class="token keyword">throw</span> <span class="token class-name">UnimplementedError</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="catch" tabindex="-1"><a class="header-anchor" href="#catch" aria-hidden="true">#</a> catch</h3><p>예외를 감지 또는 캡쳐하는 것은 전파상황에서 예외를 중단시키는 것(예외를 다시 발생시키지 않는 한) 입니다.<br> 예외를 감지하는 것은 이것을 다룰수 있는 기회를 주는 것 입니다.</p><div class="language-dart line-numbers-mode" data-ext="dart"><pre class="language-dart"><code><span class="token keyword">try</span> <span class="token punctuation">{</span>
  <span class="token function">breedMoreLlamas</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span> <span class="token keyword">on</span> <span class="token class-name">OutOfLlamasException</span> <span class="token punctuation">{</span>
  <span class="token function">buyMoreLlamas</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>한가지 타입 이상의 예외를 발생시키는 코드를 다룰 때는, 다중 catch 조건을 정의하면 됩니다.<br> 발생된 객체 타입과 일치하는 첫번째 조건에서 예외를 다룹니다.<br> catch 조건에 타입을 별도 식별하지 않으면 조건은 발생한 객체의 모든 타입을 다루게 됩니다.</p><div class="language-dart line-numbers-mode" data-ext="dart"><pre class="language-dart"><code><span class="token keyword">try</span> <span class="token punctuation">{</span>
    <span class="token function">breedMoreLlamas</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span> <span class="token keyword">on</span> <span class="token class-name">OutOfLlamasException</span> <span class="token punctuation">{</span>
    <span class="token comment">// 특정 예외</span>
    <span class="token function">buyMoreLlamas</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span> <span class="token keyword">on</span> <span class="token class-name">Exception</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span>e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// 예외인 모든 것</span>
    <span class="token function">print</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&#39;Unknown exeption : </span><span class="token interpolation"><span class="token punctuation">$</span><span class="token expression">e</span></span><span class="token string">&#39;</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span>e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// 타입이 없으면 모두 처리</span>
    <span class="token function">print</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&#39;Something really unknown: </span><span class="token interpolation"><span class="token punctuation">$</span><span class="token expression">e</span></span><span class="token string">&#39;</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>위에 코드를 보듯, <code>on</code>이나 <code>catch</code> 또는 둘다를 사용할 수 있습니다.<br><code>on</code>은 예외 타입을 지정하고자 할 때 사용합니다.<br><code>catch</code>는 예외처리에서 예외 객체를 사용할 때 필요합니다.</p>`,8),S=s("code",null,"catch()",-1),M=s("br",null,null,-1),T={href:"https://api.dart.dev/stable/dart-core/StackTrace-class.html",target:"_blank",rel:"noopener noreferrer"},B=e(`<div class="language-dart line-numbers-mode" data-ext="dart"><pre class="language-dart"><code><span class="token keyword">try</span> <span class="token punctuation">{</span>
    <span class="token comment">// ...</span>
<span class="token punctuation">}</span> <span class="token keyword">on</span> <span class="token class-name">Exception</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span>e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token function">print</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&#39;Exception details:\\n </span><span class="token interpolation"><span class="token punctuation">$</span><span class="token expression">e</span></span><span class="token string">&#39;</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span>e<span class="token punctuation">,</span> s<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token function">print</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&#39;Exception details:\\n </span><span class="token interpolation"><span class="token punctuation">$</span><span class="token expression">e</span></span><span class="token string">&#39;</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">print</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&#39;Stack trace:\\n </span><span class="token interpolation"><span class="token punctuation">$</span><span class="token expression">s</span></span><span class="token string">&#39;</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>예외를 부분적으로 처리하면서 전파를 가능하게 하려면 <code>rethrow</code> 키워드를 사용합니다.</p><div class="language-dart line-numbers-mode" data-ext="dart"><pre class="language-dart"><code><span class="token keyword">void</span> <span class="token function">misbehave</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">try</span> <span class="token punctuation">{</span>
        <span class="token keyword">dynamic</span> foo <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
        <span class="token function">print</span><span class="token punctuation">(</span>foo<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 런타임 오류</span>
    <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span>e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token function">print</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&#39;misbehave() partially handled </span><span class="token interpolation"><span class="token punctuation">\${</span><span class="token expression">e<span class="token punctuation">.</span>runtimeType</span><span class="token punctuation">}</span></span><span class="token string">.&#39;</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">rethrow</span><span class="token punctuation">;</span> <span class="token comment">// 호출한 곳에서 예외를 볼 수 있습니다.</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">try</span> <span class="token punctuation">{</span>
        <span class="token function">misbehave</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span>e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token function">print</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&#39;main() finished handling </span><span class="token interpolation"><span class="token punctuation">\${</span><span class="token expression">e<span class="token punctuation">.</span>runtimeType</span><span class="token punctuation">}</span></span><span class="token string">.&#39;</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="finally" tabindex="-1"><a class="header-anchor" href="#finally" aria-hidden="true">#</a> finally</h3><p>예외가 발생하거나 안하거나 실행되어야할 코드가 있는 경우 <code>finally</code> 조건을 사용합니다.<br> 예외에 적용되는 <code>catch</code> 조건이 없는 경우 예외는 <code>finally</code> 조건이 실행된 뒤 전파됩니다.</p><div class="language-dart line-numbers-mode" data-ext="dart"><pre class="language-dart"><code><span class="token keyword">try</span> <span class="token punctuation">{</span>
    <span class="token function">breedMoreLlamas</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>
    <span class="token comment">// 예외가 발생하더라도 항상 정리합니다.</span>
    <span class="token function">cleanLlamaStalls</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>finally</code> 조건은 <code>catch</code> 조건이 처리된 뒤 실행됩니다.</p><div class="language-dart line-numbers-mode" data-ext="dart"><pre class="language-dart"><code><span class="token keyword">try</span> <span class="token punctuation">{</span>
    <span class="token function">breedMoreLlamas</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span>e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token function">print</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&#39;Error: </span><span class="token interpolation"><span class="token punctuation">$</span><span class="token expression">e</span></span><span class="token string">&#39;</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 예외가 먼저 처리됨</span>
<span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>
    <span class="token function">cleanLlamaStalls</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 그리고 정리함</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,8),N={href:"https://dart.dev/guides/libraries/library-tour#exceptions",target:"_blank",rel:"noopener noreferrer"};function O(D,V){const t=p("ExternalLinkIcon"),o=p("AdsenseB");return l(),i("div",null,[s("p",null,[n("원문 : "),s("a",u,[n("https://dart.dev/language/error-handling"),a(t)])]),d,s("p",null,[n("Dart 코드는 예외를 발생시키고 감지할 수 있습니다."),k,n(" 예외는 예측되지 않은 무언가가 발생한 것을 가리키는 오류입니다."),v,n(" 예외가 감지되지 않으면 예외가 발생된 "),s("a",m,[n("격리"),a(t)]),n("가 일시중단되고 일반적으로 격리와 그 프로그램은 종료됩니다.")]),b,s("p",null,[n("Dart는 "),s("a",h,[n("Exception"),a(t)]),n("와 "),s("a",g,[n("Error"),a(t)]),n(" 타입을 제공하며 다양한 사전정의된 하위 타입이 있습니다."),_,n(" 물론 당신만의 예외를 정의할 수 있습니다."),f,n(" 그러나, Dart 프로그램은 Exception이나 Error 객체 뿐만 아니라 null이 아닌 객체를 예외처럼 발생시킬 수 있습니다.")]),y,s("div",x,[w,s("p",null,[n("운영수준의 코드에서는 일반적으로 "),s("a",E,[n("Error"),a(t)]),n("나 "),s("a",L,[n("Exception"),a(t)]),n("의 구현체 타입을 예외로 발생시킵니다.")])]),$,s("p",null,[S,n("에 한개 또는 두개의 인자를 지정할 수 있습니다."),M,n(" 첫번째는 발생된 예외이며, 두번째는 스택트레이스 입니다. ("),s("a",T,[n("StackTrace"),a(t)]),n(" 객체)")]),B,s("p",null,[n("라이브러리 투어의 "),s("a",N,[n("Exception"),a(t)]),n(" 절에서 더 자세한 내용을 확인해보세요.")]),a(o)])}const I=c(r,[["render",O],["__file","error-handling.html.vue"]]);export{I as default};
