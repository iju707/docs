import{_ as u,r as c,o as l,c as r,a as n,b as s,d as a,w as o,f as d,g as k,e}from"./app-95e21c4a.js";const v={},m={href:"https://dart.dev/guides/language/language-tour#functions",target:"_blank",rel:"noopener noreferrer"},b={href:"https://api.dart.dev/stable/dart-core/Function-class.html",target:"_blank",rel:"noopener noreferrer"},g=n("code",null,"Funtion",-1),h=n("br",null,null,-1),f=n("br",null,null,-1),_=n("br",null,null,-1),y=e(`<p>함수 구현체에 대한 예제입니다.</p><div class="language-dart line-numbers-mode" data-ext="dart"><pre class="language-dart"><code>bool <span class="token function">isNoble</span><span class="token punctuation">(</span>int atomicNumber<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> _nobleGases<span class="token punctuation">[</span>atomicNumber<span class="token punctuation">]</span> <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,2),w={href:"https://dart.dev/guides/language/effective-dart/design#do-type-annotate-fields-and-top-level-variables-if-the-type-isnt-obvious",target:"_blank",rel:"noopener noreferrer"},x=e(`<div class="language-dart line-numbers-mode" data-ext="dart"><pre class="language-dart"><code><span class="token function">isNoble</span><span class="token punctuation">(</span>atomicNumber<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> _nobleGases<span class="token punctuation">[</span>atomicNumber<span class="token punctuation">]</span> <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>만약 함수가 한가지 표현식만 있다면 간소화된 문법을 사용할 수 있습니다.</p><div class="language-dart line-numbers-mode" data-ext="dart"><pre class="language-dart"><code>bool <span class="token function">isNoble</span><span class="token punctuation">(</span>int atomicNumber<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">&gt;</span> _nobleGases<span class="token punctuation">[</span>atomicNumber<span class="token punctuation">]</span> <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><code>=&gt; expr</code> 문법은 <code>{ return expr; }</code>의 축약형입니다.<br><code>=&gt;</code> 표기법은 화살표 문법이라고도 합니다.</p>`,4),N={class:"hint-container note"},B=n("p",{class:"hint-container-title"},"Note",-1),S=n("code",null,"=>",-1),A=n("code",null,";",-1),$=n("br",null,null,-1),F=n("code",null,"if",-1),E=n("h2",{id:"parameters",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#parameters","aria-hidden":"true"},"#"),s(" 매개변수")],-1),L=n("p",null,[s("함수는 몇개던 필수적 위치의 매개변수를 가질 수 있습니다."),n("br"),s(" 그 뒤로 명명된 매개변수나 선택적 매개변수를 가질 수 있습니다. (동시는 안됨)")],-1),q={class:"hint-container note"},H=n("p",{class:"hint-container-title"},"Note",-1),D={href:"https://flutter.dev/",target:"_blank",rel:"noopener noreferrer"},j=n("br",null,null,-1),z=e(`<h3 id="named-parameters" tabindex="-1"><a class="header-anchor" href="#named-parameters" aria-hidden="true">#</a> 명명된 매개변수</h3><p>명명된 매개변수는 명시적으로 <code>required</code>가 마킹되기전까지는 선택적입니다.</p><p>함수를 정의할 때 명명된 매개변수를 지정하려면 <code>{param1, param2, ...}</code>를 사용하면 됩니다.</p><div class="language-dart line-numbers-mode" data-ext="dart"><pre class="language-dart"><code><span class="token comment">// [bold]와 [hidden] 플래그를 설정</span>
<span class="token keyword">void</span> <span class="token function">enableFlags</span><span class="token punctuation">(</span><span class="token punctuation">{</span>bool<span class="token operator">?</span> bold<span class="token punctuation">,</span> bool<span class="token operator">?</span> hidden<span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>함수를 호출할 때 명명된 인자를 <code>paramName: value</code>를 사용해서 지정할 수 있습니다.<br> 예로 들면 다음과 같습니다.</p><div class="language-dart line-numbers-mode" data-ext="dart"><pre class="language-dart"><code><span class="token function">enableFlags</span><span class="token punctuation">(</span>bold<span class="token punctuation">:</span> ture<span class="token punctuation">,</span> hidden<span class="token punctuation">:</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>보통 위치적 인수를 먼저 배치하는 것이 일반적이지만, API에 적합할 경우에는 명명된 인수를 인수목록의 아무 곳에나 배치할 수 있습니다.</p><div class="language-dart line-numbers-mode" data-ext="dart"><pre class="language-dart"><code><span class="token function">repeat</span><span class="token punctuation">(</span>times<span class="token punctuation">:</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="hint-container tip"><p class="hint-container-title">Tips</p><p>만약 매개변수가 선택적이지만 <code>null</code>이 될 수 없으면, <a href="#default-parameter-values">기본값</a>을 사용하세요.</p></div><p>명명된 매개변수가 선택적 매개변수 중 하나이지만, <code>required</code>를 어노테이션으로 추가해서 매개변수가 필수값으로 만들 수 있으며 사용자는 매개변수의 값을 제공해야 합니다.<br> 예제는 다음과 같습니다.</p><div class="language-dart line-numbers-mode" data-ext="dart"><pre class="language-dart"><code><span class="token keyword">const</span> <span class="token class-name">Scrollbar</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token keyword">super</span><span class="token punctuation">.</span>key<span class="token punctuation">,</span> required <span class="token class-name">Widget</span> child<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>누군가 <code>child</code> 매개변수 없이 <code>Scrollbar</code>를 만들려고 시도한다면 분석기는 이슈를 보고할 것 입니다.</p><h3 id="optional-positional-parameters" tabindex="-1"><a class="header-anchor" href="#optional-positional-parameters" aria-hidden="true">#</a> 선택적 위치 매개변수</h3><p>함수의 매개변수 집합을 <code>[]</code>로 감싸면 선택적 위치 매개변수로 지정됩니다.</p><div class="language-dart line-numbers-mode" data-ext="dart"><pre class="language-dart"><code><span class="token class-name">String</span> <span class="token function">say</span><span class="token punctuation">(</span><span class="token class-name">String</span> from<span class="token punctuation">,</span> <span class="token class-name">String</span> msg<span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token class-name">String</span><span class="token operator">?</span> device<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">var</span> result <span class="token operator">=</span> <span class="token string-literal"><span class="token string">&#39;</span><span class="token interpolation"><span class="token punctuation">$</span><span class="token expression">from</span></span><span class="token string"> says </span><span class="token interpolation"><span class="token punctuation">$</span><span class="token expression">msg</span></span><span class="token string">&#39;</span></span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>device <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        result <span class="token operator">=</span> <span class="token string-literal"><span class="token string">&#39;</span><span class="token interpolation"><span class="token punctuation">$</span><span class="token expression">result</span></span><span class="token string"> with a </span><span class="token interpolation"><span class="token punctuation">$</span><span class="token expression">device</span></span><span class="token string">&#39;</span></span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> result<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>선택적 매개변수없이 함수를 호출하는 예제입니다.</p><div class="language-dart line-numbers-mode" data-ext="dart"><pre class="language-dart"><code><span class="token keyword">assert</span><span class="token punctuation">(</span><span class="token function">say</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&#39;Bob&#39;</span></span><span class="token punctuation">,</span> <span class="token string-literal"><span class="token string">&#39;Howdy&#39;</span></span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token string-literal"><span class="token string">&#39;Bob says Howdy&#39;</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>3번째 매개변수를 추가하여 함수를 호출하는 예제입니다.</p><div class="language-dart line-numbers-mode" data-ext="dart"><pre class="language-dart"><code><span class="token keyword">assert</span><span class="token punctuation">(</span><span class="token function">say</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&#39;Bob&#39;</span></span><span class="token punctuation">,</span> <span class="token string-literal"><span class="token string">&#39;Howdy&#39;</span></span><span class="token punctuation">,</span> <span class="token string-literal"><span class="token string">&#39;smoke signal&#39;</span></span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token string-literal"><span class="token string">&#39;Bob says Howdy with a smoke signal&#39;</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="default-parameter-values" tabindex="-1"><a class="header-anchor" href="#default-parameter-values" aria-hidden="true">#</a> 매개변수 기본값</h3><p>함수에 명명된, 위치적 둘다 선택적 매개변수에 대한 기본값을 <code>=</code>을 사용하여 정의할 수 있습니다.<br> 기본값은 컴파일타임 상수여야 합니다.<br> 만약 기본값이 제공되지 않으면 <code>null</code>이 기본값입니다.</p><p>명명된 매개변수에 기본값을 설정하는 예제입니다.</p><div class="language-dart line-numbers-mode" data-ext="dart"><pre class="language-dart"><code><span class="token comment">// [bold]와 [hidden] 플래그를 설정 ...</span>
<span class="token keyword">void</span> <span class="token function">enableFlags</span><span class="token punctuation">(</span><span class="token punctuation">{</span>bool bold <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">,</span> bool hidden <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">}</span>

<span class="token comment">// bold는 ture가 되고 hidden은 false가 됩니다.</span>
<span class="token function">enableFlags</span><span class="token punctuation">(</span>bold<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,23),I={class:"hint-container note"},C=n("p",{class:"hint-container-title"},"Note",-1),O=n("strong",null,"지원중단 참고사항",-1),P=n("br",null,null,-1),R=n("code",null,"=",-1),V=n("code",null,":",-1),G=n("br",null,null,-1),M=n("code",null,":",-1),T=n("br",null,null,-1),W=n("br",null,null,-1),U={href:"https://dart.dev/guides/language/effective-dart/usage#do-use--to-separate-a-named-parameter-from-its-default-value",target:"_blank",rel:"noopener noreferrer"},J=n("code",null,"=",-1),K={href:"https://dart.dev/tools/linter-rules#prefer_equal_for_default_values",target:"_blank",rel:"noopener noreferrer"},Q={href:"https://dart.dev/tools/dart-fix",target:"_blank",rel:"noopener noreferrer"},X=n("code",null,"dart fix",-1),Y=n("code",null,"=",-1),Z=e(`<p>다음은 위치적 매개변수에 대한 기본값을 설정하는 예제입니다.</p><div class="language-dart line-numbers-mode" data-ext="dart"><pre class="language-dart"><code><span class="token class-name">String</span> <span class="token function">say</span><span class="token punctuation">(</span><span class="token class-name">String</span> from<span class="token punctuation">,</span> <span class="token class-name">String</span> msg<span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token class-name">String</span> device <span class="token operator">=</span> <span class="token string-literal"><span class="token string">&#39;carrier pigeon&#39;</span></span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">var</span> result <span class="token operator">=</span> <span class="token string-literal"><span class="token string">&#39;</span><span class="token interpolation"><span class="token punctuation">$</span><span class="token expression">from</span></span><span class="token string"> says </span><span class="token interpolation"><span class="token punctuation">$</span><span class="token expression">msg</span></span><span class="token string"> with a </span><span class="token interpolation"><span class="token punctuation">$</span><span class="token expression">device</span></span><span class="token string">&#39;</span></span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> result<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">assert</span><span class="token punctuation">(</span><span class="token function">say</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&#39;Bob&#39;</span></span><span class="token punctuation">,</span> <span class="token string-literal"><span class="token string">&#39;Howdy&#39;</span></span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token string-literal"><span class="token string">&#39;Bob says Howdy with a carrier pigeon&#39;</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>기본값으로 리스트나 맵을 전달할 수 있습니다.<br> 아래 예제는 <code>doStuff()</code>를 정의하며 <code>list</code> 매개변수에 기본 리스트를, <code>gifts</code> 매개변수에 기본맵을 지정합니다.</p><div class="language-dart line-numbers-mode" data-ext="dart"><pre class="language-dart"><code><span class="token keyword">void</span> <span class="token function">doStuff</span><span class="token punctuation">(</span>
    <span class="token punctuation">{</span><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span>int<span class="token punctuation">&gt;</span></span> list <span class="token operator">=</span> <span class="token keyword">const</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
    <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> gifts <span class="token operator">=</span> <span class="token keyword">const</span> <span class="token punctuation">{</span>
        <span class="token string-literal"><span class="token string">&#39;first&#39;</span></span><span class="token punctuation">:</span> <span class="token string-literal"><span class="token string">&#39;paper&#39;</span></span><span class="token punctuation">,</span>
        <span class="token string-literal"><span class="token string">&#39;second&#39;</span></span><span class="token punctuation">:</span> <span class="token string-literal"><span class="token string">&#39;cotton&#39;</span></span><span class="token punctuation">,</span>
        <span class="token string-literal"><span class="token string">&#39;third&#39;</span></span><span class="token punctuation">:</span> <span class="token string-literal"><span class="token string">&#39;leather&#39;</span></span>
    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token function">print</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&#39;list: </span><span class="token interpolation"><span class="token punctuation">$</span><span class="token expression">list</span></span><span class="token string">&#39;</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">print</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&#39;gifts: </span><span class="token interpolation"><span class="token punctuation">$</span><span class="token expression">gifts</span></span><span class="token string">&#39;</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="the-main-function" tabindex="-1"><a class="header-anchor" href="#the-main-function" aria-hidden="true">#</a> main() 함수</h2><p>모든 앱은 앱의 진입점을 제공하는 최상위 <code>main()</code> 함수를 가지고 있어야 합니다.<br><code>main()</code> 함수는 <code>void</code>를 반환하고 선택적으로 <code>List&lt;String&gt;</code> 매개변수를 인자로 받습니다.</p><p>간단한 <code>main()</code> 함수 예제입니다.</p><div class="language-dart line-numbers-mode" data-ext="dart"><pre class="language-dart"><code><span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token function">print</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&#39;Hello, World!&#39;</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>명령줄에서 인자를 받는 앱의 <code>main()</code> 함수 예제입니다.</p><div class="language-dart line-numbers-mode" data-ext="dart"><pre class="language-dart"><code><span class="token comment">// 앱을 다음과 같이 실행하면 됩니다 : dart args.dart 1 test</span>
<span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> arguments<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token function">print</span><span class="token punctuation">(</span>arguments<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">assert</span><span class="token punctuation">(</span>arguments<span class="token punctuation">.</span>length <span class="token operator">==</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">assert</span><span class="token punctuation">(</span>int<span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span>arguments<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">assert</span><span class="token punctuation">(</span>arguments<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token string-literal"><span class="token string">&#39;test&#39;</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,10),nn={href:"https://pub.dev/packages/args",target:"_blank",rel:"noopener noreferrer"},sn=e(`<h2 id="functions-as-first-class-objects" tabindex="-1"><a class="header-anchor" href="#functions-as-first-class-objects" aria-hidden="true">#</a> 1급 클래스객체인 함수</h2><p>함수를 다른 함수의 인자로 전달할 수 있습니다.<br> 예로 들면 다음과 같습니다.</p><div class="language-dart line-numbers-mode" data-ext="dart"><pre class="language-dart"><code><span class="token keyword">void</span> <span class="token function">printElement</span><span class="token punctuation">(</span>int element<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token function">print</span><span class="token punctuation">(</span>element<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">var</span> list <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">;</span>

<span class="token comment">// printElement를 인자로 전달하기</span>
list<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>printElement<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>또한 함수를 변수에 할당할 수 있습니다.</p><div class="language-dart line-numbers-mode" data-ext="dart"><pre class="language-dart"><code><span class="token keyword">var</span> loudify <span class="token operator">=</span> <span class="token punctuation">(</span>msg<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">&gt;</span> <span class="token string-literal"><span class="token string">&#39;!!! </span><span class="token interpolation"><span class="token punctuation">\${</span><span class="token expression">msg<span class="token punctuation">.</span><span class="token function">toUpperCase</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span><span class="token punctuation">}</span></span><span class="token string"> !!!&#39;</span></span><span class="token punctuation">;</span>
<span class="token keyword">assert</span><span class="token punctuation">(</span><span class="token function">loudify</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&#39;hello&#39;</span></span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token string-literal"><span class="token string">&#39;!!! HELLO !!!&#39;</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>이 예제는 익명 함수를 사용했습니다.<br> 더 자세한 내용은 다음 절을 참고하세요.</p><h2 id="anonymous-functions" tabindex="-1"><a class="header-anchor" href="#anonymous-functions" aria-hidden="true">#</a> 익명 함수</h2><p>대부분의 함수는 <code>main()</code>이나 <code>printElement()</code>와 같이 이름을 가집니다.<br> 익명 함수(람다 또는 클로저)라고 불리는 이름이 없는 함수를 만들 수도 있습니다.<br> 익명 함수를 변수에 할당할수 있어서 콜렉션에 추가하거나 삭제할수 도 있습니다.</p><p>익명 함수는 일반적인 함수와 비슷하게 콤마로 구분하고 선택적 타입 어노테이션이 있는 0개 이상의 인자가 괄호 사이에 있습니다.</p><p>아래의 코드 블럭은 함수의 본문을 담고 있습니다.</p><div class="language-dart line-numbers-mode" data-ext="dart"><pre class="language-dart"><code><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token class-name">Type</span><span class="token punctuation">]</span> param1<span class="token punctuation">[</span><span class="token punctuation">,</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    codeBlock<span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>아래 예제는 타입이 없는 <code>item</code> 이라는 인자를 가진 익명 함수를 정의합니다.<br> 함수는 리스트의 아이템마다 실행되며, 특정 인덱스의 값을 포함한 문자열을 출력합니다.</p><div class="language-dart line-numbers-mode" data-ext="dart"><pre class="language-dart"><code><span class="token keyword">const</span> list <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string-literal"><span class="token string">&#39;apples&#39;</span></span><span class="token punctuation">,</span> <span class="token string-literal"><span class="token string">&#39;bananas&#39;</span></span><span class="token punctuation">,</span> <span class="token string-literal"><span class="token string">&#39;oranges&#39;</span></span><span class="token punctuation">]</span><span class="token punctuation">;</span>
list<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span>item<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token function">print</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&#39;</span><span class="token interpolation"><span class="token punctuation">\${</span><span class="token expression">list<span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span>item<span class="token punctuation">)</span></span><span class="token punctuation">}</span></span><span class="token string">: </span><span class="token interpolation"><span class="token punctuation">$</span><span class="token expression">item</span></span><span class="token string">&#39;</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>Run</strong> 을 클릭하여 코드를 실행합니다.</p>`,14),an=e(`<pre>    <code class="language-run-dartpad:theme-light:mode-dart:ga_id-example1:width-100%:height-400px">
void main() {
    const list = [&#39;apples&#39;, &#39;bananas&#39;, &#39;oranges&#39;];
    list.forEach((item) {
        print(&#39;\${list.indexOf(item)}: $item&#39;);
    });
}
    </code>
</pre><p>함수가 하나의 표현식 또는 반환 명령문을 가지고 있으면 화살표 표기법을 사용하여 간결하게 할 수 있습니다.<br> 아래의 코드를 복사하여 DartPad에 붙여넣고 함수가 동일한지 <strong>Run</strong>을 클릭하여 실행해보세요.</p><div class="language-dart line-numbers-mode" data-ext="dart"><pre class="language-dart"><code>list<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span>item<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">&gt;</span> <span class="token function">print</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&#39;</span><span class="token interpolation"><span class="token punctuation">\${</span><span class="token expression">list<span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span>item<span class="token punctuation">)</span></span><span class="token punctuation">}</span></span><span class="token string">: </span><span class="token interpolation"><span class="token punctuation">$</span><span class="token expression">item</span></span><span class="token string">&#39;</span></span><span class="token punctuation">)</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h2 id="lexical-scope" tabindex="-1"><a class="header-anchor" href="#lexical-scope" aria-hidden="true">#</a> 어휘적 범위</h2><p>Dart는 어휘적 범위를 가지는 언어이며, 변수의 범위를 정적으로 결정하여 코드의 레이아웃을 간결하게 합니다.<br> 변수가 범위안에 있는지 보고싶으면 &quot;중괄호 밖으로 따라가기&quot;를 하면 됩니다.</p><p>각 범위 수준을 가지는 변수와 중첩 함수에 대한 예제입니다.</p><div class="language-dart line-numbers-mode" data-ext="dart"><pre class="language-dart"><code>bool topLevel <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>

<span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">var</span> insideMain <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>

    <span class="token keyword">void</span> <span class="token function">myFunction</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">var</span> insideFunction <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>

        <span class="token keyword">void</span> <span class="token function">nestedFunction</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">var</span> insideNextedFunction <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>

            <span class="token keyword">assert</span><span class="token punctuation">(</span>topLevel<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">assert</span><span class="token punctuation">(</span>insideMain<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">assert</span><span class="token punctuation">(</span>insideFunction<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">assert</span><span class="token punctuation">(</span>insideNestedFunction<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="lexical-closures" tabindex="-1"><a class="header-anchor" href="#lexical-closures" aria-hidden="true">#</a> 어휘적 클로저</h2><p>클로저는 함수가 본래의 범위 밖에서 사용되더라도 어휘적 범위에서 변수에 접근이 가능한 함수 객체입니다.</p><p>함수는 주변 범위에 정의된 변수를 포함시킬 수 있습니다.<br> 아래 예제에서 <code>makeAdder()</code>는 변수 <code>addBy</code>를 캡쳐합니다.<br> 반환된 함수가 어디로 가든, <code>addBy</code>를 기억합니다.</p><div class="language-dart line-numbers-mode" data-ext="dart"><pre class="language-dart"><code><span class="token comment">/// 함수가 [addBy]에 함수 인자를 더하여 반환합니다.</span>
<span class="token class-name">Function</span> <span class="token function">makeAdder</span><span class="token punctuation">(</span>int addBy<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token punctuation">(</span>int i<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">&gt;</span> addBy <span class="token operator">+</span> i<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// 2를 더하도록 함수를 만듦</span>
    <span class="token keyword">var</span> add2 <span class="token operator">=</span> <span class="token function">makeAdder</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">// 4를 더하도록 함수를 만듦</span>
    <span class="token keyword">var</span> add4 <span class="token operator">=</span> <span class="token function">makeAdder</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">assert</span><span class="token punctuation">(</span><span class="token function">add2</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">assert</span><span class="token punctuation">(</span><span class="token function">add2</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">7</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="testing-functions-for-equality" tabindex="-1"><a class="header-anchor" href="#testing-functions-for-equality" aria-hidden="true">#</a> 함수 동일여부 테스트</h2><p>최상위 함수, 정적 함수, 인스턴스 함수에 대한 동일여부를 테스트하는 예제입니다.</p><div class="language-dart line-numbers-mode" data-ext="dart"><pre class="language-dart"><code><span class="token keyword">void</span> <span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span> <span class="token comment">// 최상위 함수</span>

<span class="token keyword">class</span> <span class="token class-name">A</span> <span class="token punctuation">{</span>
    <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">bar</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span> <span class="token comment">// 정적 함수</span>
    <span class="token keyword">void</span> <span class="token function">baz</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span> <span class="token comment">// 인스턴스 함수</span>
<span class="token punctuation">}</span>

<span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token class-name">Function</span> x<span class="token punctuation">;</span>

    <span class="token comment">// 최상위 함수 비교</span>
    x <span class="token operator">=</span> foo<span class="token punctuation">;</span>
    <span class="token keyword">assert</span><span class="token punctuation">(</span>foo <span class="token operator">==</span> x<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">// 정적 함수 비교</span>
    x <span class="token operator">=</span> <span class="token class-name">A</span><span class="token punctuation">.</span>bar<span class="token punctuation">;</span>
    <span class="token keyword">assert</span><span class="token punctuation">(</span><span class="token class-name">A</span><span class="token punctuation">.</span>bar <span class="token operator">==</span> x<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">// 인스턴스 함수 비교</span>
    <span class="token keyword">var</span> v <span class="token operator">=</span> <span class="token class-name">A</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// A의 #1 인스턴스</span>
    <span class="token keyword">var</span> w <span class="token operator">=</span> <span class="token class-name">A</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// A의 #2 인스턴스</span>
    <span class="token keyword">var</span> y <span class="token operator">=</span> w<span class="token punctuation">;</span>
    x <span class="token operator">=</span> w<span class="token punctuation">.</span>baz<span class="token punctuation">;</span>

    <span class="token comment">// 이 클로저는 동일한 인스턴스 (#2)를 참조합니다.</span>
    <span class="token comment">// 따라서 동일합니다.</span>
    <span class="token keyword">assert</span><span class="token punctuation">(</span>y<span class="token punctuation">.</span>baz <span class="token operator">==</span> x<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">// 이 클로저는 다른 인스턴스를 참조합니다.</span>
    <span class="token comment">// 따라서 다릅니다.</span>
    <span class="token keyword">assert</span><span class="token punctuation">(</span>v<span class="token punctuation">.</span>baz <span class="token operator">!=</span> w<span class="token punctuation">.</span>baz<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="return-values" tabindex="-1"><a class="header-anchor" href="#return-values" aria-hidden="true">#</a> 반환 값</h2><p>모든 함수는 값을 반환합니다.<br> 반환되는 값이 명시되지 않으면, 암무적으로 함수 본문에 <code>return null;</code>을 추가합니다.</p><div class="language-dart line-numbers-mode" data-ext="dart"><pre class="language-dart"><code><span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>

<span class="token keyword">assert</span><span class="token punctuation">(</span><span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,17);function tn(en,pn){const t=c("ExternalLinkIcon"),p=c("RouterLink"),i=c("AdsenseB");return l(),r("div",null,[n("p",null,[s("원문 : "),n("a",m,[s("https://dart.dev/guides/language/language-tour#functions"),a(t)])]),n("p",null,[s("Dart는 진정한 객체지향 언어이기에 함수 또한 객체이며 "),n("a",b,[g,a(t)]),s("이라는 타입을 가집니다."),h,s(" 이 의미는 함수가 변수에 할당이 되거나 다른 함수에 인자로 전달될 수 있습니다."),f,s(" 또한 Dart 클래스의 인스턴스를 함수처럼 호출할 수 있습니다."),_,s(" 자세한 정보는 "),a(p,{to:"/flutter/dart-tour/callable-classes.html"},{default:o(()=>[s("호출가능한 클래스")]),_:1}),s("를 참고하세요.")]),y,n("p",null,[s("효율적인 Dart를 위해 "),n("a",w,[s("공개 API의 타입지정"),a(t)]),s("을 추천하지만, 함수에서 타입을 생략해도 동작합니다.")]),x,n("div",N,[B,n("p",null,[s("표현식만(명령문은 아님) 화살표("),S,s(")와 세미콜론("),A,s(") 사이에 위치할 수 있습니다."),$,s(" 예로 들어, "),a(p,{to:"/flutter/dart-tour/control-flow-statements.html#if-and-else"},{default:o(()=>[F]),_:1}),s(" 명령문은 위치할 수 없으나 "),a(p,{to:"/flutter/dart-tour/operators.html#conditional-expressions"},{default:o(()=>[s("조건 표현식")]),_:1}),s("은 가능합니다.")])]),E,L,n("div",q,[H,n("p",null,[s("몇몇 API - 특히 "),n("a",D,[s("Flutter"),a(t)]),s("의 위젯 생성자 - 는 필수 매개변수임에도 명명된 매개변수만 사용합니다."),j,s(" 다음 절에서 자세하게 알아보겠습니다.")])]),n("p",null,[s("함수에 인자를 전달하거나 함수의 매개변수를 정의할 때 "),a(p,{to:"/flutter/dart-tour/built-in-types.html#trailing-comma"},{default:o(()=>[s("마지막 콤마")]),_:1}),s("를 사용할 수 있습니다.")]),z,n("div",I,[C,n("p",null,[O,s(" :"),P,s(" 예전 코드는 명명된 매개변수의 기본값을 정의하는데 "),R,s("대신 콜론("),V,s(")을 사용했습니다."),G,s(" 그 이유는 원래 "),M,s("는 명명된 매개변수만 지원하기 때문입니다."),T,s(" 이 지원은 지원중단되었고 삭제될 예정입니다."),W,s(" 따라서 "),n("a",U,[s("기본값 정의에 "),J,s("를 사용"),a(t)]),s("을 추천드립니다.")]),n("p",null,[n("a",K,[s("prefer_equal_for_default_values"),a(t)]),s(" 린터 규칙을 활성화 하면, "),n("a",Q,[X,a(t)]),s("를 사용해서 제안되는 "),Y,s(" 문법으로 전환할 수 있습니다.")])]),Z,n("p",null,[n("a",nn,[s("args 라이브러리"),a(t)]),s("를 사용해서 명령줄 인자를 정의/파싱할 수 있습니다.")]),sn,(l(),d(k("script"),{type:"text/javascript",src:"https://dartpad.dev/inject_embed.dart.js",defer:""})),an,a(i)])}const cn=u(v,[["render",tn],["__file","functions.html.vue"]]);export{cn as default};
