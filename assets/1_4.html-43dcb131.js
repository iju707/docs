import{_ as r,r as p,o as d,c as k,a,b as n,d as l,w as s,e as o}from"./app-95e21c4a.js";const m={},v={href:"https://docs.spring.io/spring-framework/docs/current/reference/html/core.html#beans-dependencies",target:"_blank",rel:"noopener noreferrer"},h=o('<p>전형적인 엔터프라이즈 어플리케이션에서는 단일 객체(또는 스프링에서의 빈)으로 구성되어있지는 않습니다.<br> 아주 간단한 어플리케이션 조차도 최종사용자에게 일관된 어플리케이션으로 보일 수 있도록 함께 동작하는 몇가지 객체를 가지고 있습니다.<br> 다음 절에서 목표를 달성하기 위해 객체가 있는 완전히 구현된 어플리케이션의 독립실행에서 다수의 빈을 정의하는 방법을 설명하겠습니다.</p><h2 id="_1-4-1-의존성-주입" tabindex="-1"><a class="header-anchor" href="#_1-4-1-의존성-주입" aria-hidden="true">#</a> 1.4.1 의존성 주입</h2><p>의존성 주입은 생성자 인수, 팩토리 함수의 인수, 또는 생성되거나 팩토리함수로부터 반환된 이후 객체 인스턴스에 설정된 속성으로만 통해 객체들에 대한 의존성(즉, 동작하는 다른 객체들)을 정의하는 프로세스입니다.<br> 컨테이너는 빈을 만들때 해당 의존성을 주입합니다.<br> 이 프로세스는 근본적으로 클래스 또는 서비스 로케이터 패턴의 직접 구성을 사용하여 자체적으로 의존성의 인스턴스화 또는 위치를 제어하는 빈 자체의 역(따라서 이름은 제어의 역전, Inversion of Control) 입니다.</p><p>코드는 DI 개념을 통해 명확해지고, 객체의 의존성이 제공되어질 때 디커플링이 좀더 효율적입니다.<br> 객체는 의존성들을 탐색하지 않고 의존성에 대한 위치나 클래스를 모릅니다.<br> 결론적으로, 특히 의존성이 인터페이스 또는 추상기본클래스에 있을 때 클래스는 테스트하기 더 쉬워지고, 이를 통해 단위테스트에서 스텁 또는 모의 구현을 사용할 수 있습니다.</p><p>DI는 두가지 주요 변형을 가지고 있습니다.</p><ul><li><a href="#%EC%83%9D%EC%84%B1%EC%9E%90-%EA%B8%B0%EB%B0%98-%EC%9D%98%EC%A1%B4%EC%84%B1-%EC%A3%BC%EC%9E%85">생성자 기반 의존성 주입</a></li><li>Setter 기반 의존성 주입</li></ul><h3 id="생성자-기반-의존성-주입" tabindex="-1"><a class="header-anchor" href="#생성자-기반-의존성-주입" aria-hidden="true">#</a> 생성자 기반 의존성 주입</h3><p>생성자 기반 DI는 컨테이너가 각각 의존성을 표현하는 다수의 인자를 가진 생성자를 실행하여 완성됩니다.<br> 빈을 생성하기 위해 특정 인자를 가진 정적 팩토리 함수를 호출하는것과 거의 유사하며, 이 논제에서는 생성자와 정적 팩토리 함수가 유사하게 인자를 다룹니다.<br> 아래 예제는 생성자 주입으로 의존성 주입하는 클래스를 보여줍니다.</p>',8),b=a("div",{class:"language-java line-numbers-mode","data-ext":"java"},[a("pre",{class:"language-java"},[a("code",null,[a("span",{class:"token keyword"},"public"),n(),a("span",{class:"token keyword"},"class"),n(),a("span",{class:"token class-name"},"SimpleMovieLister"),n(),a("span",{class:"token punctuation"},"{"),n(`
    `),a("span",{class:"token comment"},"// SimpleMovieLister는 MovieFinder를 의존성로 가지고 있습니다."),n(`
    `),a("span",{class:"token keyword"},"private"),n(),a("span",{class:"token keyword"},"final"),n(),a("span",{class:"token class-name"},"MovieFinder"),n(" movieFinder"),a("span",{class:"token punctuation"},";"),n(`
    
    `),a("span",{class:"token comment"},"// 생성자를 통해 스프링 컨테이너가 MovieFinder를 주입시켜줍니다."),n(`
    `),a("span",{class:"token keyword"},"public"),n(),a("span",{class:"token class-name"},"SimpleMovieLister"),a("span",{class:"token punctuation"},"("),a("span",{class:"token class-name"},"MovieFinder"),n(" movieFinder"),a("span",{class:"token punctuation"},")"),n(),a("span",{class:"token punctuation"},"{"),n(`
        `),a("span",{class:"token keyword"},"this"),a("span",{class:"token punctuation"},"."),n("movieFinder "),a("span",{class:"token operator"},"="),n(" movieFinder"),a("span",{class:"token punctuation"},";"),n(`
    `),a("span",{class:"token punctuation"},"}"),n(`
    
    `),a("span",{class:"token comment"},"// 실제 주입된 MovieFinder를 사용하는 업무로직은 생략...."),n(`
`),a("span",{class:"token punctuation"},"}"),n(`
`)])]),a("div",{class:"line-numbers","aria-hidden":"true"},[a("div",{class:"line-number"}),a("div",{class:"line-number"}),a("div",{class:"line-number"}),a("div",{class:"line-number"}),a("div",{class:"line-number"}),a("div",{class:"line-number"}),a("div",{class:"line-number"}),a("div",{class:"line-number"}),a("div",{class:"line-number"}),a("div",{class:"line-number"}),a("div",{class:"line-number"})])],-1),g=a("div",{class:"language-kotlin line-numbers-mode","data-ext":"kt"},[a("pre",{class:"language-kotlin"},[a("code",null,[a("span",{class:"token comment"},"// 생성자를 통해 스프링 컨테이너가 MovieFinder를 주입시켜줍니다."),n(`
`),a("span",{class:"token keyword"},"class"),n(),a("span",{class:"token function"},"SimpleMovieLister"),a("span",{class:"token punctuation"},"("),a("span",{class:"token keyword"},"private"),n(),a("span",{class:"token keyword"},"val"),n(" movieFinder"),a("span",{class:"token operator"},":"),n(" MovieFinder"),a("span",{class:"token punctuation"},")"),n(),a("span",{class:"token punctuation"},"{"),n(`
    `),a("span",{class:"token comment"},"// 실제 주입된 MovieFinder를 사용하는 업무로직은 생략...."),n(`
`),a("span",{class:"token punctuation"},"}"),n(`
`)])]),a("div",{class:"line-numbers","aria-hidden":"true"},[a("div",{class:"line-number"}),a("div",{class:"line-number"}),a("div",{class:"line-number"}),a("div",{class:"line-number"})])],-1),x=a("p",null,[n("이 클래스에는 특별한 것이 없는것을 주의 깊게 봐주세요."),a("br"),n(" 컨테이너에 인터페이스나 기본 클래스, 어노테이션을 지정하여 의존성이 없는 단순 POJO 객체입니다.")],-1),q=a("h4",{id:"생성자-인자-처리",tabindex:"-1"},[a("a",{class:"header-anchor",href:"#생성자-인자-처리","aria-hidden":"true"},"#"),n(" 생성자 인자 처리")],-1),_=a("p",null,[n("생성자 인자 처리의 매칭은 인자 유형을 사용했을 때 발생합니다."),a("br"),n(" 빈 정의의 생성자 인수에 잠재적 모호성이 없다면, 빈 정의에서 생성자 인수가 정의되는 순서는 빈이 인스턴스화 될 때 해당 인수가 적절한 생성자에 전달되는 순서입니다."),a("br"),n(" 아래 클래스를 고려해보겠습니다.")],-1),w=a("div",{class:"language-java line-numbers-mode","data-ext":"java"},[a("pre",{class:"language-java"},[a("code",null,[a("span",{class:"token keyword"},"package"),n(),a("span",{class:"token namespace"},"x"),a("span",{class:"token punctuation"},","),n(" y"),a("span",{class:"token punctuation"},";"),n(`

`),a("span",{class:"token keyword"},"public"),n(),a("span",{class:"token keyword"},"class"),n(),a("span",{class:"token class-name"},"ThingOne"),n(),a("span",{class:"token punctuation"},"{"),n(`
    `),a("span",{class:"token keyword"},"public"),n(),a("span",{class:"token class-name"},"ThingOne"),a("span",{class:"token punctuation"},"("),a("span",{class:"token class-name"},"ThingTwo"),n(" thingTwo"),a("span",{class:"token punctuation"},","),n(),a("span",{class:"token class-name"},"ThingThree"),n(" thingThree"),a("span",{class:"token punctuation"},")"),n(),a("span",{class:"token punctuation"},"{"),n(`
        `),a("span",{class:"token comment"},"// ..."),n(`
    `),a("span",{class:"token punctuation"},"}"),n(`
`),a("span",{class:"token punctuation"},"}"),n(`
`)])]),a("div",{class:"line-numbers","aria-hidden":"true"},[a("div",{class:"line-number"}),a("div",{class:"line-number"}),a("div",{class:"line-number"}),a("div",{class:"line-number"}),a("div",{class:"line-number"}),a("div",{class:"line-number"}),a("div",{class:"line-number"})])],-1),y=a("div",{class:"language-kotlin line-numbers-mode","data-ext":"kt"},[a("pre",{class:"language-kotlin"},[a("code",null,[a("span",{class:"token keyword"},"package"),n(" x"),a("span",{class:"token punctuation"},","),n(" y"),a("span",{class:"token punctuation"},";"),n(`

`),a("span",{class:"token keyword"},"class"),n(),a("span",{class:"token function"},"ThingOne"),a("span",{class:"token punctuation"},"("),n("thingTwo"),a("span",{class:"token operator"},":"),n(" ThingTwo"),a("span",{class:"token punctuation"},","),n(" thingThree"),a("span",{class:"token operator"},":"),n(" ThingThree"),a("span",{class:"token punctuation"},")"),n(`
`)])]),a("div",{class:"line-numbers","aria-hidden":"true"},[a("div",{class:"line-number"}),a("div",{class:"line-number"}),a("div",{class:"line-number"})])],-1),f=o(`<p><code>ThingTwo</code>와 <code>ThingThree</code> 클래스는 상속적으로 관련이 없고, 잠재적인 모호성이 없다고 가정하겠습니다.<br> 따라서 다음 구성이 잘 동작하며, <code>&lt;constructor-arg/&gt;</code> 요소에 별도의 생성자 인자 인덱스나 유형을 명시하지 않아도 됩니다.</p><div class="language-xml line-numbers-mode" data-ext="xml"><pre class="language-xml"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>beans</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>beanOne<span class="token punctuation">&quot;</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>x.y.ThingOne<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>constructor-arg</span> <span class="token attr-name">ref</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>beanTwo<span class="token punctuation">&quot;</span></span><span class="token punctuation">/&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>constructor-arg</span> <span class="token attr-name">ref</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>beanThree<span class="token punctuation">&quot;</span></span><span class="token punctuation">/&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">&gt;</span></span>
    
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>beanTwo<span class="token punctuation">&quot;</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>x.y.ThingTwo<span class="token punctuation">&quot;</span></span><span class="token punctuation">/&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>beanThree<span class="token punctuation">&quot;</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>x.y.ThingThree<span class="token punctuation">&quot;</span></span><span class="token punctuation">/&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>beans</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>다른 빈이 참조될 때 유형을 알고 있으면 매칭이 발생됩니다.<br> (앞의 예와 마찬가지로) <code>&lt;value&gt;true&lt;/value&gt;</code> 와 같은 단순 유형이 사용될 때 스프링은 값의 유형을 결정할 수 없고 따라서 도움없이 유형으로 매칭을 할 수 없습니다.<br> 아래 클래스를 고려해보겠습니다.</p>`,3),A=a("div",{class:"language-java line-numbers-mode","data-ext":"java"},[a("pre",{class:"language-java"},[a("code",null,[a("span",{class:"token keyword"},"package"),n(),a("span",{class:"token namespace"},"examples"),a("span",{class:"token punctuation"},";"),n(`

`),a("span",{class:"token keyword"},"public"),n(),a("span",{class:"token keyword"},"class"),n(),a("span",{class:"token class-name"},"ExampleBean"),n(),a("span",{class:"token punctuation"},"{"),n(`

    `),a("span",{class:"token comment"},"// 궁극적인 대답을 계산하기 위한 년도의 수"),n(`
    `),a("span",{class:"token keyword"},"private"),n(),a("span",{class:"token keyword"},"final"),n(),a("span",{class:"token keyword"},"int"),n(" years"),a("span",{class:"token punctuation"},";"),n(`
    
    `),a("span",{class:"token comment"},"// 인생, 우주, 모든 것에 대한 답변"),n(`
    `),a("span",{class:"token keyword"},"private"),n(),a("span",{class:"token keyword"},"final"),n(),a("span",{class:"token class-name"},"String"),n(" ultimateAnswer"),a("span",{class:"token punctuation"},";"),n(`
    
    `),a("span",{class:"token keyword"},"public"),n(),a("span",{class:"token class-name"},"ExampleBean"),a("span",{class:"token punctuation"},"("),a("span",{class:"token keyword"},"int"),n(" years"),a("span",{class:"token punctuation"},","),n(),a("span",{class:"token class-name"},"String"),n(" ultimateAnswer"),a("span",{class:"token punctuation"},")"),n(),a("span",{class:"token punctuation"},"{"),n(`
        `),a("span",{class:"token keyword"},"this"),a("span",{class:"token punctuation"},"."),n("years "),a("span",{class:"token operator"},"="),n(" years"),a("span",{class:"token punctuation"},";"),n(`
        `),a("span",{class:"token keyword"},"this"),a("span",{class:"token punctuation"},"."),n("ultimateAnswer "),a("span",{class:"token operator"},"="),n(" ultimateAnswer"),a("span",{class:"token punctuation"},";"),n(`
    `),a("span",{class:"token punctuation"},"}"),n(`
`),a("span",{class:"token punctuation"},"}"),n(`
`)])]),a("div",{class:"line-numbers","aria-hidden":"true"},[a("div",{class:"line-number"}),a("div",{class:"line-number"}),a("div",{class:"line-number"}),a("div",{class:"line-number"}),a("div",{class:"line-number"}),a("div",{class:"line-number"}),a("div",{class:"line-number"}),a("div",{class:"line-number"}),a("div",{class:"line-number"}),a("div",{class:"line-number"}),a("div",{class:"line-number"}),a("div",{class:"line-number"}),a("div",{class:"line-number"}),a("div",{class:"line-number"}),a("div",{class:"line-number"})])],-1),T=a("div",{class:"language-kotlin line-numbers-mode","data-ext":"kt"},[a("pre",{class:"language-kotlin"},[a("code",null,[a("span",{class:"token keyword"},"package"),n(` examples

`),a("span",{class:"token keyword"},"class"),n(),a("span",{class:"token function"},"ExampleBean"),a("span",{class:"token punctuation"},"("),n(`
    `),a("span",{class:"token keyword"},"private"),n(),a("span",{class:"token keyword"},"val"),n(" years"),a("span",{class:"token operator"},":"),n(" Int"),a("span",{class:"token punctuation"},","),n(),a("span",{class:"token comment"},"// 궁극적인 대답을 계산하기 위한 년도의 수"),n(`
    `),a("span",{class:"token keyword"},"private"),n(),a("span",{class:"token keyword"},"val"),n(" ultimateAnswer"),a("span",{class:"token operator"},":"),n(" String "),a("span",{class:"token comment"},"// 인생, 우주, 모든 것에 대한 답변"),n(`
`),a("span",{class:"token punctuation"},")"),n(`
`)])]),a("div",{class:"line-numbers","aria-hidden":"true"},[a("div",{class:"line-number"}),a("div",{class:"line-number"}),a("div",{class:"line-number"}),a("div",{class:"line-number"}),a("div",{class:"line-number"}),a("div",{class:"line-number"})])],-1),B=o(`<h4 id="생성자-인자-타입-매칭" tabindex="-1"><a class="header-anchor" href="#생성자-인자-타입-매칭" aria-hidden="true">#</a> 생성자 인자 타입 매칭</h4><p>앞의 시나리오에서 컨테이너는 생성자 인수 유형을 <code>type</code> 속성을 사용하여 명시적으로 정의해서 단순한 유형에 대한 타입 매칭을 사용할 수 있습니다.<br> 아래의 예제를 참고하세요.</p><div class="language-xml line-numbers-mode" data-ext="xml"><pre class="language-xml"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>exampleBean<span class="token punctuation">&quot;</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>examples.ExampleBean<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>constructor-arg</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>int<span class="token punctuation">&quot;</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>7500000<span class="token punctuation">&quot;</span></span><span class="token punctuation">/&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>constructor-arg</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>java.lang.String<span class="token punctuation">&quot;</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>42<span class="token punctuation">&quot;</span></span><span class="token punctuation">/&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="생성자-인자-순번" tabindex="-1"><a class="header-anchor" href="#생성자-인자-순번" aria-hidden="true">#</a> 생성자 인자 순번</h4><p>아래의 예제처럼 <code>index</code> 속성을 사용해서 생성자 인자의 순번을 명시적으로 선언할 수 있습니다.</p><div class="language-xml line-numbers-mode" data-ext="xml"><pre class="language-xml"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>exampleBean<span class="token punctuation">&quot;</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>examples.ExampleBean<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>constructor-arg</span> <span class="token attr-name">index</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>0<span class="token punctuation">&quot;</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>7500000<span class="token punctuation">&quot;</span></span><span class="token punctuation">/&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>constructor-arg</span> <span class="token attr-name">index</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>1<span class="token punctuation">&quot;</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>42<span class="token punctuation">&quot;</span></span><span class="token punctuation">/&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>다수의 단순 값에 대한 모호성을 해결하는것 외에도 생성자가 동일한 유형의 두 인자를 가지고 있으면 인덱스를 지정하면 모호성이 해결됩니다.</p><div class="hint-container tip"><p class="hint-container-title">Tips</p><p>인덱스는 0부터 시작합니다.</p></div><h4 id="생성자-인자-이름" tabindex="-1"><a class="header-anchor" href="#생성자-인자-이름" aria-hidden="true">#</a> 생성자 인자 이름</h4><p>아래 예제에서 보여주는 것 처럼 값의 명확화를 위해 생성자 인자 이름을 사용할 수 있습니다.</p><div class="language-xml line-numbers-mode" data-ext="xml"><pre class="language-xml"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>exampleBean<span class="token punctuation">&quot;</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>examples.ExampleBean<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>constructor-arg</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>years<span class="token punctuation">&quot;</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>7500000<span class="token punctuation">&quot;</span></span><span class="token punctuation">/&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>constructor-arg</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>ultimateAnswer<span class="token punctuation">&quot;</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>42<span class="token punctuation">&quot;</span></span><span class="token punctuation">/&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>이 작업이 즉시 수행할 수 있도록 명심해야될 것은 스프링이 생성자로부터 인자의 이름으로 찾을 수 있도록 디버그 플래그를 활성화하여 코드를 컴파일 해야하는 것 입니다.<br> 디버그 플래그로 코드를 컴파일 할 수 없거나 원치 않는 경우 <code>@ConstructorProperties</code> JDK 어노테이션을 사용해서 생성자 인자의 이름을 명시적으로 선언할 수 있습니다.<br> 그러면 샘플 클래스는 다음과 같아야 합니다.</p>`,12),E=a("div",{class:"language-java line-numbers-mode","data-ext":"java"},[a("pre",{class:"language-java"},[a("code",null,[a("span",{class:"token keyword"},"package"),n(),a("span",{class:"token namespace"},"examples"),a("span",{class:"token punctuation"},";"),n(`

`),a("span",{class:"token keyword"},"public"),n(),a("span",{class:"token keyword"},"class"),n(),a("span",{class:"token class-name"},"ExampleBean"),n(),a("span",{class:"token punctuation"},"{"),n(`

    `),a("span",{class:"token comment"},"// 생략된 필"),n(`

    `),a("span",{class:"token annotation punctuation"},"@ConstructorProperties"),a("span",{class:"token punctuation"},"("),a("span",{class:"token punctuation"},"{"),a("span",{class:"token string"},'"years"'),a("span",{class:"token punctuation"},","),n(),a("span",{class:"token string"},'"ultimateAnswer"'),a("span",{class:"token punctuation"},"}"),a("span",{class:"token punctuation"},")"),n(`
    `),a("span",{class:"token keyword"},"public"),n(),a("span",{class:"token class-name"},"ExampleBean"),a("span",{class:"token punctuation"},"("),a("span",{class:"token keyword"},"int"),n(" years"),a("span",{class:"token punctuation"},","),n(),a("span",{class:"token class-name"},"String"),n(" ultimateAnswer"),a("span",{class:"token punctuation"},")"),n(),a("span",{class:"token punctuation"},"{"),n(`
        `),a("span",{class:"token keyword"},"this"),a("span",{class:"token punctuation"},"."),n("years "),a("span",{class:"token operator"},"="),n(" years"),a("span",{class:"token punctuation"},";"),n(`
        `),a("span",{class:"token keyword"},"this"),a("span",{class:"token punctuation"},"."),n("ultimateAnswer "),a("span",{class:"token operator"},"="),n(" ultimateAnswer"),a("span",{class:"token punctuation"},";"),n(`
    `),a("span",{class:"token punctuation"},"}"),n(`
`),a("span",{class:"token punctuation"},"}"),n(`
`)])]),a("div",{class:"line-numbers","aria-hidden":"true"},[a("div",{class:"line-number"}),a("div",{class:"line-number"}),a("div",{class:"line-number"}),a("div",{class:"line-number"}),a("div",{class:"line-number"}),a("div",{class:"line-number"}),a("div",{class:"line-number"}),a("div",{class:"line-number"}),a("div",{class:"line-number"}),a("div",{class:"line-number"}),a("div",{class:"line-number"}),a("div",{class:"line-number"})])],-1),j=a("div",{class:"language-kotlin line-numbers-mode","data-ext":"kt"},[a("pre",{class:"language-kotlin"},[a("code",null,[a("span",{class:"token keyword"},"package"),n(` examples

`),a("span",{class:"token keyword"},"class"),n(` ExampleBean
`),a("span",{class:"token annotation builtin"},"@ConstructorProperties"),a("span",{class:"token punctuation"},"("),a("span",{class:"token string-literal singleline"},[a("span",{class:"token string"},'"years"')]),a("span",{class:"token punctuation"},","),n(),a("span",{class:"token string-literal singleline"},[a("span",{class:"token string"},'"ultimateAnswer"')]),a("span",{class:"token punctuation"},")"),n(`
`),a("span",{class:"token keyword"},"constructor"),a("span",{class:"token punctuation"},"("),a("span",{class:"token keyword"},"val"),n(" years"),a("span",{class:"token operator"},":"),n(" Int"),a("span",{class:"token punctuation"},","),n(),a("span",{class:"token keyword"},"val"),n(" ultimateAnswer"),a("span",{class:"token operator"},":"),n(" String"),a("span",{class:"token punctuation"},")"),n(`
`)])]),a("div",{class:"line-numbers","aria-hidden":"true"},[a("div",{class:"line-number"}),a("div",{class:"line-number"}),a("div",{class:"line-number"}),a("div",{class:"line-number"}),a("div",{class:"line-number"})])],-1),C=o('<h3 id="setter-기반-의존성-주입" tabindex="-1"><a class="header-anchor" href="#setter-기반-의존성-주입" aria-hidden="true">#</a> Setter 기반 의존성 주입</h3><h3 id="종속성-처리-프로세스" tabindex="-1"><a class="header-anchor" href="#종속성-처리-프로세스" aria-hidden="true">#</a> 종속성 처리 프로세스</h3><h3 id="의존성-주입-예제" tabindex="-1"><a class="header-anchor" href="#의존성-주입-예제" aria-hidden="true">#</a> 의존성 주입 예제</h3><h2 id="_1-4-2-세부적인-의존성과-구성" tabindex="-1"><a class="header-anchor" href="#_1-4-2-세부적인-의존성과-구성" aria-hidden="true">#</a> 1.4.2 세부적인 의존성과 구성</h2><h3 id="직접적인-값-원시형-문자열-등" tabindex="-1"><a class="header-anchor" href="#직접적인-값-원시형-문자열-등" aria-hidden="true">#</a> 직접적인 값 (원시형, 문자열 등)</h3><h4 id="idref-요소" tabindex="-1"><a class="header-anchor" href="#idref-요소" aria-hidden="true">#</a> <code>idref</code> 요소</h4><h3 id="다른-빈에-대한-참조-협력자" tabindex="-1"><a class="header-anchor" href="#다른-빈에-대한-참조-협력자" aria-hidden="true">#</a> 다른 빈에 대한 참조 (협력자)</h3><h3 id="내부-빈" tabindex="-1"><a class="header-anchor" href="#내부-빈" aria-hidden="true">#</a> 내부 빈</h3><h3 id="컬렉션" tabindex="-1"><a class="header-anchor" href="#컬렉션" aria-hidden="true">#</a> 컬렉션</h3><h4 id="컬렉션-병합" tabindex="-1"><a class="header-anchor" href="#컬렉션-병합" aria-hidden="true">#</a> 컬렉션 병합</h4><h4 id="컬렉션-병합의-한계" tabindex="-1"><a class="header-anchor" href="#컬렉션-병합의-한계" aria-hidden="true">#</a> 컬렉션 병합의 한계</h4><h3 id="null과-공백-문자열-값" tabindex="-1"><a class="header-anchor" href="#null과-공백-문자열-값" aria-hidden="true">#</a> Null과 공백 문자열 값</h3><h3 id="p-네임스페이스의-xml-바로가기" tabindex="-1"><a class="header-anchor" href="#p-네임스페이스의-xml-바로가기" aria-hidden="true">#</a> p-네임스페이스의 XML 바로가기</h3><h3 id="c-네임스페이스의-xml-바로가기" tabindex="-1"><a class="header-anchor" href="#c-네임스페이스의-xml-바로가기" aria-hidden="true">#</a> c-네임스페이스의 XML 바로가기</h3><h3 id="복합속성이름" tabindex="-1"><a class="header-anchor" href="#복합속성이름" aria-hidden="true">#</a> 복합속성이름</h3><h2 id="_1-4-3-depends-on-사용하기" tabindex="-1"><a class="header-anchor" href="#_1-4-3-depends-on-사용하기" aria-hidden="true">#</a> 1.4.3 depends-on 사용하기</h2><h2 id="_1-4-4-지연초기화" tabindex="-1"><a class="header-anchor" href="#_1-4-4-지연초기화" aria-hidden="true">#</a> 1.4.4 지연초기화</h2><h2 id="_1-4-5-자동연결-협력자" tabindex="-1"><a class="header-anchor" href="#_1-4-5-자동연결-협력자" aria-hidden="true">#</a> 1.4.5 자동연결 협력자</h2><h3 id="자동연결의-한계와-단점" tabindex="-1"><a class="header-anchor" href="#자동연결의-한계와-단점" aria-hidden="true">#</a> 자동연결의 한계와 단점</h3><h3 id="자동연결에서-빈-제외하기" tabindex="-1"><a class="header-anchor" href="#자동연결에서-빈-제외하기" aria-hidden="true">#</a> 자동연결에서 빈 제외하기</h3><h2 id="_1-4-6-함수-주입" tabindex="-1"><a class="header-anchor" href="#_1-4-6-함수-주입" aria-hidden="true">#</a> 1.4.6 함수 주입</h2><h3 id="함수-주입-조회" tabindex="-1"><a class="header-anchor" href="#함수-주입-조회" aria-hidden="true">#</a> 함수 주입 조회</h3><h3 id="임의-함수-대체" tabindex="-1"><a class="header-anchor" href="#임의-함수-대체" aria-hidden="true">#</a> 임의 함수 대체</h3>',23);function M(F,S){const i=p("ExternalLinkIcon"),c=p("CodeTabs"),u=p("AdsenseB");return d(),k("div",null,[a("p",null,[n("원문 : "),a("a",v,[n("https://docs.spring.io/spring-framework/docs/current/reference/html/core.html#beans-dependencies"),l(i)])]),h,l(c,{id:"36",data:[{id:"java"},{id:"kotlin"}]},{title0:s(({value:t,isActive:e})=>[n("java")]),title1:s(({value:t,isActive:e})=>[n("kotlin")]),tab0:s(({value:t,isActive:e})=>[b]),tab1:s(({value:t,isActive:e})=>[g]),_:1}),x,q,_,l(c,{id:"53",data:[{id:"java"},{id:"kotlin"}]},{title0:s(({value:t,isActive:e})=>[n("java")]),title1:s(({value:t,isActive:e})=>[n("kotlin")]),tab0:s(({value:t,isActive:e})=>[w]),tab1:s(({value:t,isActive:e})=>[y]),_:1}),f,l(c,{id:"68",data:[{id:"java"},{id:"kotlin"}]},{title0:s(({value:t,isActive:e})=>[n("java")]),title1:s(({value:t,isActive:e})=>[n("kotlin")]),tab0:s(({value:t,isActive:e})=>[A]),tab1:s(({value:t,isActive:e})=>[T]),_:1}),B,l(c,{id:"108",data:[{id:"java"},{id:"kotlin"}]},{title0:s(({value:t,isActive:e})=>[n("java")]),title1:s(({value:t,isActive:e})=>[n("kotlin")]),tab0:s(({value:t,isActive:e})=>[E]),tab1:s(({value:t,isActive:e})=>[j]),_:1}),C,l(u)])}const L=r(m,[["render",M],["__file","1_4.html.vue"]]);export{L as default};
