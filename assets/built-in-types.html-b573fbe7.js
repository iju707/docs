import{_ as i,r as l,o as r,c as d,a as s,b as n,d as a,w as o,e as t}from"./app-95e21c4a.js";const u={},k={href:"https://dart.dev/guides/language/language-tour#built-in-types",target:"_blank",rel:"noopener noreferrer"},v=t('<p>Dart 언어는 아래 목록을 특별히 지원합니다.</p><ul><li><a href="#numbers">숫자</a>(<code>int</code>, <code>double</code>)</li><li><a href="#strings">문자열</a>(<code>String</code>)</li><li><a href="#booleans">부울</a>(<code>bool</code>)</li><li><a href="#lists">리스트</a>(<code>List</code>, 배열이라고도 함)</li><li><a href="#sets">세트</a>(<code>Set</code>)</li><li><a href="#maps">맵</a>(<code>Map</code>)</li><li><a href="#runes-and-grapheme-clusters">룬</a>(<code>Runes</code>, 종종 <code>characters</code> API로 대체됨)</li><li><a href="#symbols">심볼</a>(<code>Symbol</code>)</li><li><code>null</code> 값 (<code>Null</code>)</li></ul><p>이 지원에는 리터럴을 사용하여 객체를 만드는 기능이 포함됩니다.<br> 예로 들어, <code>&#39;this is a string&#39;</code>은 문자열 리터럴 이고 <code>true</code>는 부울 리터럴입니다.</p><p>Dart의 모든 변수가 객체(클래스의 인스턴스)를 참조하기 때문에 변수를 초기화할 때 보통 생성자를 사용합니다.<br> 내장된 타입의 일부는 자체적 생성자를 가지고 있습니다.<br> 예로 들어, 맵을 만들때는 <code>Map()</code> 생성자를 사용합니다.</p><p>또한 일부 다른 타입은 Dart 언어에서 특별한 역할을 담당하고 있습니다.</p>',5),g=s("li",null,[s("code",null,"Object"),n(" : "),s("code",null,"Null"),n("을 제외한 Dart의 모든 클래스의 상위클래스")],-1),m=s("li",null,[s("code",null,"Enum"),n(" : 모든 enum의 상위클래스")],-1),b=s("code",null,"Future",-1),h=s("code",null,"Stream",-1),_=s("code",null,"Iterable",-1),f={href:"https://dart.dev/guides/libraries/library-tour#iteration",target:"_blank",rel:"noopener noreferrer"},y=s("li",null,[s("code",null,"Never"),n(" : 표현식이 성공적인 평가를 완료할 수 없음을 나타냅니다. 항상 예외를 발생시키는 함수에서 자주 사용됩니다.")],-1),w=s("li",null,[s("code",null,"dynamic"),n(" : 정적 확인을 비활성화하는 것을 가리킵니다. 보통 "),s("code",null,"Object"),n("나 "),s("code",null,"Object?"),n(" 대신 사용합니다.")],-1),x=s("li",null,[s("code",null,"void"),n(" : 값이 전혀 사용되지 않음을 가리킵니다. 종종 반환 타입으로 사용됩니다.")],-1),S=s("code",null,"Object",-1),D=s("code",null,"Object?",-1),N=s("code",null,"Null",-1),T=s("code",null,"Never",-1),A={href:"https://dart.dev/null-safety/understanding-null-safety",target:"_blank",rel:"noopener noreferrer"},C={href:"https://dart.dev/null-safety/understanding-null-safety#top-and-bottom",target:"_blank",rel:"noopener noreferrer"},I=s("h2",{id:"numbers",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#numbers","aria-hidden":"true"},"#"),n(" 숫자")],-1),M=s("p",null,"Dart의 숫자는 두가지 방식으로 제공됩니다.",-1),O={id:"int",tabindex:"-1"},q=s("a",{class:"header-anchor",href:"#int","aria-hidden":"true"},"#",-1),P={href:"https://api.dart.dev/stable/dart-core/int-class.html",target:"_blank",rel:"noopener noreferrer"},$={href:"https://dart.dev/guides/language/numbers",target:"_blank",rel:"noopener noreferrer"},B=s("br",null,null,-1),L=s("sup",null,"63",-1),E=s("sup",null,"63",-1),R=s("br",null,null,-1),X=s("sup",null,"53",-1),G=s("sup",null,"53",-1),F={id:"double",tabindex:"-1"},U=s("a",{class:"header-anchor",href:"#double","aria-hidden":"true"},"#",-1),V={href:"https://api.dart.dev/stable/dart-core/double-class.html",target:"_blank",rel:"noopener noreferrer"},j=s("p",null,"IEEE 754 표준에서 정의한 64-비트(2배 정밀도) 부동소수점 숫자입니다.",-1),H=s("code",null,"int",-1),z=s("code",null,"double",-1),J={href:"https://api.dart.dev/stable/2.18.2/dart-core/num-class.html",target:"_blank",rel:"noopener noreferrer"},Y=s("code",null,"num",-1),K=s("br",null,null,-1),Q=s("code",null,"abs()",-1),W=s("code",null,"ceil()",-1),Z=s("code",null,"floor()",-1),nn=s("br",null,null,-1),sn=s("code",null,"int",-1),an=s("br",null,null,-1),en={href:"https://api.dart.dev/stable/dart-math",target:"_blank",rel:"noopener noreferrer"},tn=t(`<p>정수는 소수점이 없는 숫자입니다.<br> 여기 정수 리터럴을 정의하는 예제입니다.</p><div class="language-dart line-numbers-mode" data-ext="dart"><pre class="language-dart"><code><span class="token keyword">var</span> x <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
<span class="token keyword">var</span> hex <span class="token operator">=</span> <span class="token number">0xDEADBEEF</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>만약 소수점을 포함하는 그것은 더블입니다.<br> 여기 더블 리터럴을 정의하는 예제입니다.</p><div class="language-dart line-numbers-mode" data-ext="dart"><pre class="language-dart"><code><span class="token keyword">var</span> y <span class="token operator">=</span> <span class="token number">1.1</span><span class="token punctuation">;</span>
<span class="token keyword">var</span> exponents <span class="token operator">=</span> <span class="token number">1.42e5</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>또한 변수를 num으로 선언할 수 있습니다.<br> 이렇게 하면 변수는 정수와 더블 값 모두를 가질 수 있습니다.</p><div class="language-dart line-numbers-mode" data-ext="dart"><pre class="language-dart"><code>num x <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> <span class="token comment">// x는 int와 double 값 모두를 가질 수 있습니다.</span>
x <span class="token operator">+=</span> <span class="token number">2.5</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>정수 리터럴은 필요시 자동으로 더블로 변환됩니다.</p><div class="language-dart line-numbers-mode" data-ext="dart"><pre class="language-dart"><code>double z <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> <span class="token comment">// 이것은 double z = 1.0 과 동일</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>여기 숫자를 문자열로 또는 그 반대로 하는 방법입니다.</p><div class="language-dart line-numbers-mode" data-ext="dart"><pre class="language-dart"><code><span class="token comment">// String -&gt; int</span>
<span class="token keyword">var</span> one <span class="token operator">=</span> int<span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&#39;1&#39;</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">assert</span><span class="token punctuation">(</span>one <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// String -&gt; double</span>
<span class="token keyword">var</span> onePointOne <span class="token operator">=</span> double<span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&#39;1.1&#39;</span></span><span class="token punctuation">)</span>
<span class="token keyword">assert</span><span class="token punctuation">(</span>onePointOne <span class="token operator">==</span> <span class="token number">1.1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// int -&gt; String</span>
<span class="token class-name">String</span> oneAsString <span class="token operator">=</span> <span class="token number">1.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">assert</span><span class="token punctuation">(</span>oneAsString <span class="token operator">==</span> <span class="token string-literal"><span class="token string">&#39;1&#39;</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// double -&gt; String</span>
<span class="token class-name">String</span> piAsString <span class="token operator">=</span> <span class="token number">3.14159</span><span class="token punctuation">.</span><span class="token function">toStringAsFixed</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">assert</span><span class="token punctuation">(</span>piAsString <span class="token operator">==</span> <span class="token string-literal"><span class="token string">&#39;3.14&#39;</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>int</code> 타입은 비트 필드에서 플래그를 조작하고 마킹하는데 유용한 전통적인 비트쉬프트(<code>&lt;&lt;</code>, <code>&gt;&gt;</code>, <code>&gt;&gt;&gt;</code>), 보어(<code>~</code>), AND(<code>&amp;</code>), OR(<code>|</code>), XOR(<code>^</code>) 연산자를 제공합니다.<br> 예로 들면 다음과 같습니다.</p><div class="language-dart line-numbers-mode" data-ext="dart"><pre class="language-dart"><code><span class="token keyword">assert</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token number">3</span> <span class="token operator">&lt;&lt;</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 0011 &lt;&lt; 1 = 0110</span>
<span class="token keyword">assert</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token number">3</span> <span class="token operator">|</span> <span class="token number">4</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">7</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 0011 | 0100 == 0111</span>
<span class="token keyword">assert</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token number">3</span> <span class="token operator">&amp;</span> <span class="token number">4</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 0011 &amp; 0100 = 0000</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,12),pn=t(`<p>숫자 리터럴은 컴파일타임 상수입니다.<br> 피연산자가 숫자로 계산되는 컴파일타임 상수이면 많은 산술표현 또한 컴파일타임 상수입니다.</p><div class="language-dart line-numbers-mode" data-ext="dart"><pre class="language-dart"><code><span class="token keyword">const</span> msPerSecond <span class="token operator">=</span> <span class="token number">1000</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> secondsUntilRetry <span class="token operator">=</span> <span class="token number">5</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> msUntilRetry <span class="token operator">=</span> secondsUntilRetry <span class="token operator">*</span> msPerSecond<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,2),on={href:"https://dart.dev/guides/language/numbers",target:"_blank",rel:"noopener noreferrer"},ln=t(`<h2 id="strings" tabindex="-1"><a class="header-anchor" href="#strings" aria-hidden="true">#</a> 문자열</h2><p>Dart 문자열(<code>String</code> 객체)는 UTF-16 코드 단위의 시퀀스를 가지고 있습니다.<br> 문자열을 만들때 따옴표나 쌍따옴표를 사용할 수 있습니다.</p><div class="language-dart line-numbers-mode" data-ext="dart"><pre class="language-dart"><code><span class="token keyword">var</span> s1 <span class="token operator">=</span> <span class="token string-literal"><span class="token string">&#39;스트링 리터럴에 대해 따옴표가 잘 동작합니다.&#39;</span></span><span class="token punctuation">;</span>
<span class="token keyword">var</span> s2 <span class="token operator">=</span> <span class="token string-literal"><span class="token string">&quot;쌍따옴표도 잘 동작합니다.&quot;</span></span><span class="token punctuation">;</span>
<span class="token keyword">var</span> s3 <span class="token operator">=</span> <span class="token string-literal"><span class="token string">&#39;It\\&#39;s easy to escape the string delimiter.&#39;</span></span><span class="token punctuation">;</span>
<span class="token keyword">var</span> s3 <span class="token operator">=</span> <span class="token string-literal"><span class="token string">&quot;It&#39;s even easier to use the other delimiter.&quot;</span></span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>\${expression}</code> 을 사용해서 문자열안에 표현식값을 넣을 수 있습니다.<br> 표현식이 식별자일 경우에는 <code>{}</code>를 생략할수 있습니다.<br> 객체에 해당하는 문자열을 가져오려면 Dart에서는 객체의 <code>toString()</code> 함수를 호출하면 됩니다.</p><div class="language-dart line-numbers-mode" data-ext="dart"><pre class="language-dart"><code><span class="token keyword">var</span> s <span class="token operator">=</span> <span class="token string-literal"><span class="token string">&#39;string interpolation&#39;</span></span><span class="token punctuation">;</span>

<span class="token keyword">assert</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&#39;Dart has </span><span class="token interpolation"><span class="token punctuation">$</span><span class="token expression">s</span></span><span class="token string">, which is very handy.&#39;</span></span> <span class="token operator">==</span>
    <span class="token string-literal"><span class="token string">&#39;Dart has string interpolation, &#39;</span></span>
        <span class="token string-literal"><span class="token string">&#39;which is very handy.&#39;</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">assert</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&#39;That deserves all caps. &#39;</span></span>
        <span class="token string-literal"><span class="token string">&#39;</span><span class="token interpolation"><span class="token punctuation">\${</span><span class="token expression">s<span class="token punctuation">.</span><span class="token function">toUpperCase</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span><span class="token punctuation">}</span></span><span class="token string"> is very handy!&#39;</span></span> <span class="token operator">==</span>
    <span class="token string-literal"><span class="token string">&#39;That deserves all caps. &#39;</span></span>
        <span class="token string-literal"><span class="token string">&#39;STRING INTERPOLATION is very handy!&#39;</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="hint-container note"><p class="hint-container-title">Note</p><p><code>==</code> 연산자는 두 객체가 같은지 테스트를 합니다.<br> 두 문자열이 만약 같은 코드단위 시퀀스를 가지고 있다면 동일하다고 판단합니다.</p></div><p>인접한 문자열 또는 <code>+</code> 연산자로 병합할 수 있습니다.</p><div class="language-dart line-numbers-mode" data-ext="dart"><pre class="language-dart"><code><span class="token keyword">var</span> s1 <span class="token operator">=</span> <span class="token string-literal"><span class="token string">&#39;String &#39;</span></span>
    <span class="token string-literal"><span class="token string">&#39;concatenation&#39;</span></span>
    <span class="token string-literal"><span class="token string">&quot; works even over line breaks.&quot;</span></span><span class="token punctuation">;</span>
<span class="token keyword">assert</span><span class="token punctuation">(</span>s1 <span class="token operator">==</span> 
    <span class="token string-literal"><span class="token string">&#39;String concatenation works even over &#39;</span></span>
        <span class="token string-literal"><span class="token string">&#39;line breaks.&#39;</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">var</span> s2 <span class="token operator">=</span> <span class="token string-literal"><span class="token string">&#39;The + operator &#39;</span></span> <span class="token operator">+</span> <span class="token string-literal"><span class="token string">&#39;works, as well.&#39;</span></span><span class="token punctuation">;</span>
<span class="token keyword">assert</span><span class="token punctuation">(</span>s2 <span class="token operator">==</span> <span class="token string-literal"><span class="token string">&#39;The + operator works, as well.&#39;</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>여러줄의 문자열을 만드는 다른 방법은 따옴표나 쌍따옴표를 세번사용하는 것 입니다.</p><div class="language-dart line-numbers-mode" data-ext="dart"><pre class="language-dart"><code><span class="token keyword">var</span> s1 <span class="token operator">=</span> <span class="token string-literal"><span class="token string">&#39;&#39;&#39;
You can create
multi-line strings like this one.
&#39;&#39;&#39;</span></span><span class="token punctuation">;</span>

<span class="token keyword">var</span> s2 <span class="token operator">=</span> <span class="token string-literal"><span class="token string">&quot;&quot;&quot;This is also a
multi-line string.&quot;&quot;&quot;</span></span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>r</code> 접두어를 사용해서 &quot;원시&quot; 문자열을 생성할 수 있습니다.</p><div class="language-dart line-numbers-mode" data-ext="dart"><pre class="language-dart"><code><span class="token keyword">var</span> s <span class="token operator">=</span> <span class="token string-literal"><span class="token string">r&#39;원시 문자열에서는 \\n 도 특수한 처리가 되지 않습니다.&#39;</span></span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>문자열에서 유니코드 문자를 어떻게 표현하는지에 대한 상세한 내용은 <a href="#runes-and-grapheme-clusters">룬과 자소 클러스터</a>를 참고하세요.</p><p>보간 표현식이 null이나 숫자, 문자열, 또는 부울로 계산되는 컴파일타임상수이면 문자 리터럴은 컴파일타임 상수가 됩니다.</p><div class="language-dart line-numbers-mode" data-ext="dart"><pre class="language-dart"><code><span class="token comment">// 이것은 정적 문자열으로 동작합니다.</span>
<span class="token keyword">const</span> aConstNum <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> aConstBool <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> aConstString <span class="token operator">=</span> <span class="token string-literal"><span class="token string">&#39;a constant string&#39;</span></span><span class="token punctuation">;</span>

<span class="token comment">// 이것은 정적 문자열로 동작하지 않습니다.</span>
<span class="token keyword">var</span> aNum <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token keyword">var</span> aBool <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
<span class="token keyword">var</span> aString <span class="token operator">=</span> <span class="token string-literal"><span class="token string">&#39;a String&#39;</span></span><span class="token punctuation">;</span>
<span class="token keyword">const</span> aConstList <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">;</span>

<span class="token keyword">const</span> validConstString <span class="token operator">=</span> <span class="token string-literal"><span class="token string">&#39;</span><span class="token interpolation"><span class="token punctuation">$</span><span class="token expression">aConstNum</span></span><span class="token string"> </span><span class="token interpolation"><span class="token punctuation">$</span><span class="token expression">aConstBool</span></span><span class="token string"> </span><span class="token interpolation"><span class="token punctuation">$</span><span class="token expression">aConstString</span></span><span class="token string">&#39;</span></span><span class="token punctuation">;</span>
<span class="token comment">// const invalidConstString = &#39;$aNum $aBool $aString $aConstList&#39;;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,15),cn={href:"https://dart.dev/guides/libraries/library-tour#strings-and-regular-expressions",target:"_blank",rel:"noopener noreferrer"},rn=t(`<h2 id="booleans" tabindex="-1"><a class="header-anchor" href="#booleans" aria-hidden="true">#</a> 부울</h2><p>부울 값을 표현하기 위해 Dart는 <code>bool</code>이라는 타입을 사용합니다.<br> 컴파일타임 상수인 두가지 <code>true</code>와 <code>false</code> 부울 리터럴만 이 타입을 가질 수 있습니다.</p><p>Dart 타입 보장에서 <code>if (nonbooleanValue)</code>나 <code>assert (nonBooleanValue)</code>를 사용할 수 없다는걸 의미합니다.<br> 대신, 다음과 같이 명시적으로 값을 확인합니다.</p><div class="language-dart line-numbers-mode" data-ext="dart"><pre class="language-dart"><code><span class="token comment">// 공백 문자열을 확인합니다.</span>
<span class="token keyword">var</span> fullName <span class="token operator">=</span> <span class="token string-literal"><span class="token string">&#39;&#39;</span></span><span class="token punctuation">;</span>
<span class="token keyword">assert</span><span class="token punctuation">(</span>fullName<span class="token punctuation">.</span>isEmpty<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// 0인지 확인</span>
<span class="token keyword">var</span> hitPoints <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token keyword">assert</span><span class="token punctuation">(</span>hitPoints <span class="token operator">&lt;=</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// null인지 확인</span>
<span class="token keyword">var</span> unicorn<span class="token punctuation">;</span>
<span class="token keyword">assert</span><span class="token punctuation">(</span>unicorn <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// NaN인지 확인</span>
<span class="token keyword">var</span> iMeantToDoThis <span class="token operator">=</span> <span class="token number">0</span> <span class="token operator">/</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token keyword">assert</span><span class="token punctuation">(</span>iMeantToDoThis<span class="token punctuation">.</span>isNaN<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="lists" tabindex="-1"><a class="header-anchor" href="#lists" aria-hidden="true">#</a> 리스트</h2>`,5),dn=s("br",null,null,-1),un={href:"https://api.dart.dev/stable/2.18.2/dart-core/List-class.html",target:"_blank",rel:"noopener noreferrer"},kn=s("code",null,"List",-1),vn=t(`<p>Dart 리스트 리터럴은 대괄호(<code>[]</code>)로 시작종료되는 표현식이나 값의 쉼표로 구분된 목록으로 표현됩니다.<br> 여기 Dart 리스트의 예제가 있습니다.</p><div class="language-dart line-numbers-mode" data-ext="dart"><pre class="language-dart"><code><span class="token keyword">var</span> list <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div>`,2),gn={class:"hint-container note"},mn=s("p",{class:"hint-container-title"},"Note",-1),bn=s("code",null,"list",-1),hn=s("code",null,"List<int>",-1),_n=s("br",null,null,-1),fn=s("br",null,null,-1),yn={href:"https://dart.dev/guides/language/type-system#type-inference",target:"_blank",rel:"noopener noreferrer"},wn=t(`<p id="trailing-comma"></p><p>Dart 콜렉션 리터럴의 마지막 아이템에 콤마를 추가할 수 있습니다.<br> 마지막 콤마는 콜렉션에 영향을 주지는 않지만 복사-붙여넣기 오류를 방지할 수 있습니다.</p><div class="language-dart line-numbers-mode" data-ext="dart"><pre class="language-dart"><code><span class="token keyword">var</span> list <span class="token operator">=</span> <span class="token punctuation">[</span>
    <span class="token string-literal"><span class="token string">&#39;Car&#39;</span></span><span class="token punctuation">,</span>
    <span class="token string-literal"><span class="token string">&#39;Boat&#39;</span></span><span class="token punctuation">,</span>
    <span class="token string-literal"><span class="token string">&#39;Plane&#39;</span></span><span class="token punctuation">,</span>
<span class="token punctuation">]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>리스트는 0으로 시작되는 인덱싱을 사용하며 첫번째값의 인덱스가 0이고 <code>list.length - 1</code>이 마지막값의 인덱스가 됩니다.<br><code>.length</code> 속성을 사용해서 리스트의 길이를 가져올 수 있으며, 첨자연산자(<code>[]</code>)를 사용하여 리스트의 값을 가져올 수 있습니다.</p><div class="language-dart line-numbers-mode" data-ext="dart"><pre class="language-dart"><code><span class="token keyword">var</span> list <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token keyword">assert</span><span class="token punctuation">(</span>list<span class="token punctuation">.</span>length <span class="token operator">==</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">assert</span><span class="token punctuation">(</span>list<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

list<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
<span class="token keyword">assert</span><span class="token punctuation">(</span>list<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>리스트를 컴파일타임 상수로 만들고자 한다면 리스트 리터럴의 선두에 <code>const</code>를 추가하면 됩니다.</p><div class="language-dart line-numbers-mode" data-ext="dart"><pre class="language-dart"><code><span class="token keyword">var</span> constantList <span class="token operator">=</span> <span class="token keyword">const</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token comment">// constantList[1] = 1; // 이 줄은 오류가 발생할 것 입니다.</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p id="spread-operator"></p><p>Dart 2.3에서는 컬렉션에 여러값을 간결하게 삽입할 수 있는 방법인 **스프레드 연산자 (<code>...</code>)**와 **null인식 스프레드 연산자(<code>...?</code>)**를 소개하였습니다.</p><p>예로 들어, 리스트의 값들을 다른 리스트에 삽입하기 위해 스프레드 연산자(<code>...</code>)를 사용할 수 있습니다.</p><div class="language-dart line-numbers-mode" data-ext="dart"><pre class="language-dart"><code><span class="token keyword">var</span> list <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token keyword">var</span> list2 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>list<span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token keyword">assert</span><span class="token punctuation">(</span>list2<span class="token punctuation">.</span>length <span class="token operator">==</span> <span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>만약 스프레드 연산자 오른쪽에 있는 표현식이 null이 될 수 있으면 null인식 스프레드 연산자(<code>...?</code>)를 사용해서 예외를 피할 수 있습니다.</p><div class="language-dart line-numbers-mode" data-ext="dart"><pre class="language-dart"><code><span class="token keyword">var</span> list2 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token operator">?</span>list<span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token keyword">assert</span><span class="token punctuation">(</span>list2<span class="token punctuation">.</span>length <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div>`,13),xn={href:"https://github.com/dart-lang/language/blob/master/accepted/2.3/spread-collections/feature-specification.md",target:"_blank",rel:"noopener noreferrer"},Sn=t(`<p id="collection-operators"></p><p>또한 Dart는 <strong>콜렉션 if</strong>와 <strong>콜렉션 for</strong>를 제공하며 조건식(<code>if</code>)나 반복구(<code>for</code>)를 사용하여 콜렉션을 구성할 수 있습니다.</p><p>여기 <strong>콜렉션 if</strong>를 사용하여 3개 또는 4개 아이템을 가지는 리스트를 생성하는 예제입니다.</p><div class="language-dart line-numbers-mode" data-ext="dart"><pre class="language-dart"><code><span class="token keyword">var</span> nav <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string-literal"><span class="token string">&#39;Home&#39;</span></span><span class="token punctuation">,</span> <span class="token string-literal"><span class="token string">&#39;Furniture&#39;</span></span><span class="token punctuation">,</span> <span class="token string-literal"><span class="token string">&#39;Plants&#39;</span></span><span class="token punctuation">,</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>promoActive<span class="token punctuation">)</span> <span class="token string-literal"><span class="token string">&#39;Outlet&#39;</span></span><span class="token punctuation">]</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>다른 리스트에 추가하기 전에 리스트의 아이템을 조작하기 위해 <strong>콜렉션 for</strong>를 사용하는 예제입니다.</p><div class="language-dart line-numbers-mode" data-ext="dart"><pre class="language-dart"><code><span class="token keyword">var</span> listOfInts <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token keyword">var</span> listOfStrings <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string-literal"><span class="token string">&#39;#0&#39;</span></span><span class="token punctuation">,</span> <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token keyword">in</span> listOfInts<span class="token punctuation">)</span> <span class="token string-literal"><span class="token string">&#39;#</span><span class="token interpolation"><span class="token punctuation">$</span><span class="token expression">i</span></span><span class="token string">&#39;</span></span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token keyword">assert</span><span class="token punctuation">(</span>listOfStrings<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token string-literal"><span class="token string">&#39;#1&#39;</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,6),Dn=s("code",null,"if",-1),Nn=s("code",null,"for",-1),Tn={href:"https://github.com/dart-lang/language/blob/master/accepted/2.3/control-flow-collections/feature-specification.md",target:"_blank",rel:"noopener noreferrer"},An=s("br",null,null,-1),Cn={href:"https://dart.dev/guides/libraries/library-tour#collections",target:"_blank",rel:"noopener noreferrer"},In=s("h2",{id:"sets",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#sets","aria-hidden":"true"},"#"),n(" 세트")],-1),Mn=s("br",null,null,-1),On={href:"https://api.dart.dev/stable/2.18.2/dart-core/Set-class.html",target:"_blank",rel:"noopener noreferrer"},qn=s("code",null,"Set",-1),Pn=t(`<p>세트 리터럴로 만든 간단한 Dart 세트 예제입니다.</p><div class="language-dart line-numbers-mode" data-ext="dart"><pre class="language-dart"><code><span class="token keyword">var</span> halogens <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string-literal"><span class="token string">&#39;fluorine&#39;</span></span><span class="token punctuation">,</span> <span class="token string-literal"><span class="token string">&#39;chlorine&#39;</span></span><span class="token punctuation">,</span> <span class="token string-literal"><span class="token string">&#39;bormine&#39;</span></span><span class="token punctuation">,</span> <span class="token string-literal"><span class="token string">&#39;iodine&#39;</span></span><span class="token punctuation">,</span> <span class="token string-literal"><span class="token string">&#39;astatine&#39;</span></span><span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div>`,2),$n={class:"hint-container note"},Bn=s("p",{class:"hint-container-title"},"Note",-1),Ln=s("code",null,"halogens",-1),En=s("code",null,"Set<String>",-1),Rn=s("br",null,null,-1),Xn=s("br",null,null,-1),Gn={href:"https://dart.dev/guides/language/type-system#type-inference",target:"_blank",rel:"noopener noreferrer"},Fn=t(`<p>비어있는 세트를 만드려면 타입 인자에 <code>{}</code>를 사용하거나 <code>Set</code> 타입 변수에 <code>{}</code>를 할당하면 됩니다.</p><div class="language-dart line-numbers-mode" data-ext="dart"><pre class="language-dart"><code><span class="token keyword">var</span> name <span class="token operator">=</span> <span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token comment">// Set&lt;String&gt; names = {}; // 이것도 동작합니다.</span>
<span class="token comment">// var names = {}; // 이것은 세트가 아닌 맵으로 생성됩니다.</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="hint-container note"><p class="hint-container-title">세트? 맵?</p><p>맵 리터럴의 문법은 세트 리터럴과 유사합니다.<br> 맵 리터럴이 우선되기 때문에 <code>{}</code> 는 기본적으로 <code>Map</code> 타입이 됩니다.<br><code>{}</code> 또는 할당할 변수에 타입 어노테이션을 잊은 경우 Dart는 객체를 <code>Map&lt;dynamic, dynamic&gt;</code>으로 생성합니다.</p></div><p>기존 세트에 아이템을 추가하려면 <code>add()</code>나 <code>addAll()</code> 함수를 사용하면 됩니다.</p><div class="language-dart line-numbers-mode" data-ext="dart"><pre class="language-dart"><code><span class="token keyword">var</span> elements <span class="token operator">=</span> <span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
elements<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&#39;fluorine&#39;</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
elements<span class="token punctuation">.</span><span class="token function">addAll</span><span class="token punctuation">(</span>halogens<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>컴파일타임 상수로 세트를 생성하려면 <code>const</code>를 세트 리터럴 앞에 사용하면 됩니다.</p><div class="language-dart line-numbers-mode" data-ext="dart"><pre class="language-dart"><code><span class="token keyword">final</span> constantSet <span class="token operator">=</span> <span class="token keyword">const</span> <span class="token punctuation">{</span>
    <span class="token string-literal"><span class="token string">&#39;fluorine&#39;</span></span><span class="token punctuation">,</span>
    <span class="token string-literal"><span class="token string">&#39;chlorine&#39;</span></span><span class="token punctuation">,</span>
    <span class="token string-literal"><span class="token string">&#39;bromine&#39;</span></span><span class="token punctuation">,</span>
    <span class="token string-literal"><span class="token string">&#39;iodine&#39;</span></span><span class="token punctuation">,</span>
    <span class="token string-literal"><span class="token string">&#39;astatine&#39;</span></span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token comment">// constantSet.add(&#39;helium&#39;); // 이 코든느 오류가 발생합니다.</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>세트는 리스트와 동일하게 스프레드 연산자(<code>...</code>와 <code>...?</code>)와 콜렉션 <code>if</code>와 <code>for</code>를 지원합니다.<br> 자세한 정보는 <a href="#spread-operator">리스트 스프레드 연산자</a>와 <a href="#collection-operators">리스트 콜렉션 연산자</a> 부분을 참고하세요.</p>`,8),Un={href:"https://dart.dev/guides/libraries/library-tour#sets",target:"_blank",rel:"noopener noreferrer"},Vn=s("h2",{id:"maps",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#maps","aria-hidden":"true"},"#"),n(" 맵")],-1),jn=s("br",null,null,-1),Hn=s("br",null,null,-1),zn=s("br",null,null,-1),Jn={href:"https://api.dart.dev/stable/dart-core/Map-class.html",target:"_blank",rel:"noopener noreferrer"},Yn=s("code",null,"Map",-1),Kn=t(`<p>맵 리터럴을 사용한 간단한 Dart 맵 예제입니다.</p><div class="language-dart line-numbers-mode" data-ext="dart"><pre class="language-dart"><code><span class="token keyword">var</span> gifts <span class="token operator">=</span> <span class="token punctuation">{</span>
    <span class="token comment">// 키: 값</span>
    <span class="token string-literal"><span class="token string">&#39;first&#39;</span></span><span class="token punctuation">:</span> <span class="token string-literal"><span class="token string">&#39;partridge&#39;</span></span><span class="token punctuation">,</span>
    <span class="token string-literal"><span class="token string">&#39;second&#39;</span></span><span class="token punctuation">:</span> <span class="token string-literal"><span class="token string">&#39;turtledoves&#39;</span></span><span class="token punctuation">,</span>
    <span class="token string-literal"><span class="token string">&#39;fifth&#39;</span></span><span class="token punctuation">:</span> <span class="token string-literal"><span class="token string">&#39;golden rings&#39;</span></span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token keyword">var</span> nobleGases <span class="token operator">=</span> <span class="token punctuation">{</span>
    <span class="token number">2</span><span class="token punctuation">:</span> <span class="token string-literal"><span class="token string">&#39;helium&#39;</span></span><span class="token punctuation">,</span>
    <span class="token number">10</span><span class="token punctuation">:</span> <span class="token string-literal"><span class="token string">&#39;neon&#39;</span></span><span class="token punctuation">,</span>
    <span class="token number">18</span><span class="token punctuation">:</span> <span class="token string-literal"><span class="token string">&#39;argon&#39;</span></span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,2),Qn={class:"hint-container note"},Wn=s("p",{class:"hint-container-title"},"Note",-1),Zn=s("code",null,"gifts",-1),ns=s("code",null,"Map<String, String>",-1),ss=s("code",null,"nobleGases",-1),as=s("code",null,"Map<int, String>",-1),es=s("br",null,null,-1),ts=s("br",null,null,-1),ps={href:"https://dart.dev/guides/language/type-system#type-inference",target:"_blank",rel:"noopener noreferrer"},os=t(`<p>Map 생성자로 동일한 객체를 만들 수 있습니다.</p><div class="language-dart line-numbers-mode" data-ext="dart"><pre class="language-dart"><code><span class="token keyword">var</span> gifts <span class="token operator">=</span> <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
gifts<span class="token punctuation">[</span><span class="token string-literal"><span class="token string">&#39;first&#39;</span></span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string-literal"><span class="token string">&#39;partridge&#39;</span></span><span class="token punctuation">;</span>
gifts<span class="token punctuation">[</span><span class="token string-literal"><span class="token string">&#39;second&#39;</span></span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string-literal"><span class="token string">&#39;turtledoves&#39;</span></span><span class="token punctuation">;</span>
gifts<span class="token punctuation">[</span><span class="token string-literal"><span class="token string">&#39;fifth&#39;</span></span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string-literal"><span class="token string">&#39;golden rings&#39;</span></span><span class="token punctuation">;</span>

<span class="token keyword">var</span> nobleGases <span class="token operator">=</span> <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span>int<span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
nobleGases<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string-literal"><span class="token string">&#39;helium&#39;</span></span><span class="token punctuation">;</span>
nobleGases<span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string-literal"><span class="token string">&#39;neon&#39;</span></span><span class="token punctuation">;</span>
nobleGases<span class="token punctuation">[</span><span class="token number">18</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string-literal"><span class="token string">&#39;argon&#39;</span></span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,2),ls={class:"hint-container note"},cs=s("p",{class:"hint-container-title"},"Note",-1),is=s("code",null,"new Map()",-1),rs=s("code",null,"Map()",-1),ds=s("br",null,null,-1),us=s("code",null,"new",-1),ks=s("br",null,null,-1),vs=t(`<p>기존 맵에 새로운 키-값을 추가하려면 첨자 할당 연산자(<code>[]=</code>)를 사용하면 됩니다.</p><div class="language-dart line-numbers-mode" data-ext="dart"><pre class="language-dart"><code><span class="token keyword">var</span> gifts <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string-literal"><span class="token string">&#39;first&#39;</span></span><span class="token punctuation">:</span> <span class="token string-literal"><span class="token string">&#39;partridge&#39;</span></span><span class="token punctuation">}</span><span class="token punctuation">;</span>
gifts<span class="token punctuation">[</span><span class="token string-literal"><span class="token string">&#39;fourth&#39;</span></span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string-literal"><span class="token string">&#39;calling birds&#39;</span></span><span class="token punctuation">;</span> <span class="token comment">// 키와 값 쌍 추가</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>첨자 연산자(<code>[]</code>)를 사용하여 맵에서 값을 검색할 수 있습니다.</p><div class="language-dart line-numbers-mode" data-ext="dart"><pre class="language-dart"><code><span class="token keyword">var</span> gifts <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string-literal"><span class="token string">&#39;first&#39;</span></span><span class="token punctuation">:</span> <span class="token string-literal"><span class="token string">&#39;partridge&#39;</span></span><span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token keyword">assert</span><span class="token punctuation">(</span>gifts<span class="token punctuation">[</span><span class="token string-literal"><span class="token string">&#39;first&#39;</span></span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token string-literal"><span class="token string">&#39;partridge&#39;</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>만약 맵에서 해당 키가 없다면 <code>null</code>을 반환합니다.</p><div class="language-dart line-numbers-mode" data-ext="dart"><pre class="language-dart"><code><span class="token keyword">var</span> gifts <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string-literal"><span class="token string">&#39;first&#39;</span></span><span class="token punctuation">:</span> <span class="token string-literal"><span class="token string">&#39;partridge&#39;</span></span><span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token keyword">assert</span><span class="token punctuation">(</span>gifts<span class="token punctuation">[</span><span class="token string-literal"><span class="token string">&#39;fifth&#39;</span></span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p><code>.length</code>를 사용해서 맵의 키-값 쌍의 수를 알 수 있습니다.</p><div class="language-dart line-numbers-mode" data-ext="dart"><pre class="language-dart"><code><span class="token keyword">var</span> gifts <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string-literal"><span class="token string">&#39;first&#39;</span></span><span class="token punctuation">,</span> <span class="token string-literal"><span class="token string">&#39;partridge&#39;</span></span><span class="token punctuation">}</span><span class="token punctuation">;</span>
gifts<span class="token punctuation">[</span><span class="token string-literal"><span class="token string">&#39;fourth&#39;</span></span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string-literal"><span class="token string">&#39;calling birds&#39;</span></span><span class="token punctuation">;</span>
<span class="token keyword">assert</span><span class="token punctuation">(</span>gifts<span class="token punctuation">.</span>length <span class="token operator">==</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>컴파일타임 상수로 맵을 만드려면 맵 리터럴 앞에 <code>const</code>를 사용하면 됩니다.</p><div class="language-dart line-numbers-mode" data-ext="dart"><pre class="language-dart"><code><span class="token keyword">final</span> constantMap <span class="token operator">=</span> <span class="token keyword">const</span> <span class="token punctuation">{</span>
    <span class="token number">2</span><span class="token punctuation">:</span> <span class="token string-literal"><span class="token string">&#39;helium&#39;</span></span><span class="token punctuation">,</span>
    <span class="token number">10</span><span class="token punctuation">:</span> <span class="token string-literal"><span class="token string">&#39;neon&#39;</span></span><span class="token punctuation">,</span>
    <span class="token number">18</span><span class="token punctuation">:</span> <span class="token string-literal"><span class="token string">&#39;argon&#39;</span></span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token comment">// constantMap[2] = &#39;Helium&#39;; // 이 코드는 오류가 발생합니다.</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>맵은 리스트와 동일하게 스프레드 연산자(<code>...</code>와 <code>...?</code>)와 콜렉션 <code>if</code>와 <code>for</code>를 지원합니다.<br> 자세한 정보는 <a href="#spread-operator">리스트 스프레드 연산자</a>와 <a href="#collection-operators">리스트 콜렉션 연산자</a> 부분을 참고하세요.</p>`,11),gs={href:"https://dart.dev/guides/libraries/library-tour#maps",target:"_blank",rel:"noopener noreferrer"},ms=s("h2",{id:"runes-and-grapheme-clusters",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#runes-and-grapheme-clusters","aria-hidden":"true"},"#"),n(" 룬과 자소 클러스터")],-1),bs={href:"https://api.dart.dev/stable/dart-core/Runes-class.html",target:"_blank",rel:"noopener noreferrer"},hs=s("br",null,null,-1),_s={href:"https://pub.dev/packages/characters",target:"_blank",rel:"noopener noreferrer"},fs={href:"https://unicode.org/reports/tr29/#Grapheme_Cluster_Boundaries",target:"_blank",rel:"noopener noreferrer"},ys=t("<p>유니코드는 세계 문자 시스템 전부에 사용되는 글자, 숫자, 심볼을 유일한 숫자값으로 정의합니다.<br> Dart 문자열은 UTF-16 코드 단위 시퀀스이기 때문에 스트링에 유니코드 코드포인트를 표현하려면 특별한 문법이 필요합니다.<br> 유니코드 코드포인트를 표현하는 일반적인 방법은 <code>\\uXXXX</code>이며 XXXX는 4자리 16진수 입니다.<br> 예로 들어, 하트 문자(♥)는 <code>\\u2665</code>입니다.<br> 4자리가 아닐 경우에는 중괄효로 값을 표시합니다.<br> 예로 들어, 웃는 이모지(😆)는 <code>\\u{1f606}</code>입니다.</p>",1),ws=s("code",null,"characters",-1),xs=s("br",null,null,-1),Ss={href:"https://pub.dev/documentation/characters/latest/characters/Characters-class.html",target:"_blank",rel:"noopener noreferrer"},Ds=s("code",null,"Characters",-1),Ns=s("br",null,null,-1),Ts=t(`<div class="language-dart line-numbers-mode" data-ext="dart"><pre class="language-dart"><code><span class="token keyword">import</span> <span class="token string-literal"><span class="token string">&#39;package:characters/characters.dart&#39;</span></span><span class="token punctuation">;</span>
<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
<span class="token keyword">var</span> hi <span class="token operator">=</span> <span class="token string-literal"><span class="token string">&#39;Hi 🇩🇰&#39;</span></span><span class="token punctuation">;</span>
<span class="token function">print</span><span class="token punctuation">(</span>hi<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">print</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&#39;The end of the string: </span><span class="token interpolation"><span class="token punctuation">\${</span><span class="token expression">hi<span class="token punctuation">.</span><span class="token function">substring</span><span class="token punctuation">(</span>hi<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span></span><span class="token punctuation">}</span></span><span class="token string">&#39;</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">print</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&#39;The last character: </span><span class="token interpolation"><span class="token punctuation">\${</span><span class="token expression">hi<span class="token punctuation">.</span>characters<span class="token punctuation">.</span>last</span><span class="token punctuation">}</span></span><span class="token string">\\n&#39;</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>환경에 따라 다르지만 출력은 다음과 같을 것 입니다.</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token variable">$dart</span> run bin/main.dart
Hi 🇩🇰
The end of the string: ???
The last character: 🇩🇰
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,3),As={href:"https://pub.dev/packages/characters/example",target:"_blank",rel:"noopener noreferrer"},Cs={href:"https://pub.dev/documentation/characters",target:"_blank",rel:"noopener noreferrer"},Is=s("h2",{id:"symbols",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#symbols","aria-hidden":"true"},"#"),n(" 심볼")],-1),Ms={href:"https://api.dart.dev/stable/dart-core/Symbol-class.html",target:"_blank",rel:"noopener noreferrer"},Os=s("br",null,null,-1),qs=t(`<p>식별자의 심볼을 가져오려면 심볼 리터럴을 사용하면 되며 식별자 앞에 <code>#</code>을 사용하면 됩니다.</p><div class="language-dart line-numbers-mode" data-ext="dart"><pre class="language-dart"><code>#radix
#bar
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>심볼 리터럴은 컴파일타임 상수입니다.</p>`,3);function Ps($s,Bs){const e=l("ExternalLinkIcon"),p=l("RouterLink"),c=l("AdsenseB");return r(),d("div",null,[s("p",null,[n("원문 : "),s("a",k,[n("https://dart.dev/guides/language/language-tour#built-in-types"),a(e)])]),v,s("ul",null,[g,m,s("li",null,[b,n("와 "),h,n(" : "),a(p,{to:"/flutter/dart-tour/asynchrony-support.html"},{default:o(()=>[n("비동기 지원")]),_:1}),n("에서 사용")]),s("li",null,[_,n(" : "),s("a",f,[n("for-in 루프"),a(e)]),n("나 동기적 "),a(p,{to:"/flutter/dart-tour/generators.html"},{default:o(()=>[n("제너레이터 함수")]),_:1}),n("에서 사용")]),y,w,x]),s("p",null,[S,n(", "),D,n(", "),N,n(" 및 "),T,n(" 클래스는 클래스 계층에서 특별한 역할을 가지고 있으며 "),s("a",A,[n("null 안전 이해하기"),a(e)]),n("의 "),s("a",C,[n("상단과 하단"),a(e)]),n(" 절에서 설명하고 있습니다.")]),I,M,s("h3",O,[q,n(),s("a",P,[n("int"),a(e)])]),s("p",null,[n("정수값는 "),s("a",$,[n("플랫폼에 따라"),a(e)]),n(" 64비트보다 크지 않습니다."),B,n(" 네이티브 플랫폼에서는 값은 -2"),L,n(" 부터 2"),E,n(" - 1까지 됩니다."),R,n(" 웹에서는 정수값은 JavaScript의 숫자(소수부분이 없는 64비트 부동소수점값)로 표현되며 -2"),X,n("부터 2"),G,n(" - 1까지 됩니다.")]),s("h3",F,[U,n(),s("a",V,[n("double"),a(e)])]),j,s("p",null,[H,n("와 "),z,n("은 "),s("a",J,[Y,a(e)]),n("의 하위타입입니다."),K,n(" num 타입은 +, -, /, * 와 같은 기본 연산자를 포함하며 또한 다른 함수에서 "),Q,n(", "),W,n(", "),Z,n("와 같은 것도 찾을 수 있습니다."),nn,n(" (>>와 같은 비트 연산자는 "),sn,n(" 클래스에 정의되어있습니다)"),an,n(" 만약 num이나 그 하위 타입에 원하는게 없을 경우에는 "),s("a",en,[n("dart:math"),a(e)]),n(" 라이브러리에 있을 수 있습니다.")]),tn,s("p",null,[n("더 많은 예제는 "),a(p,{to:"/flutter/dart-tour/operators.html#bitwise-and-shift-operators"},{default:o(()=>[n("비트와 쉬프트 연산자")]),_:1}),n(" 절을 참고하세요.")]),pn,s("p",null,[n("더 자세한 정보는 "),s("a",on,[n("Dart의 숫자"),a(e)]),n("를 참고하세요.")]),ln,s("p",null,[n("문자열을 사용하는데 더 자세한 정보는 "),s("a",cn,[n("문자열과 정규표현식"),a(e)]),n("을 참고하세요.")]),rn,s("p",null,[n("이전의 모든 프로그래밍 언어에 대한 가장 표준적 콜렉션은 정렬된 객체 그룹인 배열일 것 입니다."),dn,n(" Dart에서 배열은 "),s("a",un,[kn,a(e)]),n(" 객체이며 많은 사람들이 리스트라고 부릅니다.")]),vn,s("div",gn,[mn,s("p",null,[n("Dart는 "),bn,n("를 "),hn,n(" 타입으로 추정합니다."),_n,n(" 이 리스트에 정수가 아닌 객체를 추가하면 분석기 또는 런타임에 오류가 발생하게 됩니다."),fn,n(" 자세한 정보는 "),s("a",yn,[n("타입 추론"),a(e)]),n("을 참고하세요.")])]),wn,s("p",null,[n("스프레드 연산자를 사용에 대한 자세한 정보와 예제는 "),s("a",xn,[n("스프레드 연산자 제안"),a(e)]),n("을 참고하세요.")]),Sn,s("p",null,[n("콜렉션 "),Dn,n("나 "),Nn,n("의 사용에 대한 자세한 정보와 예제는 "),s("a",Tn,[n("콜렉션 제어흐름 제안"),a(e)]),n("을 참고하세요.")]),s("p",null,[n("리스트 타입은 리스트를 조작하기 위해 다양한 간편한 함수를 가지고 있습니다."),An,n(" 리스트에 대한 자세한 정보는 "),a(p,{to:"/flutter/dart-tour/generics.html"},{default:o(()=>[n("제너릭")]),_:1}),n("과 "),s("a",Cn,[n("콜렉션"),a(e)]),n("을 참고하세요.")]),In,s("p",null,[n("Dart의 세트는 유일한 아이템의 정렬되지 않은 콜렉션 입니다."),Mn,n(" Dar의 세트 지원은 세트 리터럴과 "),s("a",On,[qn,a(e)]),n("타입으로 제공됩니다.")]),Pn,s("div",$n,[Bn,s("p",null,[n("Dart는 "),Ln,n("를 "),En,n("으로 추론합니다."),Rn,n(" 세트에 잘못된 타입의 값을 추가한다면 분석기나 런타임은 오류를 발생시킬 것 입니다."),Xn,n(" 자세한 정보는 "),s("a",Gn,[n("타입 추론"),a(e)]),n("을 참고하세요.")])]),Fn,s("p",null,[n("세트의 자세한 정보는 "),a(p,{to:"/flutter/dart-tour/generics.html"},{default:o(()=>[n("제너릭")]),_:1}),n("과 "),s("a",Un,[n("세트"),a(e)]),n("를 참고하세요.")]),Vn,s("p",null,[n("일반적으로 맵은 키와 값을 연결하는 객체입니다."),jn,n(" 키와 값 모두 객체의 어느 타입이든 가능합니다."),Hn,n(" 각 키는 딱 한번만 사용되며, 동일한 값은 여러번 반복되도 됩니다."),zn,n(" Dart의 맵 지원은 맵 리터럴과 "),s("a",Jn,[Yn,a(e)]),n("타입으로 제공됩니다.")]),Kn,s("div",Qn,[Wn,s("p",null,[n("Dart는 "),Zn,n("를 "),ns,n(" 타입으로 "),ss,n("를 "),as,n(" 타입으로 추론합니다."),es,n(" 각 맵에 잘못된 타입의 값을 추가하면 분석기나 런타임은 오류를 발생시킵니다."),ts,n(" 자세한 정보는 "),s("a",ps,[n("타입 추론"),a(e)]),n("을 참고하세요.")])]),os,s("div",ls,[cs,s("p",null,[n("C#이나 자바같은 언어를 사용했다면 "),is,n("이 아닌 "),rs,n("만 사용한 것을 알수 있습니다."),ds,n(" Dart에서 "),us,n(" 키워드는 선택적입니다."),ks,n(" 자세한 내용은 "),a(p,{to:"/flutter/dart-tour/classes.html#using-constructors"},{default:o(()=>[n("생성자 사용하기")]),_:1}),n("를 참고하세요.")])]),vs,s("p",null,[n("맵에 관련된 자세한 정보는 "),a(p,{to:"/flutter/dart-tour/generics.html"},{default:o(()=>[n("제너릭")]),_:1}),n("과 라이브러리 둘러보기의 "),s("a",gs,[n("맵 API"),a(e)]),n("를 참고하세요.")]),ms,s("p",null,[n("Dart에서 "),s("a",bs,[n("룬"),a(e)]),n("은 문자열의 유니코드 코드포인트을 보여줍니다."),hs,s("a",_s,[n("문자 패키지"),a(e)]),n("를 사용하여 "),s("a",fs,[n("유니코드(확장) 자소 클러스터"),a(e)]),n("라고 하는 사용자 인식 문자를 보거나 조작할 수 있습니다.")]),ys,s("p",null,[n("개별 유니코드 문자를 읽거나 쓰고 싶을 경우, 문자 패키지의 문자열에 정의된 "),ws,n(" getter를 사용합니다."),xs,n(" 반환된 "),s("a",Ss,[Ds,a(e)]),n(" 객체는 자소 클러스터 시퀀스의 문자열입니다."),Ns,n(" 문자 API를 사용한 예제입니다.")]),Ts,s("p",null,[n("문자열을 조작하기 위해 문자 패키지를 사용하는 자세한 내용은 문자 패키지의 "),s("a",As,[n("예제"),a(e)]),n("와 "),s("a",Cs,[n("API 참조"),a(e)]),n("를 참고하세요.")]),Is,s("p",null,[s("a",Ms,[n("심볼"),a(e)]),n(" 객체는 Dart 프로그램에서 선언된 연산자 또는 식별자를 나타냅니다."),Os,n(" 심볼을 사용할 필요가 없을 수 있지만 축소는 식별자 이름을 변경하지만 식별자 심볼은 변경하지 않기 때문에 이름으로 식별자를 참조하는 API에는 매우 중요합니다.")]),qs,a(c)])}const Es=i(u,[["render",Ps],["__file","built-in-types.html.vue"]]);export{Es as default};
