import{_ as c,r as p,o as i,c as d,a as s,b as n,d as a,w as o,e as l}from"./app-95e21c4a.js";const u={},k={href:"https://dart.dev/language/built-in-types",target:"_blank",rel:"noopener noreferrer"},v=s("p",null,"Dart 언어는 아래 목록을 특별히 지원합니다.",-1),m=s("code",null,"int",-1),b=s("code",null,"double",-1),g=s("code",null,"String",-1),h=s("code",null,"bool",-1),_=s("code",null,"List",-1),y=s("code",null,"Set",-1),f=s("code",null,"Map",-1),w=s("code",null,"Runes",-1),x=s("code",null,"characters",-1),S=s("code",null,"Symbol",-1),N=s("li",null,[s("code",null,"null"),n(" 값 ("),s("code",null,"Null"),n(")")],-1),D=l("<p>이 지원에는 리터럴을 사용하여 객체를 만드는 기능이 포함됩니다.<br> 예로 들어, <code>&#39;this is a string&#39;</code>은 문자열 리터럴 이고 <code>true</code>는 부울 리터럴입니다.</p><p>Dart의 모든 변수가 객체(클래스의 인스턴스)를 참조하기 때문에 변수를 초기화할 때 보통 생성자를 사용합니다.<br> 내장된 타입의 일부는 자체적 생성자를 가지고 있습니다.<br> 예로 들어, 맵을 만들때는 <code>Map()</code> 생성자를 사용합니다.</p><p>또한 일부 다른 타입은 Dart 언어에서 특별한 역할을 담당하고 있습니다.</p>",3),T=s("li",null,[s("code",null,"Object"),n(" : "),s("code",null,"Null"),n("을 제외한 Dart의 모든 클래스의 상위클래스")],-1),C=s("li",null,[s("code",null,"Enum"),n(" : 모든 enum의 상위클래스")],-1),q=s("code",null,"Future",-1),A=s("code",null,"Stream",-1),I=s("code",null,"Iterable",-1),$={href:"https://dart.dev/guides/libraries/library-tour#iteration",target:"_blank",rel:"noopener noreferrer"},B=s("li",null,[s("code",null,"Never"),n(" : 표현식이 성공적인 평가를 완료할 수 없음을 나타냅니다. 항상 예외를 발생시키는 함수에서 자주 사용됩니다.")],-1),E=s("li",null,[s("code",null,"dynamic"),n(" : 정적 확인을 비활성화하는 것을 가리킵니다. 보통 "),s("code",null,"Object"),n("나 "),s("code",null,"Object?"),n(" 대신 사용합니다.")],-1),O=s("li",null,[s("code",null,"void"),n(" : 값이 전혀 사용되지 않음을 가리킵니다. 종종 반환 타입으로 사용됩니다.")],-1),P=s("code",null,"Object",-1),R=s("code",null,"Object?",-1),X=s("code",null,"Null",-1),L=s("code",null,"Never",-1),U={href:"https://dart.dev/null-safety/understanding-null-safety#top-and-bottom",target:"_blank",rel:"noopener noreferrer"},V=s("h2",{id:"numbers",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#numbers","aria-hidden":"true"},"#"),n(" 숫자")],-1),j=s("p",null,"Dart의 숫자는 두가지 방식으로 제공됩니다.",-1),F={id:"int",tabindex:"-1"},M=s("a",{class:"header-anchor",href:"#int","aria-hidden":"true"},"#",-1),z={href:"https://api.dart.dev/stable/dart-core/int-class.html",target:"_blank",rel:"noopener noreferrer"},G={href:"https://dart.dev/guides/language/numbers",target:"_blank",rel:"noopener noreferrer"},H=s("br",null,null,-1),J=s("sup",null,"63",-1),Y=s("sup",null,"63",-1),K=s("br",null,null,-1),Q=s("sup",null,"53",-1),W=s("sup",null,"53",-1),Z={id:"double",tabindex:"-1"},nn=s("a",{class:"header-anchor",href:"#double","aria-hidden":"true"},"#",-1),sn={href:"https://api.dart.dev/stable/dart-core/double-class.html",target:"_blank",rel:"noopener noreferrer"},an=s("p",null,"IEEE 754 표준에서 정의한 64-비트(2배 정밀도) 부동소수점 숫자입니다.",-1),en=s("code",null,"int",-1),tn=s("code",null,"double",-1),on={href:"https://api.dart.dev/stable/dart-core/num-class.html",target:"_blank",rel:"noopener noreferrer"},ln=s("code",null,"num",-1),pn=s("br",null,null,-1),rn=s("code",null,"abs()",-1),cn=s("code",null,"ceil()",-1),dn=s("code",null,"floor()",-1),un=s("br",null,null,-1),kn=s("code",null,"int",-1),vn=s("br",null,null,-1),mn={href:"https://api.dart.dev/stable/dart-math",target:"_blank",rel:"noopener noreferrer"},bn=l(`<p>정수는 소수점이 없는 숫자입니다.<br> 여기 정수 리터럴을 정의하는 예제입니다.</p><div class="language-dart line-numbers-mode" data-ext="dart"><pre class="language-dart"><code><span class="token keyword">var</span> x <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
<span class="token keyword">var</span> hex <span class="token operator">=</span> <span class="token number">0xDEADBEEF</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>만약 소수점을 포함하는 그것은 더블입니다.<br> 여기 더블 리터럴을 정의하는 예제입니다.</p><div class="language-dart line-numbers-mode" data-ext="dart"><pre class="language-dart"><code><span class="token keyword">var</span> y <span class="token operator">=</span> <span class="token number">1.1</span><span class="token punctuation">;</span>
<span class="token keyword">var</span> exponents <span class="token operator">=</span> <span class="token number">1.42e5</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>또한 변수를 num으로 선언할 수 있습니다.<br> 이렇게 하면 변수는 정수와 더블 값 모두를 가질 수 있습니다.</p><div class="language-dart line-numbers-mode" data-ext="dart"><pre class="language-dart"><code>num x <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> <span class="token comment">// x는 int와 double 값 모두를 가질 수 있습니다.</span>
x <span class="token operator">+=</span> <span class="token number">2.5</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>정수 리터럴은 필요시 자동으로 더블로 변환됩니다.</p><div class="language-dart line-numbers-mode" data-ext="dart"><pre class="language-dart"><code>double z <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> <span class="token comment">// 이것은 double z = 1.0 과 동일</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>여기 숫자를 문자열로 또는 그 반대로 하는 방법입니다.</p><div class="language-dart line-numbers-mode" data-ext="dart"><pre class="language-dart"><code><span class="token comment">// String -&gt; int</span>
<span class="token keyword">var</span> one <span class="token operator">=</span> int<span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&#39;1&#39;</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">assert</span><span class="token punctuation">(</span>one <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// String -&gt; double</span>
<span class="token keyword">var</span> onePointOne <span class="token operator">=</span> double<span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&#39;1.1&#39;</span></span><span class="token punctuation">)</span>
<span class="token keyword">assert</span><span class="token punctuation">(</span>onePointOne <span class="token operator">==</span> <span class="token number">1.1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// int -&gt; String</span>
<span class="token class-name">String</span> oneAsString <span class="token operator">=</span> <span class="token number">1.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">assert</span><span class="token punctuation">(</span>oneAsString <span class="token operator">==</span> <span class="token string-literal"><span class="token string">&#39;1&#39;</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// double -&gt; String</span>
<span class="token class-name">String</span> piAsString <span class="token operator">=</span> <span class="token number">3.14159</span><span class="token punctuation">.</span><span class="token function">toStringAsFixed</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">assert</span><span class="token punctuation">(</span>piAsString <span class="token operator">==</span> <span class="token string-literal"><span class="token string">&#39;3.14&#39;</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>int</code> 타입은 비트 필드에서 플래그를 조작하고 마킹하는데 유용한 전통적인 비트쉬프트(<code>&lt;&lt;</code>, <code>&gt;&gt;</code>, <code>&gt;&gt;&gt;</code>), 보어(<code>~</code>), AND(<code>&amp;</code>), OR(<code>|</code>), XOR(<code>^</code>) 연산자를 제공합니다.<br> 예로 들면 다음과 같습니다.</p><div class="language-dart line-numbers-mode" data-ext="dart"><pre class="language-dart"><code><span class="token keyword">assert</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token number">3</span> <span class="token operator">&lt;&lt;</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 0011 &lt;&lt; 1 = 0110</span>
<span class="token keyword">assert</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token number">3</span> <span class="token operator">|</span> <span class="token number">4</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">7</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 0011 | 0100 == 0111</span>
<span class="token keyword">assert</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token number">3</span> <span class="token operator">&amp;</span> <span class="token number">4</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 0011 &amp; 0100 = 0000</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,12),gn=l(`<p>숫자 리터럴은 컴파일타임 상수입니다.<br> 피연산자가 숫자로 계산되는 컴파일타임 상수이면 많은 산술표현 또한 컴파일타임 상수입니다.</p><div class="language-dart line-numbers-mode" data-ext="dart"><pre class="language-dart"><code><span class="token keyword">const</span> msPerSecond <span class="token operator">=</span> <span class="token number">1000</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> secondsUntilRetry <span class="token operator">=</span> <span class="token number">5</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> msUntilRetry <span class="token operator">=</span> secondsUntilRetry <span class="token operator">*</span> msPerSecond<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,2),hn={href:"https://dart.dev/guides/language/numbers",target:"_blank",rel:"noopener noreferrer"},_n=l(`<h2 id="strings" tabindex="-1"><a class="header-anchor" href="#strings" aria-hidden="true">#</a> 문자열</h2><p>Dart 문자열(<code>String</code> 객체)는 UTF-16 코드 단위의 시퀀스를 가지고 있습니다.<br> 문자열을 만들때 따옴표나 쌍따옴표를 사용할 수 있습니다.</p><div class="language-dart line-numbers-mode" data-ext="dart"><pre class="language-dart"><code><span class="token keyword">var</span> s1 <span class="token operator">=</span> <span class="token string-literal"><span class="token string">&#39;스트링 리터럴에 대해 따옴표가 잘 동작합니다.&#39;</span></span><span class="token punctuation">;</span>
<span class="token keyword">var</span> s2 <span class="token operator">=</span> <span class="token string-literal"><span class="token string">&quot;쌍따옴표도 잘 동작합니다.&quot;</span></span><span class="token punctuation">;</span>
<span class="token keyword">var</span> s3 <span class="token operator">=</span> <span class="token string-literal"><span class="token string">&#39;It\\&#39;s easy to escape the string delimiter.&#39;</span></span><span class="token punctuation">;</span>
<span class="token keyword">var</span> s3 <span class="token operator">=</span> <span class="token string-literal"><span class="token string">&quot;It&#39;s even easier to use the other delimiter.&quot;</span></span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>\${expression}</code> 을 사용해서 문자열안에 표현식값을 넣을 수 있습니다.<br> 표현식이 식별자일 경우에는 <code>{}</code>를 생략할수 있습니다.<br> 객체에 해당하는 문자열을 가져오려면 Dart에서는 객체의 <code>toString()</code> 함수를 호출하면 됩니다.</p><div class="language-dart line-numbers-mode" data-ext="dart"><pre class="language-dart"><code><span class="token keyword">var</span> s <span class="token operator">=</span> <span class="token string-literal"><span class="token string">&#39;string interpolation&#39;</span></span><span class="token punctuation">;</span>

<span class="token keyword">assert</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&#39;Dart has </span><span class="token interpolation"><span class="token punctuation">$</span><span class="token expression">s</span></span><span class="token string">, which is very handy.&#39;</span></span> <span class="token operator">==</span>
    <span class="token string-literal"><span class="token string">&#39;Dart has string interpolation, &#39;</span></span>
        <span class="token string-literal"><span class="token string">&#39;which is very handy.&#39;</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">assert</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&#39;That deserves all caps. &#39;</span></span>
        <span class="token string-literal"><span class="token string">&#39;</span><span class="token interpolation"><span class="token punctuation">\${</span><span class="token expression">s<span class="token punctuation">.</span><span class="token function">toUpperCase</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span><span class="token punctuation">}</span></span><span class="token string"> is very handy!&#39;</span></span> <span class="token operator">==</span>
    <span class="token string-literal"><span class="token string">&#39;That deserves all caps. &#39;</span></span>
        <span class="token string-literal"><span class="token string">&#39;STRING INTERPOLATION is very handy!&#39;</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="hint-container note"><p class="hint-container-title">Note</p><p><code>==</code> 연산자는 두 객체가 같은지 테스트를 합니다.<br> 두 문자열이 만약 같은 코드단위 시퀀스를 가지고 있다면 동일하다고 판단합니다.</p></div><p>인접한 문자열 또는 <code>+</code> 연산자로 병합할 수 있습니다.</p><div class="language-dart line-numbers-mode" data-ext="dart"><pre class="language-dart"><code><span class="token keyword">var</span> s1 <span class="token operator">=</span> <span class="token string-literal"><span class="token string">&#39;String &#39;</span></span>
    <span class="token string-literal"><span class="token string">&#39;concatenation&#39;</span></span>
    <span class="token string-literal"><span class="token string">&quot; works even over line breaks.&quot;</span></span><span class="token punctuation">;</span>
<span class="token keyword">assert</span><span class="token punctuation">(</span>s1 <span class="token operator">==</span> 
    <span class="token string-literal"><span class="token string">&#39;String concatenation works even over &#39;</span></span>
        <span class="token string-literal"><span class="token string">&#39;line breaks.&#39;</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">var</span> s2 <span class="token operator">=</span> <span class="token string-literal"><span class="token string">&#39;The + operator &#39;</span></span> <span class="token operator">+</span> <span class="token string-literal"><span class="token string">&#39;works, as well.&#39;</span></span><span class="token punctuation">;</span>
<span class="token keyword">assert</span><span class="token punctuation">(</span>s2 <span class="token operator">==</span> <span class="token string-literal"><span class="token string">&#39;The + operator works, as well.&#39;</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>여러줄의 문자열을 만드는 다른 방법은 따옴표나 쌍따옴표를 세번사용하는 것 입니다.</p><div class="language-dart line-numbers-mode" data-ext="dart"><pre class="language-dart"><code><span class="token keyword">var</span> s1 <span class="token operator">=</span> <span class="token string-literal"><span class="token string">&#39;&#39;&#39;
You can create
multi-line strings like this one.
&#39;&#39;&#39;</span></span><span class="token punctuation">;</span>

<span class="token keyword">var</span> s2 <span class="token operator">=</span> <span class="token string-literal"><span class="token string">&quot;&quot;&quot;This is also a
multi-line string.&quot;&quot;&quot;</span></span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>r</code> 접두어를 사용해서 &quot;원시&quot; 문자열을 생성할 수 있습니다.</p><div class="language-dart line-numbers-mode" data-ext="dart"><pre class="language-dart"><code><span class="token keyword">var</span> s <span class="token operator">=</span> <span class="token string-literal"><span class="token string">r&#39;원시 문자열에서는 \\n 도 특수한 처리가 되지 않습니다.&#39;</span></span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div>`,12),yn=l(`<p>보간 표현식이 null이나 숫자, 문자열, 또는 부울로 계산되는 컴파일타임상수이면 문자 리터럴은 컴파일타임 상수가 됩니다.</p><div class="language-dart line-numbers-mode" data-ext="dart"><pre class="language-dart"><code><span class="token comment">// 이것은 정적 문자열으로 동작합니다.</span>
<span class="token keyword">const</span> aConstNum <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> aConstBool <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> aConstString <span class="token operator">=</span> <span class="token string-literal"><span class="token string">&#39;a constant string&#39;</span></span><span class="token punctuation">;</span>

<span class="token comment">// 이것은 정적 문자열로 동작하지 않습니다.</span>
<span class="token keyword">var</span> aNum <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token keyword">var</span> aBool <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
<span class="token keyword">var</span> aString <span class="token operator">=</span> <span class="token string-literal"><span class="token string">&#39;a String&#39;</span></span><span class="token punctuation">;</span>
<span class="token keyword">const</span> aConstList <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">;</span>

<span class="token keyword">const</span> validConstString <span class="token operator">=</span> <span class="token string-literal"><span class="token string">&#39;</span><span class="token interpolation"><span class="token punctuation">$</span><span class="token expression">aConstNum</span></span><span class="token string"> </span><span class="token interpolation"><span class="token punctuation">$</span><span class="token expression">aConstBool</span></span><span class="token string"> </span><span class="token interpolation"><span class="token punctuation">$</span><span class="token expression">aConstString</span></span><span class="token string">&#39;</span></span><span class="token punctuation">;</span>
<span class="token comment">// const invalidConstString = &#39;$aNum $aBool $aString $aConstList&#39;;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,2),fn={href:"https://dart.dev/guides/libraries/library-tour#strings-and-regular-expressions",target:"_blank",rel:"noopener noreferrer"},wn=l(`<h2 id="booleans" tabindex="-1"><a class="header-anchor" href="#booleans" aria-hidden="true">#</a> 부울</h2><p>부울 값을 표현하기 위해 Dart는 <code>bool</code>이라는 타입을 사용합니다.<br> 컴파일타임 상수인 두가지 <code>true</code>와 <code>false</code> 부울 리터럴만 이 타입을 가질 수 있습니다.</p><p>Dart 타입 보장에서 <code>if (nonbooleanValue)</code>나 <code>assert (nonBooleanValue)</code>를 사용할 수 없다는걸 의미합니다.<br> 대신, 다음과 같이 명시적으로 값을 확인합니다.</p><div class="language-dart line-numbers-mode" data-ext="dart"><pre class="language-dart"><code><span class="token comment">// 공백 문자열을 확인합니다.</span>
<span class="token keyword">var</span> fullName <span class="token operator">=</span> <span class="token string-literal"><span class="token string">&#39;&#39;</span></span><span class="token punctuation">;</span>
<span class="token keyword">assert</span><span class="token punctuation">(</span>fullName<span class="token punctuation">.</span>isEmpty<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// 0인지 확인</span>
<span class="token keyword">var</span> hitPoints <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token keyword">assert</span><span class="token punctuation">(</span>hitPoints <span class="token operator">&lt;=</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// null인지 확인</span>
<span class="token keyword">var</span> unicorn<span class="token punctuation">;</span>
<span class="token keyword">assert</span><span class="token punctuation">(</span>unicorn <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// NaN인지 확인</span>
<span class="token keyword">var</span> iMeantToDoThis <span class="token operator">=</span> <span class="token number">0</span> <span class="token operator">/</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token keyword">assert</span><span class="token punctuation">(</span>iMeantToDoThis<span class="token punctuation">.</span>isNaN<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="runes-and-grapheme-clusters" tabindex="-1"><a class="header-anchor" href="#runes-and-grapheme-clusters" aria-hidden="true">#</a> 룬과 자소 클러스터</h2>`,5),xn={href:"https://api.dart.dev/stable/dart-core/Runes-class.html",target:"_blank",rel:"noopener noreferrer"},Sn=s("br",null,null,-1),Nn={href:"https://pub.dev/packages/characters",target:"_blank",rel:"noopener noreferrer"},Dn={href:"https://unicode.org/reports/tr29/#Grapheme_Cluster_Boundaries",target:"_blank",rel:"noopener noreferrer"},Tn=l("<p>유니코드는 세계 문자 시스템 전부에 사용되는 글자, 숫자, 심볼을 유일한 숫자값으로 정의합니다.<br> Dart 문자열은 UTF-16 코드 단위 시퀀스이기 때문에 스트링에 유니코드 코드포인트를 표현하려면 특별한 문법이 필요합니다.<br> 유니코드 코드포인트를 표현하는 일반적인 방법은 <code>\\uXXXX</code>이며 XXXX는 4자리 16진수 입니다.<br> 예로 들어, 하트 문자(♥)는 <code>\\u2665</code>입니다.<br> 4자리가 아닐 경우에는 중괄효로 값을 표시합니다.<br> 예로 들어, 웃는 이모지(😆)는 <code>\\u{1f606}</code>입니다.</p>",1),Cn=s("code",null,"characters",-1),qn=s("br",null,null,-1),An={href:"https://pub.dev/documentation/characters/latest/characters/Characters-class.html",target:"_blank",rel:"noopener noreferrer"},In=s("code",null,"Characters",-1),$n=s("br",null,null,-1),Bn=l(`<div class="language-dart line-numbers-mode" data-ext="dart"><pre class="language-dart"><code><span class="token keyword">import</span> <span class="token string-literal"><span class="token string">&#39;package:characters/characters.dart&#39;</span></span><span class="token punctuation">;</span>
<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
<span class="token keyword">var</span> hi <span class="token operator">=</span> <span class="token string-literal"><span class="token string">&#39;Hi 🇩🇰&#39;</span></span><span class="token punctuation">;</span>
<span class="token function">print</span><span class="token punctuation">(</span>hi<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">print</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&#39;The end of the string: </span><span class="token interpolation"><span class="token punctuation">\${</span><span class="token expression">hi<span class="token punctuation">.</span><span class="token function">substring</span><span class="token punctuation">(</span>hi<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span></span><span class="token punctuation">}</span></span><span class="token string">&#39;</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">print</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&#39;The last character: </span><span class="token interpolation"><span class="token punctuation">\${</span><span class="token expression">hi<span class="token punctuation">.</span>characters<span class="token punctuation">.</span>last</span><span class="token punctuation">}</span></span><span class="token string">\\n&#39;</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>환경에 따라 다르지만 출력은 다음과 같을 것 입니다.</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token variable">$dart</span> run bin/main.dart
Hi 🇩🇰
The end of the string: ???
The last character: 🇩🇰
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,3),En={href:"https://pub.dev/packages/characters/example",target:"_blank",rel:"noopener noreferrer"},On={href:"https://pub.dev/documentation/characters",target:"_blank",rel:"noopener noreferrer"},Pn=s("h2",{id:"symbols",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#symbols","aria-hidden":"true"},"#"),n(" 심볼")],-1),Rn={href:"https://api.dart.dev/stable/dart-core/Symbol-class.html",target:"_blank",rel:"noopener noreferrer"},Xn=s("br",null,null,-1),Ln=l(`<p>식별자의 심볼을 가져오려면 심볼 리터럴을 사용하면 되며 식별자 앞에 <code>#</code>을 사용하면 됩니다.</p><div class="language-dart line-numbers-mode" data-ext="dart"><pre class="language-dart"><code>#radix
#bar
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>심볼 리터럴은 컴파일타임 상수입니다.</p>`,3);function Un(Vn,jn){const e=p("ExternalLinkIcon"),t=p("RouterLink"),r=p("AdsenseB");return i(),d("div",null,[s("p",null,[n("원문 : "),s("a",k,[n("https://dart.dev/language/built-in-types"),a(e)])]),v,s("ul",null,[s("li",null,[a(t,{to:"/dart/language/built-in-types.html#numbers"},{default:o(()=>[n("숫자")]),_:1}),n("("),m,n(", "),b,n(")")]),s("li",null,[a(t,{to:"/dart/language/built-in-types.html#strings"},{default:o(()=>[n("문자열")]),_:1}),n("("),g,n(")")]),s("li",null,[a(t,{to:"/dart/language/built-in-types.html#booleans"},{default:o(()=>[n("부울")]),_:1}),n("("),h,n(")")]),s("li",null,[a(t,{to:"/dart/language/collections.html#lists"},{default:o(()=>[n("리스트")]),_:1}),n("("),_,n(", 배열이라고도 함)")]),s("li",null,[a(t,{to:"/dart/language/collections.html#sets"},{default:o(()=>[n("세트")]),_:1}),n("("),y,n(")")]),s("li",null,[a(t,{to:"/dart/language/collections.html#maps"},{default:o(()=>[n("맵")]),_:1}),n("("),f,n(")")]),s("li",null,[a(t,{to:"/dart/language/built-in-types.html#runes-and-grapheme-clusters"},{default:o(()=>[n("룬")]),_:1}),n("("),w,n(", 종종 "),x,n(" API로 대체됨)")]),s("li",null,[a(t,{to:"/dart/language/built-in-types.html#symbols"},{default:o(()=>[n("심볼")]),_:1}),n("("),S,n(")")]),N]),D,s("ul",null,[T,C,s("li",null,[q,n("와 "),A,n(" : "),a(t,{to:"/dart/language/async.html"},{default:o(()=>[n("비동기 지원")]),_:1}),n("에서 사용")]),s("li",null,[I,n(" : "),s("a",$,[n("for-in 루프"),a(e)]),n("나 동기적 "),a(t,{to:"/dart/language/functions.html#generators"},{default:o(()=>[n("제너레이터 함수")]),_:1}),n("에서 사용")]),B,E,O]),s("p",null,[P,n(", "),R,n(", "),X,n(" 및 "),L,n(" 클래스는 클래스 계층에서 특별한 역할을 가지고 있으며 "),s("a",U,[n("null 안전 이해하기"),a(e)]),n("를 참고하세요.")]),V,j,s("h3",F,[M,n(),s("a",z,[n("int"),a(e)])]),s("p",null,[n("정수값는 "),s("a",G,[n("플랫폼에 따라"),a(e)]),n(" 64비트보다 크지 않습니다."),H,n(" 네이티브 플랫폼에서는 값은 -2"),J,n(" 부터 2"),Y,n(" - 1까지 됩니다."),K,n(" 웹에서는 정수값은 JavaScript의 숫자(소수부분이 없는 64비트 부동소수점값)로 표현되며 -2"),Q,n("부터 2"),W,n(" - 1까지 됩니다.")]),s("h3",Z,[nn,n(),s("a",sn,[n("double"),a(e)])]),an,s("p",null,[en,n("와 "),tn,n("은 "),s("a",on,[ln,a(e)]),n("의 하위타입입니다."),pn,n(" num 타입은 +, -, /, * 와 같은 기본 연산자를 포함하며 또한 다른 함수에서 "),rn,n(", "),cn,n(", "),dn,n("와 같은 것도 찾을 수 있습니다."),un,n(" (>>와 같은 비트 연산자는 "),kn,n(" 클래스에 정의되어있습니다)"),vn,n(" 만약 num이나 그 하위 타입에 원하는게 없을 경우에는 "),s("a",mn,[n("dart:math"),a(e)]),n(" 라이브러리에 있을 수 있습니다.")]),bn,s("p",null,[n("더 많은 예제는 "),a(t,{to:"/dart/language/operators.html#bitwise-and-shift-operators"},{default:o(()=>[n("비트와 쉬프트 연산자")]),_:1}),n(" 절을 참고하세요.")]),gn,s("p",null,[n("더 자세한 정보는 "),s("a",hn,[n("Dart의 숫자"),a(e)]),n("를 참고하세요.")]),_n,s("p",null,[n("문자열에서 유니코드 문자를 어떻게 표현하는지에 대한 상세한 내용은 "),a(t,{to:"/dart/language/built-in-types.html#runes-and-grapheme-clusters"},{default:o(()=>[n("룬과 자소 클러스터")]),_:1}),n("를 참고하세요.")]),yn,s("p",null,[n("문자열을 사용하는데 더 자세한 정보는 "),s("a",fn,[n("문자열과 정규표현식"),a(e)]),n("을 참고하세요.")]),wn,s("p",null,[n("Dart에서 "),s("a",xn,[n("룬"),a(e)]),n("은 문자열의 유니코드 코드포인트을 보여줍니다."),Sn,s("a",Nn,[n("문자 패키지"),a(e)]),n("를 사용하여 "),s("a",Dn,[n("유니코드(확장) 자소 클러스터"),a(e)]),n("라고 하는 사용자 인식 문자를 보거나 조작할 수 있습니다.")]),Tn,s("p",null,[n("개별 유니코드 문자를 읽거나 쓰고 싶을 경우, 문자 패키지의 문자열에 정의된 "),Cn,n(" getter를 사용합니다."),qn,n(" 반환된 "),s("a",An,[In,a(e)]),n(" 객체는 자소 클러스터 시퀀스의 문자열입니다."),$n,n(" 문자 API를 사용한 예제입니다.")]),Bn,s("p",null,[n("문자열을 조작하기 위해 문자 패키지를 사용하는 자세한 내용은 문자 패키지의 "),s("a",En,[n("예제"),a(e)]),n("와 "),s("a",On,[n("API 참조"),a(e)]),n("를 참고하세요.")]),Pn,s("p",null,[s("a",Rn,[n("심볼"),a(e)]),n(" 객체는 Dart 프로그램에서 선언된 연산자 또는 식별자를 나타냅니다."),Xn,n(" 심볼을 사용할 필요가 없을 수 있지만 축소는 식별자 이름을 변경하지만 식별자 심볼은 변경하지 않기 때문에 이름으로 식별자를 참조하는 API에는 매우 중요합니다.")]),Ln,a(r)])}const Mn=c(u,[["render",Un],["__file","built-in-types.html.vue"]]);export{Mn as default};
