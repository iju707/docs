import{_ as c,r as l,o as d,c as p,a as n,b as a,d as s,w as r,e as i}from"./app-95e21c4a.js";const u={},h={href:"https://dart.dev/language/libraries",target:"_blank",rel:"noopener noreferrer"},k=n("code",null,"import",-1),b=n("code",null,"library",-1),_=n("br",null,null,-1),m=n("code",null,"_",-1),g=n("br",null,null,-1),v=n("code",null,"library",-1),f={href:"https://dart.dev/guides/packages",target:"_blank",rel:"noopener noreferrer"},y={class:"hint-container info"},w=n("p",{class:"hint-container-title"},"Info",-1),x=n("br",null,null,-1),E={href:"https://github.com/dart-lang/sdk/issues/33383",target:"_blank",rel:"noopener noreferrer"},L=n("h2",{id:"using-libraries",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#using-libraries","aria-hidden":"true"},"#"),a(" 라이브러리 사용하기")],-1),I=n("p",null,[a("다른 라이브러리 범위 내에 사용되는 한 라이브러리의 네임스페이스를 지정하기 위해 "),n("code",null,"import"),a("를 사용합니다.")],-1),D={href:"https://api.dart.dev/stable/dart-html",target:"_blank",rel:"noopener noreferrer"},R=n("code",null,"dart:html",-1),B=i(`<div class="language-dart line-numbers-mode" data-ext="dart"><pre class="language-dart"><code><span class="token keyword">import</span> <span class="token string-literal"><span class="token string">&#39;dart:html&#39;</span></span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><code>import</code>에 필요한 인자는 지정할 라이브러리의 URI 입니다.<br> 내장된 라이브러리는 URI가 <code>dart:</code>로 시작합니다.<br> 다른 라이브러리는 파일시스템 경로 또는 <code>package:</code> 구문을 사용합니다.<br><code>package:</code> 구문은 pub툴과 같은 패키지 관리자에 제공되는 라이브러리들을 지정합니다.<br> 예로 들면,</p><div class="language-dart line-numbers-mode" data-ext="dart"><pre class="language-dart"><code><span class="token keyword">import</span> <span class="token string-literal"><span class="token string">&#39;package:test/test.dart&#39;</span></span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><div class="hint-container note"><p class="hint-container-title">Note</p><p>URI는 단일 자원 식별자를 나타냅니다.<br> URLs (단일 자원 위치자)는 URI의 일반적인 종류입니다.</p></div><h3 id="specifying-a-library-prefix" tabindex="-1"><a class="header-anchor" href="#specifying-a-library-prefix" aria-hidden="true">#</a> 라이브러리 접두어 지정하기</h3><p>식별자가 중복되는 두개의 라이브러리를 가져올 경우, 접두사를 한개 또는 둘다 지정할 수 있습니다.<br> 예로 들어, 라이브러리1과 라이브러리2 둘다 Element 클래스를 가지고 있다면 코드에 다음과 같이 사용할 수 있습니다.</p><div class="language-dart line-numbers-mode" data-ext="dart"><pre class="language-dart"><code><span class="token keyword">import</span> <span class="token string-literal"><span class="token string">&#39;package:lib1/lib1.dart&#39;</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token string-literal"><span class="token string">&#39;package:lib2/lib2.dart&#39;</span></span> <span class="token operator">as</span> lib2<span class="token punctuation">;</span>

<span class="token comment">// 라이브러리1의 Element 사용하기</span>
<span class="token class-name">Element</span> element1 <span class="token operator">=</span> <span class="token class-name">Element</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// 라이브러리2의 Element 사용하기</span>
<span class="token class-name"><span class="token namespace">lib2<span class="token punctuation">.</span></span>Element</span> element2 <span class="token operator">=</span> <span class="token class-name"><span class="token namespace">lib2<span class="token punctuation">.</span></span>Element</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="importing-only-part-of-a-library" tabindex="-1"><a class="header-anchor" href="#importing-only-part-of-a-library" aria-hidden="true">#</a> 라이브러리의 일부만 가져오기</h3><p>라이브러리의 일부만 사용하려면 라이브러리의 선택적 가져오기를 하면 됩니다.<br> 에로 들면 다음과 같습니다.</p><div class="language-dart line-numbers-mode" data-ext="dart"><pre class="language-dart"><code><span class="token comment">// foo만 가져오기</span>
<span class="token keyword">import</span> <span class="token string-literal"><span class="token string">&#39;package:lib1/lib1.dart&#39;</span></span> <span class="token keyword">show</span> foo<span class="token punctuation">;</span>

<span class="token comment">// foo를 제외한 나머지 가져오기</span>
<span class="token keyword">import</span> <span class="token string-literal"><span class="token string">&#39;package:lib2/lib2.dart&#39;</span></span> <span class="token keyword">hide</span> foo<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="지연된-라이브러리-로딩하기" tabindex="-1"><a class="header-anchor" href="#지연된-라이브러리-로딩하기" aria-hidden="true">#</a> 지연된 라이브러리 로딩하기</h4><p>연기된 로딩(또한 지연 로딩)은 라이브러리가 필요하거나 필요할 때, 즉시 라이브러리를 로딩하는 웹앱을 가능하게 합니다.<br> 연기된 로딩을 사용하는 경우에 대한 예시입니다.</p><ul><li>웹 앱의 초기 기동 시간을 단축</li><li>예로 알고리즘의 선택적 구현을 시도하기 위한 A/B 테스트 수행</li><li>선택적 화면 또는 다이얼로그 같은 거의 사용되지 않는 기능을 로딩</li></ul>`,13),N={class:"hint-container warning"},U=n("p",{class:"hint-container-title"},"Note",-1),V=n("code",null,"dart compile js",-1),A=n("br",null,null,-1),F=n("br",null,null,-1),S={href:"https://github.com/dart-lang/sdk/issues/33118",target:"_blank",rel:"noopener noreferrer"},C={href:"https://github.com/dart-lang/sdk/issues/27776",target:"_blank",rel:"noopener noreferrer"},K=i(`<p>라이브러리를 지연된 로딩하기 위해 첫번째 가져오기를 <code>deferred as</code>를 사용해야합니다.</p><div class="language-dart line-numbers-mode" data-ext="dart"><pre class="language-dart"><code><span class="token keyword">import</span> <span class="token string-literal"><span class="token string">&#39;package:greetings/hello.dart&#39;</span></span> <span class="token keyword">deferred</span> <span class="token operator">as</span> hello<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>라이브러리가 필요할 때 라이브러리 식별자를 사용하여 <code>loadLibrary()</code>를 실행합니다.</p><div class="language-dart line-numbers-mode" data-ext="dart"><pre class="language-dart"><code><span class="token class-name">Future</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token keyword">void</span><span class="token punctuation">&gt;</span></span> <span class="token function">greet</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">async</span> <span class="token punctuation">{</span>
  <span class="token keyword">await</span> hello<span class="token punctuation">.</span><span class="token function">loadLibrary</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  hello<span class="token punctuation">.</span><span class="token function">printGreeting</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,4),T=n("code",null,"await",-1),j=n("br",null,null,-1),G=n("code",null,"async",-1),M=n("code",null,"await",-1),O=n("p",null,[a("라이브러리에 "),n("code",null,"loadLibrary()"),a("를 여러번 실행해도 문제 없습니다."),n("br"),a(" 라이브러리는 딱 한번 로딩됩니다.")],-1),P=n("p",null,"연기된 로딩을 사용할 때 아래를 꼭 기억하세요.",-1),q=n("li",null,[a("해당 파일에서 가져오기한 지연된 라이브러리의 상수는 상수가 아닙니다."),n("br"),a(" 이 상수는 연기된 라이브러리가 로딩될 때까지 존재하지 않는다는걸 기억하세요.")],-1),z=n("li",null,[a("해당 파일에서 가져오기한 지연된 라이브러리의 타입을 사용할 수 없습니다."),n("br"),a(" 대신, 지연된 라이브러리와 해당 파일에서 모두 가져오기를 한 라이브러리에 인터페이스 타입으로 이동하는 것을 고려하세요.")],-1),H=n("code",null,"deferred as namespace",-1),J=n("code",null,"loadLibrary()",-1),Q=n("br",null,null,-1),W=n("code",null,"loadLibrary()",-1),X={href:"https://dart.dev/guides/libraries/library-tour#future",target:"_blank",rel:"noopener noreferrer"},Y=n("code",null,"Future",-1),Z=n("h3",{id:"library-directive",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#library-directive","aria-hidden":"true"},"#"),a(),n("code",null,"library"),a(" 지시자")],-1),$={href:"https://dart.dev/guides/language/effective-dart/documentation#consider-writing-a-library-level-doc-comment",target:"_blank",rel:"noopener noreferrer"},nn=n("code",null,"library",-1),an=i(`<div class="language-dart line-numbers-mode" data-ext="dart"><pre class="language-dart"><code><span class="token comment">/// 테스트에 정말 좋은 라이브러리</span>
<span class="token metadata function">@TestOn</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&#39;browser&#39;</span></span><span class="token punctuation">)</span>
<span class="token keyword">library</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="implementing-libraries" tabindex="-1"><a class="header-anchor" href="#implementing-libraries" aria-hidden="true">#</a> 라이브러리 구현하기</h2>`,2),sn={href:"https://dart.dev/guides/libraries/create-library-packages",target:"_blank",rel:"noopener noreferrer"},en=n("ul",null,[n("li",null,"라이브러리 소스코드 구성하는 방법"),n("li",null,[n("code",null,"export"),a(" 지시자 사용하는 방법")]),n("li",null,[n("code",null,"part"),a(" 지시자를 언제 사용하는지")]),n("li",null,"다수의 플랫폼을 지원하기 위한 라이브러리를 구현할 때 조건부 가져오기와 내보내기를 사용하는 방법")],-1);function tn(ln,rn){const e=l("ExternalLinkIcon"),t=l("RouterLink"),o=l("AdsenseB");return d(),p("div",null,[n("p",null,[a("원문 : "),n("a",h,[a("https://dart.dev/language/libraries"),s(e)])]),n("p",null,[k,a("와 "),b,a(" 지시어는 모듈화, 공유화가 가능한 코드기반을 만드는데 도움이 됩니다."),_,a(" 라이브러리는 API만 제공하는게 아니고 공개범위의 단위입니다. (밑줄("),m,a(")로 시작한 식별자는 라이브러리 내에만 보입니다)"),g,a(" 모든 Dart의 앱은 "),s(t,{to:"/dart/language/libraries.html#library-directive"},{default:r(()=>[v]),_:1}),a(" 지시자를 사용하지 않아도 라이브러리입니다.")]),n("p",null,[a("라이브러리는 "),n("a",f,[a("패키지"),s(e)]),a("를 사용하여 배포할 수 있습니다.")]),n("div",y,[w,n("p",null,[a("If you’re curious why Dart uses underscores instead of access modifier keywords like public or private, see SDK issue 33383."),x,a(" 왜 Dart에서 public이나 private 같은 접근식별자를 사용하지 않고 밑줄을 사용하는지 궁금하다면 "),n("a",E,[a("SDK 이슈 33383"),s(e)]),a("을 참고하세요.")])]),L,I,n("p",null,[a("예로 들어, Dart 웹 앱은 일반적으로 "),n("a",D,[R,s(e)]),a(" 라이브러리를 사용하며 아래와 같이 가져올 수 있습니다.")]),B,n("div",N,[U,n("p",null,[V,a("만 연기된 로딩을 지원합니다."),A,a(" Flutter와 Dart VM은 연기된 로딩을 지원하지 않습니다."),F,a(" 자세한 정보는 "),n("a",S,[a("이슈 #33118"),s(e)]),a("과 "),n("a",C,[a("이슈 #27776"),s(e)]),a("을 살펴보세요.")])]),K,n("p",null,[a("이전 코드에서 "),T,a(" 키워드는 라이브러리가 로딩될 때까지 실행을 일시정지시킵니다."),j,G,a("와 "),M,a("에 대한 더 자세한 정보는 "),s(t,{to:"/dart/language/async.html"},{default:r(()=>[a("비동기 지원")]),_:1}),a("을 참고하세요.")]),O,P,n("ul",null,[q,z,n("li",null,[a("Dart는 명시적으로 "),H,a("를 사용해서 정의한 네임스페이스에 "),J,a("를 삽입합니다."),Q,W,a(" 함수는 "),n("a",X,[Y,s(e)]),a("를 반환합니다.")])]),Z,n("p",null,[a("라이브러리 수준의 "),n("a",$,[a("문서 주석"),s(e)]),a("이나 "),s(t,{to:"/dart/language/metadata.html"},{default:r(()=>[a("메타데이터 어노테이션")]),_:1}),a("을 열거하기 위해 파일의 시작부분에 "),nn,a(" 선언을 추가합니다.")]),an,n("p",null,[a("아래를 포함해서 라이브러리 패키지를 어떻게 구현하는지 가이드 받기 위해 "),n("a",sn,[a("라이브러리 패키지 생성하기"),s(e)]),a("를 살펴보세요.")]),en,s(o)])}const cn=c(u,[["render",tn],["__file","libraries.html.vue"]]);export{cn as default};
