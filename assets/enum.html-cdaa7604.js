import{_ as i,r as c,o as u,c as r,a as s,b as n,d as a,w as t,e as o}from"./app-95e21c4a.js";const d={},k={href:"https://dart.dev/language/enum",target:"_blank",rel:"noopener noreferrer"},m=s("p",null,"열거형, enums라고 종종 불리는 열거된 유형은 고정된 숫자의 상수값을 표현하는데 사용되는 클래스의 특수한 종류입니다.",-1),v={class:"hint-container note"},b=s("p",{class:"hint-container-title"},"Note",-1),h={href:"https://api.dart.dev/stable/dart-core/Enum-class.html",target:"_blank",rel:"noopener noreferrer"},g=s("code",null,"Enum",-1),_=s("br",null,null,-1),f=s("p",null,[n("추상클래스와 mixin은 명시적으로 "),s("code",null,"Enum"),n("을 구현 또는 확장할 수 있지만 enum 정의를 구현하거나 혼합하여도 어떠한 객체라도 해당 클래스와 mixin의 유형을 실제 구현할 수 없습니다.")],-1),w=o(`<h3 id="declaring-simple-enums" tabindex="-1"><a class="header-anchor" href="#declaring-simple-enums" aria-hidden="true">#</a> 단순 열거형 선언하기</h3><p>단순한 열거된 유형을 정의하는 것은 <code>enum</code> 키워드를 사용하고 열거할 값을 목록화 하면 됩니다.</p><div class="language-dart line-numbers-mode" data-ext="dart"><pre class="language-dart"><code><span class="token keyword">enum</span> <span class="token class-name">Color</span> <span class="token punctuation">{</span> red<span class="token punctuation">,</span> green<span class="token punctuation">,</span> blue <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div>`,3),x={class:"hint-container tip"},y=s("p",{class:"hint-container-title"},"Tips",-1),C=s("h3",{id:"declaring-enhanced-enums",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#declaring-enhanced-enums","aria-hidden":"true"},"#"),n(" 향상된 열거형 선언하기")],-1),V=s("p",null,"또한 Dart는 고정된 수로 제한하여 정의된 상수 인스턴스를 가지는 필드, 메소드, 정적 생성자의 클래스를 선언하기 위한 열거형 선언을 허용합니다.",-1),E=s("code",null,"final",-1),K={href:"https://api.dart.dev/stable/dart-core/Enum-class.html",target:"_blank",rel:"noopener noreferrer"},P=o("<li><code>index</code>, <code>hashCode</code>, 동등 연산자 <code>==</code>는 재정의될 수 없습니다.</li><li>자동으로 생성되는 정적 <code>values</code> getter와 충돌되기 때문에 <code>values</code>라는 이름을 가지는 멤버는 열거형에서 정의가 불가능합니다.</li><li>모든 enum의 인스턴스는 선언의 시작부에 선언이 되어야 하며, 최소 한개 이상의 인스턴스가 정의되어야 합니다.</li>",3),B=o(`<p>향상된 열거형의 인스턴스 메소드는 현재 enum 값을 참조하기 위해 <code>this</code>를 사용할 수 있습니다.</p><p>다수의 인스턴스, 인스턴스 변수, getter, 구현된 인터페이스를 가진 향상된 열거형을 정의하는 예제입니다.</p><div class="language-dart line-numbers-mode" data-ext="dart"><pre class="language-dart"><code><span class="token keyword">enum</span> <span class="token class-name">Vehicle</span> <span class="token keyword">implements</span> <span class="token class-name">Comparable</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Vehicle</span><span class="token punctuation">&gt;</span></span> <span class="token punctuation">{</span>
    <span class="token function">car</span><span class="token punctuation">(</span>tires<span class="token punctuation">:</span> <span class="token number">4</span><span class="token punctuation">,</span> passengers<span class="token punctuation">:</span> <span class="token number">5</span><span class="token punctuation">,</span> carbonPerKilometer<span class="token punctuation">:</span> <span class="token number">400</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
    <span class="token function">bus</span><span class="token punctuation">(</span>tires<span class="token punctuation">:</span> <span class="token number">6</span><span class="token punctuation">,</span> passengers<span class="token punctuation">:</span> <span class="token number">50</span><span class="token punctuation">,</span> carbonPerKilometer<span class="token punctuation">:</span> <span class="token number">800</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
    <span class="token function">bicycle</span><span class="token punctuation">(</span>tires<span class="token punctuation">:</span> <span class="token number">2</span><span class="token punctuation">,</span> passengers<span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">,</span> carbonPerKilometer<span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">const</span> <span class="token class-name">Vehicle</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
        required <span class="token keyword">this</span><span class="token punctuation">.</span>tires<span class="token punctuation">,</span>
        required <span class="token keyword">this</span><span class="token punctuation">.</span>passengers<span class="token punctuation">,</span>
        required <span class="token keyword">this</span><span class="token punctuation">.</span>carbonPerKilometer<span class="token punctuation">,</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">final</span> int tires<span class="token punctuation">;</span>
    <span class="token keyword">final</span> int passengers<span class="token punctuation">;</span>
    <span class="token keyword">final</span> int carbonPerKilometer<span class="token punctuation">;</span>

    int <span class="token keyword">get</span> carbonFootprint <span class="token operator">=</span><span class="token operator">&gt;</span> <span class="token punctuation">(</span>carbonPerKilometer <span class="token operator">/</span> passengers<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">round</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token metadata function">@override</span>
    int <span class="token function">compareTo</span><span class="token punctuation">(</span><span class="token class-name">Vehicle</span> other<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">&gt;</span> carbonFootprint <span class="token operator">-</span> other<span class="token punctuation">.</span>carbonFootprint<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,3),L={class:"hint-container note"},N=s("p",{class:"hint-container-title"},"버전노트",-1),F={href:"https://dart.dev/guides/language/evolution#language-versioning",target:"_blank",rel:"noopener noreferrer"},q=s("h3",{id:"using-enums",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#using-enums","aria-hidden":"true"},"#"),n(" 열거형 사용하기")],-1),R=o(`<div class="language-dart line-numbers-mode" data-ext="dart"><pre class="language-dart"><code><span class="token keyword">final</span> favoriteColor <span class="token operator">=</span> <span class="token class-name">Color</span><span class="token punctuation">.</span>blue<span class="token punctuation">;</span>
<span class="token keyword">if</span> <span class="token punctuation">(</span>favoriteColor <span class="token operator">==</span> <span class="token class-name">Color</span><span class="token punctuation">.</span>blue<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token function">print</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&#39;Your favorite color is blue!&#39;</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>열거형의 각 값은 <code>index</code> getter를 가지며 열거형 정의에서 값의 0부터 시작하는 위치를 반환합니다.<br> 예로 들어, 첫번째 값은 0 인덱스이며 두번째 값은 1 인덱스입니다.</p><div class="language-dart line-numbers-mode" data-ext="dart"><pre class="language-dart"><code><span class="token keyword">assert</span><span class="token punctuation">(</span><span class="token class-name">Color</span><span class="token punctuation">.</span>red<span class="token punctuation">.</span>index <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">assert</span><span class="token punctuation">(</span><span class="token class-name">Color</span><span class="token punctuation">.</span>green<span class="token punctuation">.</span>index <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">assert</span><span class="token punctuation">(</span><span class="token class-name">Color</span><span class="token punctuation">.</span>blue<span class="token punctuation">.</span>index <span class="token operator">==</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>열거된 값들의 목록을 가져오려면 열거형의 <code>values</code> 상수를 사용하면 됩니다.</p><div class="language-dart line-numbers-mode" data-ext="dart"><pre class="language-dart"><code><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Color</span><span class="token punctuation">&gt;</span></span> colors <span class="token operator">=</span> <span class="token class-name">Color</span><span class="token punctuation">.</span>values<span class="token punctuation">;</span>
<span class="token keyword">assert</span><span class="token punctuation">(</span>colors<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token class-name">Color</span><span class="token punctuation">.</span>blue<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div>`,5),T=o(`<div class="language-dart line-numbers-mode" data-ext="dart"><pre class="language-dart"><code><span class="token keyword">var</span> aColor <span class="token operator">=</span> <span class="token class-name">Color</span><span class="token punctuation">.</span>blue<span class="token punctuation">;</span>

<span class="token keyword">switch</span> <span class="token punctuation">(</span>aColor<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">case</span> <span class="token class-name">Color</span><span class="token punctuation">.</span>red<span class="token punctuation">:</span>
        <span class="token function">print</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&#39;Red as roses!&#39;</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">break</span><span class="token punctuation">;</span>
    <span class="token keyword">case</span> <span class="token class-name">Color</span><span class="token punctuation">.</span>green<span class="token punctuation">:</span>
        <span class="token function">print</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&#39;Green as grass!&#39;</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">break</span><span class="token punctuation">;</span>
    <span class="token keyword">default</span><span class="token punctuation">:</span> <span class="token comment">// 이 부분이 없으면 경고 발생</span>
        <span class="token function">print</span><span class="token punctuation">(</span>aColor<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// &#39;Color.blue&#39;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>Color.blue</code>에서 <code>blue</code>와 같은 열거된 값의 이름에 접근하려면 <code>.name</code> 속성을 사용하면 됩니다.</p><div class="language-dart line-numbers-mode" data-ext="dart"><pre class="language-dart"><code><span class="token function">print</span><span class="token punctuation">(</span><span class="token class-name">Color</span><span class="token punctuation">.</span>blue<span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// &#39;blue&#39;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>보통의 객체처럼 열겨형의 값에 대한 멤버도 접속할 수 있습니다.</p><div class="language-dart line-numbers-mode" data-ext="dart"><pre class="language-dart"><code><span class="token function">print</span><span class="token punctuation">(</span><span class="token class-name">Vehicle</span><span class="token punctuation">.</span>car<span class="token punctuation">.</span>carbonFootprint<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div>`,5);function A(I,D){const p=c("ExternalLinkIcon"),e=c("RouterLink"),l=c("AdsenseB");return u(),r("div",null,[s("p",null,[n("원문 : "),s("a",k,[n("https://dart.dev/language/enum"),a(p)])]),m,s("div",v,[b,s("p",null,[n("모든 enums는 자동으로 "),s("a",h,[g,a(p)]),n(" 클래스를 확장합니다."),_,n(" 또한 봉인되어있기 때문에 하위클래스, 구현, 혼합될 수 없으며 명시적 인스턴스화도 할 수 없습니다.")]),f]),w,s("div",x,[y,s("p",null,[n("복사-붙여넣기 오류를 방지하기 위하여 열거된 유형을 정의할 때 "),a(e,{to:"/dart/language/collections.html#lists"},{default:t(()=>[n("쉼표로 끝나기")]),_:1}),n("를 사용할 수 있습니다.")])]),C,V,s("p",null,[n("향상된 열거형 선언은 일반적인 "),a(e,{to:"/dart/language/classes.html"},{default:t(()=>[n("클래스")]),_:1}),n("의 문법을 따르되 몇가지 추가 요구사항이 있습니다.")]),s("ul",null,[s("li",null,[a(e,{to:"/dart/language/mixins.html"},{default:t(()=>[n("mixins")]),_:1}),n("로 추가된 것 포함하여 인스턴스 변수는 "),E,n("이어야 합니다.")]),s("li",null,[n("모든 "),a(e,{to:"/dart/language/constructors.html#constant-constructors"},{default:t(()=>[n("발생하는 생성자")]),_:1}),n("는 상수여야 합니다.")]),s("li",null,[a(e,{to:"/dart/language/constructors.html#factory-constructors"},{default:t(()=>[n("팩토리 생성자")]),_:1}),n("는 고정된 알려진 열거형 인스턴스 한개를 반환해야 합니다.")]),s("li",null,[s("a",K,[n("Enum"),a(p)]),n("은 자동으로 확장되므로 다른 클래스는 확장될 수 없습니다.")]),P]),B,s("div",L,[N,s("p",null,[n("향상된 열거형은 "),s("a",F,[n("언어버전"),a(p)]),n("이 최소 2.17이어야 합니다.")])]),q,s("p",null,[n("열거된 값에 접근하는 것은 다른 "),a(e,{to:"/dart/language/classes.html#class-variables-and-methods"},{default:t(()=>[n("정적 변수")]),_:1}),n("와 동일합니다.")]),R,s("p",null,[n("열거형을 "),a(e,{to:"/dart/language/control-flow.html#switch-and-case"},{default:t(()=>[n("switch 명령문")]),_:1}),n("에서 사용할 수 있으며 모든 열거형의 값을 다루지 않으면 경고가 발생합니다.")]),T,a(l)])}const S=i(d,[["render",A],["__file","enum.html.vue"]]);export{S as default};
