import{_ as d,r as c,o as l,c as k,a as n,b as s,d as a,f as i,g as u,w as o,e as t}from"./app-95e21c4a.js";const m={},v={href:"https://dart.dev/guides/language/language-tour#classes",target:"_blank",rel:"noopener noreferrer"},b=n("br",null,null,-1),h=n("code",null,"Null",-1),g={href:"https://api.dart.dev/stable/dart-core/Object-class.html",target:"_blank",rel:"noopener noreferrer"},y=n("br",null,null,-1),f={href:"https://dart.dev/null-safety/understanding-null-safety#top-and-bottom",target:"_blank",rel:"noopener noreferrer"},w=n("code",null,"Object?",-1),_=n("br",null,null,-1),x=n("a",{href:"#extension-methods"},"확장메소드",-1),P=t(`<h2 id="using-class-members" tabindex="-1"><a class="header-anchor" href="#using-class-members" aria-hidden="true">#</a> 클래스 멤버 사용하기</h2><p>객체는 함수와 데이터로 구성된 멤버가 있습니다. (각기 메소드와 인스턴스 변수)<br> 메소드를 호출할 때 객체 위에서 실행하므로 메소드는 객체의 함수와 데이터에 접근할 수 있습니다.</p><p>점(<code>.</code>)을 사용하여 인스턴스 변수나 메소드를 참조할 수 있습니다.</p><div class="language-dart line-numbers-mode" data-ext="dart"><pre class="language-dart"><code><span class="token keyword">var</span> p <span class="token operator">=</span> <span class="token class-name">Point</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// y의 값을 가져오기</span>
<span class="token keyword">assert</span><span class="token punctuation">(</span>p<span class="token punctuation">.</span>y <span class="token operator">==</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// p의 distanceTo() 실행하기</span>
double distance <span class="token operator">=</span> p<span class="token punctuation">.</span><span class="token function">distanceTo</span><span class="token punctuation">(</span><span class="token class-name">Point</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>.</code>대신 <code>?.</code>을 사용하여 왼쪽 피연산자가 null일때 예외가 발생함을 방지할 수 있습니다.</p><div class="language-dart line-numbers-mode" data-ext="dart"><pre class="language-dart"><code><span class="token comment">// p가 null이 아니면 그것의 y 값과 같게 변수가 설정됩니다.</span>
<span class="token keyword">var</span> a <span class="token operator">=</span> p<span class="token operator">?</span><span class="token punctuation">.</span>y<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="using-constructors" tabindex="-1"><a class="header-anchor" href="#using-constructors" aria-hidden="true">#</a> 생성자 사용하기</h2><p>생성자를 사용하여 객체를 만들 수 있습니다.<br> 생성자 이름은 <code>ClassName</code> 이나 <code>ClassName.identifier</code> 입니다.<br> 예로들어, 아래 코드는 <code>Point</code> 객체들을 <code>Point()</code>와 <code>Point.fromJson()</code> 생성자로 만드는 것 입니다.</p><div class="language-dart line-numbers-mode" data-ext="dart"><pre class="language-dart"><code><span class="token keyword">var</span> p1 <span class="token operator">=</span> <span class="token class-name">Point</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">var</span> p2 <span class="token operator">=</span> <span class="token class-name">Point</span><span class="token punctuation">.</span><span class="token function">fromJson</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token string-literal"><span class="token string">&#39;x&#39;</span></span><span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token string-literal"><span class="token string">&#39;y&#39;</span></span><span class="token punctuation">:</span> <span class="token number">2</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>아래 코드는 동일한 내용이지만 <code>new</code> 키워드를 생성자 이름전에 사용한 것 입니다.</p><div class="language-dart line-numbers-mode" data-ext="dart"><pre class="language-dart"><code><span class="token keyword">var</span> p1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Point</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">var</span> p2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Point</span><span class="token punctuation">.</span><span class="token function">fromJson</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token string-literal"><span class="token string">&#39;x&#39;</span></span><span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token string-literal"><span class="token string">&#39;y&#39;</span></span><span class="token punctuation">:</span> <span class="token number">2</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>몇몇 클래스는 <a href="#constant-constructors">상수 생성자</a>를 제공합니다.<br> 상수 생성자를 사용해서 컴파일타임 상수를 생성하려면 생성자 이름 앞에 <code>const</code> 키워드를 추가하면 됩니다.</p><div class="language-dart line-numbers-mode" data-ext="dart"><pre class="language-dart"><code><span class="token keyword">var</span> p <span class="token operator">=</span> <span class="token keyword">const</span> <span class="token class-name">ImmutablePoint</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>두개의 동일한 컴파일타임 상수를 생성하면 한개의 정식 인스턴스가 생성됩니다.</p><div class="language-dart line-numbers-mode" data-ext="dart"><pre class="language-dart"><code><span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token keyword">const</span> <span class="token class-name">ImmutablePoint</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">var</span> b <span class="token operator">=</span> <span class="token keyword">const</span> <span class="token class-name">ImmutablePoint</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">assert</span><span class="token punctuation">(</span><span class="token function">identical</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 동일한 인스턴스 입니다.</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>상수 문맥에서 생성자나 리터럴 전에 <code>const</code> 키워드를 생략할 수 있습니다.<br> 아래 코드 예제에서 상수 맵을 만드는 것 입니다.</p><div class="language-dart line-numbers-mode" data-ext="dart"><pre class="language-dart"><code><span class="token comment">// 다수의 const 키워드가 있습니다.</span>
<span class="token keyword">const</span> pointAndLine <span class="token operator">=</span> <span class="token keyword">const</span> <span class="token punctuation">{</span>
    <span class="token string-literal"><span class="token string">&#39;point&#39;</span></span><span class="token punctuation">:</span> <span class="token keyword">const</span> <span class="token punctuation">[</span><span class="token keyword">const</span> <span class="token class-name">ImmutablePoint</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
    <span class="token string-literal"><span class="token string">&#39;line&#39;</span></span><span class="token punctuation">:</span> <span class="token keyword">const</span> <span class="token punctuation">[</span><span class="token keyword">const</span> <span class="token class-name">ImmutablePoint</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token class-name">ImmutablePoint</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">11</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>모두 생략해도 되나 첫번째 <code>const</code> 키워드는 사용해야 합니다.</p><div class="language-dart line-numbers-mode" data-ext="dart"><pre class="language-dart"><code><span class="token comment">// 상수 문맥을 시작하는 한개의 const만 존재</span>
<span class="token keyword">const</span> pointAndLine <span class="token operator">=</span> <span class="token punctuation">{</span>
    <span class="token string-literal"><span class="token string">&#39;point&#39;</span></span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token class-name">ImmutablePoint</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
    <span class="token string-literal"><span class="token string">&#39;line&#39;</span></span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token class-name">ImmutablePoint</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token class-name">ImmutablePoint</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">11</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>상수 생성자가 상수 문맥 밖에 있고 <code>const</code> 키워드 없이 실행된다면, <strong>상수가 아닌 객체</strong>가 생성됩니다.</p><div class="language-dart line-numbers-mode" data-ext="dart"><pre class="language-dart"><code><span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token keyword">const</span> <span class="token class-name">ImmutablePoint</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 상수가 생성됨</span>
<span class="token keyword">var</span> b <span class="token operator">=</span> <span class="token class-name">ImmutablePoint</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 상수로 생성안됨</span>

<span class="token keyword">assert</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">identical</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 동일한 인스턴스가 아님</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="getting-an-objects-type" tabindex="-1"><a class="header-anchor" href="#getting-an-objects-type" aria-hidden="true">#</a> 객체 유형 가져오기</h2>`,22),C={href:"https://api.dart.dev/stable/dart-core/Type-class.html",target:"_blank",rel:"noopener noreferrer"},S=n("code",null,"Type",-1),I=n("code",null,"Object",-1),M=n("code",null,"runtimeType",-1),V=t(`<div class="language-dart line-numbers-mode" data-ext="dart"><pre class="language-dart"><code><span class="token function">print</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&#39;a의 유형은 </span><span class="token interpolation"><span class="token punctuation">\${</span><span class="token expression">a<span class="token punctuation">.</span>runtimeType</span><span class="token punctuation">}</span></span><span class="token string">입니다.&#39;</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><div class="hint-container warning"><p class="hint-container-title">Note</p><p>객체의 유형을 테스트할 때 <code>runtimeType</code> 보다 <a href="#type-test-operators">유형 테스트 연산자</a>를 사용하세요.<br> 운영 환경에서 <code>object is Type</code> 테스트가 <code>object.runtimeType == Type</code> 테스트보다 안전합니다.</p></div><p>여기까지 클래스를 어떻게 사용하는지 살펴봤습니다.<br> 아래부터는 클래스를 어떻게 구현하는지 살펴보겠습니다.</p><h2 id="instance-variables" tabindex="-1"><a class="header-anchor" href="#instance-variables" aria-hidden="true">#</a> 인스턴스 변수</h2><p>인스턴스 변수를 어떻게 선언하는지 보여줍니다.</p><div class="language-dart line-numbers-mode" data-ext="dart"><pre class="language-dart"><code><span class="token keyword">class</span> <span class="token class-name">Point</span> <span class="token punctuation">{</span>
    double<span class="token operator">?</span> x<span class="token punctuation">;</span> <span class="token comment">// 인스턴스 변수 x를 선언, null로 초기화</span>
    double<span class="token operator">?</span> y<span class="token punctuation">;</span> <span class="token comment">// y를 선언, null로 초기화</span>
    double z <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token comment">// z를 선언, 0으로 초기화</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>모든 초기화되지 않은 인스턴스 변수는 <code>null</code> 값을 가집니다.</p><p>모든 인스턴스 변수는 암시적인 getter 메소드를 생성합니다.<br> 또한 final이 아닌 인스턴스 변수와 초기화없는 <code>late final</code> 인스턴스 변수는 암시적인 setter 메소드를 생성합니다.<br> 자세한 정보는 <a href="#getters-and-setters">getter와 setter</a>를 참고하세요.</p><p><code>late</code>가 아닌 인스턴스 변수를 선언한 곳에 초기화하려면 값은 생성자나 초기화 목록이 실행되기 전인 인스턴스가 생성될 때 설정됩니다.</p><div class="language-dart line-numbers-mode" data-ext="dart"><pre class="language-dart"><code><span class="token keyword">class</span> <span class="token class-name">Point</span> <span class="token punctuation">{</span>
    double<span class="token operator">?</span> x<span class="token punctuation">;</span> <span class="token comment">// 인스턴스 변수 x를 선언, null로 초기화</span>
    double<span class="token operator">?</span> y<span class="token punctuation">;</span> <span class="token comment">// y를 선언, null로 초기화</span>
<span class="token punctuation">}</span>

<span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">var</span> point <span class="token operator">=</span> <span class="token class-name">Point</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    point<span class="token punctuation">.</span>x <span class="token operator">=</span> <span class="token number">4</span><span class="token punctuation">;</span> <span class="token comment">// x의 setter 메소드를 사용</span>
    <span class="token keyword">assert</span><span class="token punctuation">(</span>point<span class="token punctuation">.</span>x <span class="token operator">==</span> <span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// x의 getter 메소드를 사용</span>
    <span class="token function">aasert</span><span class="token punctuation">(</span>point<span class="token punctuation">.</span>y <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 기본값은 null</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>정확히 한번만 설정이 가능한 경우 인스턴스 변수는 <code>final</code>이 됩니다.<br> 선언부에서 <code>final</code>이거나 <code>late</code>가 아닌 인스턴스 변수의 초기화는 생성자 매개변수나 생성자 <a href="#initializer-list">초기화 목록</a>을 사용합니다.</p><div class="language-dart line-numbers-mode" data-ext="dart"><pre class="language-dart"><code><span class="token keyword">class</span> <span class="token class-name">ProfileMark</span> <span class="token punctuation">{</span>
    <span class="token keyword">final</span> <span class="token class-name">String</span> name<span class="token punctuation">;</span>
    <span class="token keyword">final</span> <span class="token class-name">DateTime</span> start <span class="token operator">=</span> <span class="token class-name">DateTime</span><span class="token punctuation">.</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token class-name">ProfileMark</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">ProfileMark</span><span class="token punctuation">.</span><span class="token function">unnamed</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">:</span> name <span class="token operator">=</span> <span class="token string-literal"><span class="token string">&#39;&#39;</span></span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>final</code> 인스턴스 변수의 값을 생성자 본문이 시작한 이후 할당해야 할 경우 다음의 한가지를 사용하면 됩니다.</p>`,13),N=n("li",null,[n("a",{href:"#factory-constructors"},"팩토리 생성자"),s("를 사용")],-1),T=n("code",null,"late final",-1),j={href:"https://dart.dev/guides/language/effective-dart/design#avoid-public-late-final-fields-without-initializers",target:"_blank",rel:"noopener noreferrer"},D=n("code",null,"late final",-1),L=t(`<h2 id="constructors" tabindex="-1"><a class="header-anchor" href="#constructors" aria-hidden="true">#</a> 생성자</h2><p>클래스와 동일한 이름으로 함수를 생성하면 생성자를 선언할 수 있습니다.(추가 선택적으로, <a href="#named-constructors">명명된 생성자</a>에 묘사된 추가적 식별자도 가능)<br> 생성자의 대부분 일반적인 유형은 생성을 위한 생성자로, 클래스의 새로운 인스턴스를 만들게 됩니다.</p><div class="language-dart line-numbers-mode" data-ext="dart"><pre class="language-dart"><code><span class="token keyword">class</span> <span class="token class-name">Point</span> <span class="token punctuation">{</span>
    double x <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    double y <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token class-name">Point</span><span class="token punctuation">(</span>double x<span class="token punctuation">,</span> double y<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// 인스턴스 변수를 초기화 하기 위해</span>
        <span class="token comment">// 좀더 나은 방식으로 형식 매개변수로 초기화하기를 참고하세요</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>x <span class="token operator">=</span> x<span class="token punctuation">;</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>y <span class="token operator">=</span> y<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>this</code> 키워드는 현재 인스턴스를 참조합니다.</p><div class="hint-container note"><p class="hint-container-title">Note</p><p>이름에 충돌이 있을 경우에만 <code>this</code> 키워드를 사용하세요.<br> 그렇지 않으면 Dart는 <code>this</code>를 생략합니다.</p></div><h3 id="initializing-formal-parameters" tabindex="-1"><a class="header-anchor" href="#initializing-formal-parameters" aria-hidden="true">#</a> 형식 매개변수로 초기화하기</h3><p>생성자의 인자를 인스턴스 변수에 할당하는 패턴은 매우 일반적이며, Dart는 형식 매개변수로 초기화하기를 사용하여 더 쉽게 만들어줍니다.</p><p>매개변수 초기화는 또한 초기화되거나 기본값이 제공되어야 하는 null이 아닌 또는 <code>final</code> 인스턴스 변수의 초기화에도 사용됩니다.</p><div class="language-dart line-numbers-mode" data-ext="dart"><pre class="language-dart"><code><span class="token keyword">class</span> <span class="token class-name">Point</span> <span class="token punctuation">{</span>
    <span class="token keyword">final</span> double x<span class="token punctuation">;</span>
    <span class="token keyword">final</span> double y<span class="token punctuation">;</span>

    <span class="token comment">// 생성자 본문이 실행되기 전에</span>
    <span class="token comment">// x와 y 인스턴스 변수를 설정합니다.</span>
    <span class="token class-name">Point</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>x<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>y<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>형식 초기화에 도입된 변수들은 암묵적 final이며 초기화 목록 범위 내에서만 사용가능합니다.</p><h3 id="default-constructors" tabindex="-1"><a class="header-anchor" href="#default-constructors" aria-hidden="true">#</a> 기본 생성자</h3><p>생성자를 선언하지 않으면 기본 생성자를 제공합니다.<br> 기본 생성자는 인자가 없으며 부모클래스의 인자없는 생성자를 실행합니다.</p><h3 id="constructors-arent-inherited" tabindex="-1"><a class="header-anchor" href="#constructors-arent-inherited" aria-hidden="true">#</a> 생성자는 상속되지 않음</h3><p>하위클래스는 상위클래스의 생성자를 상속하지는 않습니다.<br> 생성자를 선언하지 않은 하위클래스는 기본 생성자(인자 없음, 이름 없음)만 가지게 됩니다.</p><h3 id="named-constructors" tabindex="-1"><a class="header-anchor" href="#named-constructors" aria-hidden="true">#</a> 명명된 생성자</h3><p>클래스에 대해 여러 생성자를 구현하거나 추가적인 명확함을 제공하려면 명명된 생성자를 사용합니다.</p><div class="language-dart line-numbers-mode" data-ext="dart"><pre class="language-dart"><code><span class="token keyword">const</span> double xOrigin <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> double yOrigin <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>

<span class="token keyword">class</span> <span class="token class-name">Point</span> <span class="token punctuation">{</span>
    <span class="token keyword">final</span> double x<span class="token punctuation">;</span>
    <span class="token keyword">final</span> double y<span class="token punctuation">;</span>

    <span class="token class-name">Point</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>x<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>y<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">// 명명된 생성자</span>
    <span class="token class-name">Point</span><span class="token punctuation">.</span><span class="token function">origin</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
        <span class="token punctuation">:</span> x <span class="token operator">=</span> xOrigin<span class="token punctuation">,</span>
          y <span class="token operator">=</span> yOrigin<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>생성자는 상속이 되지 않음을 기억하며 부모클래스의 명명된 생성자는 하위클래스에 상속되지 않습니다.<br> 부모클래스에 정의된 명명된 생성자를 하위클래스에 생성하려면 반드시 하위클래스에 생성자를 구현해야합니다.</p><h3 id="invoking-a-non-default-superclass-constructor" tabindex="-1"><a class="header-anchor" href="#invoking-a-non-default-superclass-constructor" aria-hidden="true">#</a> 기본아닌 상위클래스 생성자 실행하기</h3><p>기본적으로 하위클래스의 생성자는 상위클래스의 이름없고 인자가 없는 생성자를 호출합니다.<br> 상위클래스의 생성자는 생성자 본문의 시작에 호출됩니다.<br><a href="#initializer-list">초기화 목록</a>도 사용되었다면, 상위클래스가 호출되기전에 실행합니다.<br> 요약하자면 실행의 순서는 다음과 같습니다.</p><ol><li>초기화 목록</li><li>상위클래스의 인자없는 생성자</li><li>메인 클래스의 인자없는 생성자</li></ol><p>상위클래스가 이름없고 인자가 없는 생성자가 없다면, 상위클래스의 생성자 중 하나를 수동으로 호출해야합니다.<br> 생성자 본문 전에(누구든지) 콜론(<code>:</code>) 이후 상위클래스 생성자를 명시합니다.</p><p>아래 예제에서 Employee 클래스의 생성자는 상위클래스인 Person의 명명된 생성자를 호출합니다.<br> 코드를 실행하기 위해 <strong>Run</strong> 버튼을 클릭해보세요.</p>`,23),z=t(`<pre>    <code class="language-run-dartpad:theme-light:mode-dart:ga_id-example1:width-100%:height-400px">
class Person {
  String? firstName;

  Person.fromJson(Map data) {
    print(&#39;in Person&#39;);
  }
}

class Employee extends Person {
  // Person does not have a default constructor;
  // you must call super.fromJson().
  Employee.fromJson(super.data) : super.fromJson() {
    print(&#39;in Employee&#39;);
  }
}

void main() {
  var employee = Employee.fromJson({});
  print(employee);
  // Prints:
  // in Person
  // in Employee
  // Instance of &#39;Employee&#39;
}
    </code>
</pre><p>상위클래스 생성자의 인자는 생성자가 실행되기전에 수행되므로 인자는 함수호출처럼 표현식이 가능합니다.</p><div class="language-dart line-numbers-mode" data-ext="dart"><pre class="language-dart"><code><span class="token keyword">class</span> <span class="token class-name">Employee</span> <span class="token keyword">extends</span> <span class="token class-name">Person</span> <span class="token punctuation">{</span>
    <span class="token class-name">Employee</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">:</span> <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">fromJson</span><span class="token punctuation">(</span><span class="token function">fetchDefaultData</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// ...</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="hint-container warning"><p class="hint-container-title">Note</p><p>상위클래스 생성자의 인자는 <code>this</code>에 접근할 수 없습니다.<br> 예로 들어, 인자는 정적 메소드를 호출할순 있지만 인스턴스 메소드는 불가합니다.</p></div><p>상위 생성자의 호출에 각각 파라미터를 수동으로 전달하지 않기 위하여, 지정된 또는 기본 상위클래스 생성자상위-초기화 매개변수를 사용할 수 있습니다.<br> 이 기능은 리디렉션 생성자와 함께 사용할 수 없습니다.<br> 상위 초기화 매개변수는 <a href="#initializing-formal-parameters">형식 매개변수로 초기화하기</a>의 구문과 의미가 유사합니다.</p><div class="language-dart line-numbers-mode" data-ext="dart"><pre class="language-dart"><code><span class="token keyword">class</span> <span class="token class-name">Vector2d</span> <span class="token punctuation">{</span>
    <span class="token keyword">final</span> double x<span class="token punctuation">;</span>
    <span class="token keyword">final</span> double y<span class="token punctuation">;</span>

    <span class="token class-name">Vector2d</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>x<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>y<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">class</span> <span class="token class-name">Vector3d</span> <span class="token keyword">extends</span> <span class="token class-name">Vector2d</span> <span class="token punctuation">{</span>
    <span class="token keyword">final</span> double z<span class="token punctuation">;</span>

    <span class="token comment">// x와 y 매개변수를 기본 상위 생성자에 전달하는 것은 다음과 같습니다.</span>
    <span class="token comment">// Vector3d(final double x, final double y, this.z) : super(x, y);</span>
    <span class="token class-name">Vector3d</span><span class="token punctuation">(</span><span class="token keyword">super</span><span class="token punctuation">.</span>x<span class="token punctuation">,</span> <span class="token keyword">super</span><span class="token punctuation">.</span>y<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>z<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>상위 생성자 호출에 이미 위치인수가 있는 경우 상위 초기화 매개변수는 위치할 수 없지만 항상 다음과 같이 이름으로 지정할 수 있습니다.</p><div class="language-dart line-numbers-mode" data-ext="dart"><pre class="language-dart"><code><span class="token keyword">class</span> <span class="token class-name">Vector2d</span> <span class="token punctuation">{</span>
    <span class="token comment">// ...</span>

    <span class="token class-name">Vector2d</span><span class="token punctuation">.</span><span class="token function">named</span><span class="token punctuation">(</span><span class="token punctuation">{</span>required <span class="token keyword">this</span><span class="token punctuation">.</span>x<span class="token punctuation">,</span> required <span class="token keyword">this</span><span class="token punctuation">.</span>y<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">class</span> <span class="token class-name">Vector3d</span> <span class="token keyword">extends</span> <span class="token class-name">Vector2d</span> <span class="token punctuation">{</span>
    <span class="token comment">// ...</span>

    <span class="token comment">// y 매개변수를 명명된 상위 생성자로 전달한 예시</span>
    <span class="token comment">// Vector3d.yzPlane({required double y, required this.z})</span>
    <span class="token comment">//      : super.named(x: 0, y: y);</span>
    <span class="token class-name">Vector3d</span><span class="token punctuation">.</span><span class="token function">yzPlane</span><span class="token punctuation">(</span><span class="token punctuation">{</span>required <span class="token keyword">super</span><span class="token punctuation">.</span>y<span class="token punctuation">,</span> required <span class="token keyword">this</span><span class="token punctuation">.</span>z<span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token punctuation">:</span> <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">named</span><span class="token punctuation">(</span>x<span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,8),E={class:"hint-container note"},O=n("p",{class:"hint-container-title"},"버전노트",-1),A={href:"https://dart.dev/guides/language/evolution#language-versioning",target:"_blank",rel:"noopener noreferrer"},B=n("br",null,null,-1),J=t(`<h3 id="initializer-list" tabindex="-1"><a class="header-anchor" href="#initializer-list" aria-hidden="true">#</a> 초기화 목록</h3><p>상위클래스 생성자를 실행하는것 외에도 생성자 본문이 실행하기 전에 인스턴스 변수를 초기화할 수 있습니다.<br> 초기화를 쉼표로 구분합니다.</p><div class="language-dart line-numbers-mode" data-ext="dart"><pre class="language-dart"><code><span class="token comment">// 초기화 목록은 생성자 본문이 시작하기 전에 인스턴스 변수를 설정합니다.</span>
<span class="token class-name">Point</span><span class="token punctuation">.</span><span class="token function">fromJson</span><span class="token punctuation">(</span><span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> double<span class="token punctuation">&gt;</span></span> json<span class="token punctuation">)</span>
    <span class="token punctuation">:</span> x <span class="token operator">=</span> json<span class="token punctuation">[</span><span class="token string-literal"><span class="token string">&#39;x&#39;</span></span><span class="token punctuation">]</span><span class="token operator">!</span><span class="token punctuation">,</span>
      y <span class="token operator">=</span> json<span class="token punctuation">[</span><span class="token string-literal"><span class="token string">&#39;y&#39;</span></span><span class="token punctuation">]</span><span class="token operator">!</span> <span class="token punctuation">{</span>
    <span class="token function">print</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&#39;In Point.fromJson(): (</span><span class="token interpolation"><span class="token punctuation">$</span><span class="token expression">x</span></span><span class="token string"> </span><span class="token interpolation"><span class="token punctuation">$</span><span class="token expression">y</span></span><span class="token string">)&#39;</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="hint-container warning"><p class="hint-container-title">Note</p><p>초기화의 우편은 <code>this</code> 에 접근할 수 없습니다.</p></div><p>개발중에는 초기화목록에서 <code>assert</code>를 활용하여 입력를 검증할 수 있습니다.</p><div class="language-dart line-numbers-mode" data-ext="dart"><pre class="language-dart"><code><span class="token class-name">Point</span><span class="token punctuation">.</span><span class="token function">withAssert</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>x<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>y<span class="token punctuation">)</span> <span class="token punctuation">:</span> <span class="token keyword">assert</span><span class="token punctuation">(</span>x <span class="token operator">&gt;=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token function">print</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&#39;In Point.withAssert(): (</span><span class="token interpolation"><span class="token punctuation">$</span><span class="token expression">x</span></span><span class="token string">, </span><span class="token interpolation"><span class="token punctuation">$</span><span class="token expression">y</span></span><span class="token string">)&#39;</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>초기화 목록은 final 필드를 설정할 때 편리합니다.<br> 아래 예제는 3개의 final 필드를 초기화 목록에서 초기화 합니다.<br><strong>Run</strong>을 클릭하면 코드를 실행합니다.</p>`,7),q=t(`<pre>    <code class="language-run-dartpad:theme-light:mode-dart:ga_id-example1:width-100%:height-400px">
import &#39;dart:math&#39;;

class Point {
  final double x;
  final double y;
  final double distanceFromOrigin;

  Point(double x, double y)
      : x = x,
        y = y,
        distanceFromOrigin = sqrt(x * x + y * y);
}

void main() {
  var p = Point(2, 3);
  print(p.distanceFromOrigin);
}
    </code>
</pre><h3 id="redirecting-constructors" tabindex="-1"><a class="header-anchor" href="#redirecting-constructors" aria-hidden="true">#</a> 리디렉션 생성자</h3><p>때때로 동일 클래스의 다른 생성자에게 리디렉션할 목적으로 생성자를 사용할 수 있습니다.<br> 콜론 다음에 생성자 호출(클래스 이름대신 <code>this</code>를 사용)하고 리디렉션 생성자의 본문은 비어있습니다.</p><div class="language-dart line-numbers-mode" data-ext="dart"><pre class="language-dart"><code><span class="token keyword">class</span> <span class="token class-name">Point</span> <span class="token punctuation">{</span>
    double x<span class="token punctuation">,</span> y<span class="token punctuation">;</span>

    <span class="token comment">// 이 클래스의 메인 생성자</span>
    <span class="token class-name">Point</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>x<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>y<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">// 메인 생성자에게 위임</span>
    <span class="token class-name">Point</span><span class="token punctuation">.</span><span class="token function">alongXAxis</span><span class="token punctuation">(</span>double x<span class="token punctuation">)</span> <span class="token punctuation">:</span> <span class="token keyword">this</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="constant-constructors" tabindex="-1"><a class="header-anchor" href="#constant-constructors" aria-hidden="true">#</a> 상수 생성자</h3><p>클래스가 절대 변경되지 않는 객체를 생성한다면 이 객체를 컴파일타임 상수로 만들 수 있습니다.<br> 이것을 하기 위해 <code>const</code> 생성자를 정의하고 모든 변수를 <code>final</code>로 만듭니다.</p><div class="language-dart line-numbers-mode" data-ext="dart"><pre class="language-dart"><code><span class="token keyword">class</span> <span class="token class-name">ImmutablePoint</span> <span class="token punctuation">{</span>
    <span class="token keyword">static</span> <span class="token keyword">const</span> <span class="token class-name">ImmutablePoint</span> origin <span class="token operator">=</span> <span class="token class-name">ImmutablePoint</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">final</span> double x<span class="token punctuation">,</span> y<span class="token punctuation">;</span>

    <span class="token keyword">const</span> <span class="token class-name">ImmutablePoint</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>x<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>y<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>상수 생성자는 항상 상수를 생성하지는 않습니다.<br> 자세한 내용은 <a href="#using-constructors">생성자 사용하기</a>를 참고하세요.</p><h3 id="factory-constructors" tabindex="-1"><a class="header-anchor" href="#factory-constructors" aria-hidden="true">#</a> 팩토리 생성자</h3><p>클래스의 생성자가 항상 새로운 인스턴스를 생성하지 않는다면 <code>factory</code> 키워드를 사용합니다.<br> 예로 들어, 팩토리 생성자는 캐시에서 인스턴스를 반환하거나 하위유형의 인스턴스를 반환합니다.<br> 팩토리 생성자의 다른 사용경우는 초기화 목록에서 다루지 못하는 로직을 사용하여 final 변수를 초기화하는 경우입니다.</p>`,10),$={class:"hint-container tip"},R=n("p",{class:"hint-container-title"},"Tips",-1),K={href:"https://dart.dev/guides/language/effective-dart/design#avoid-public-late-final-fields-without-initializers",target:"_blank",rel:"noopener noreferrer"},F=t(`<p>아래 예제에서 <code>Logger</code> 팩토리 생성자는 캐시에서 객체를 반환하며, <code>Logger.fromJson</code> 팩토리 생성자는 JSON 객체에서 final 변수를 초기화합니다.</p><div class="language-dart line-numbers-mode" data-ext="dart"><pre class="language-dart"><code><span class="token keyword">class</span> <span class="token class-name">Logger</span> <span class="token punctuation">{</span>
    <span class="token keyword">final</span> <span class="token class-name">String</span> name<span class="token punctuation">;</span>
    bool mute <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>

    <span class="token comment">// _cache는 이름앞에 _가 있어서 라이브러리 전용입니다.</span>
    <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Logger</span><span class="token punctuation">&gt;</span></span> _cache <span class="token operator">=</span> <span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Logger</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>

    <span class="token keyword">factory</span> <span class="token class-name">Logger</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> _cache<span class="token punctuation">.</span><span class="token function">putIfAbsent</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">&gt;</span> <span class="token class-name">Logger</span><span class="token punctuation">.</span><span class="token function">_internal</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">factory</span> <span class="token class-name">Logger</span><span class="token punctuation">.</span><span class="token function">fromJson</span><span class="token punctuation">(</span><span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">&gt;</span></span> json<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token class-name">Logger</span><span class="token punctuation">(</span>json<span class="token punctuation">[</span><span class="token string-literal"><span class="token string">&#39;name&#39;</span></span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token class-name">Logger</span><span class="token punctuation">.</span><span class="token function">_internal</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">void</span> <span class="token function">log</span><span class="token punctuation">(</span><span class="token class-name">String</span> msg<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>mute<span class="token punctuation">)</span> <span class="token function">print</span><span class="token punctuation">(</span>msg<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="hint-container note"><p class="hint-container-title">Note</p><p>팩토리 생성자는 <code>this</code>에 접근할 수 없습니다.</p></div><p>팩토리 생성자를 실행하는 것은 다른 생성자와 비슷합니다.</p><div class="language-dart line-numbers-mode" data-ext="dart"><pre class="language-dart"><code><span class="token keyword">var</span> logger <span class="token operator">=</span> <span class="token class-name">Logger</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&#39;UI&#39;</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
logger<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&#39;Button clicked&#39;</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">var</span> logMap <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string-literal"><span class="token string">&#39;name&#39;</span></span><span class="token punctuation">:</span> <span class="token string-literal"><span class="token string">&#39;UI&#39;</span></span><span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token keyword">var</span> loggerJson <span class="token operator">=</span> <span class="token class-name">Logger</span><span class="token punctuation">.</span><span class="token function">fromJson</span><span class="token punctuation">(</span>logMap<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="methods" tabindex="-1"><a class="header-anchor" href="#methods" aria-hidden="true">#</a> 메소드</h2><p>메소드는 객체의 행동을 제공하는 함수입니다.</p><h3 id="instance-methods" tabindex="-1"><a class="header-anchor" href="#instance-methods" aria-hidden="true">#</a> 인스턴스 메소드</h3><p>객체의 인스턴스 메소드는 인스턴스 변수와 <code>this</code>에 접근할 수 있습니다.<br> 아래 예제의 <code>distanceTo()</code> 메소드는 인스턴스 메소드의 예제입니다.</p><div class="language-dart line-numbers-mode" data-ext="dart"><pre class="language-dart"><code><span class="token keyword">import</span> <span class="token string-literal"><span class="token string">&#39;dart:math&#39;</span></span><span class="token punctuation">;</span>

<span class="token keyword">class</span> <span class="token class-name">Point</span> <span class="token punctuation">{</span>
    <span class="token keyword">final</span> double x<span class="token punctuation">;</span>
    <span class="token keyword">final</span> double y<span class="token punctuation">;</span>

    <span class="token class-name">Point</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>x<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>y<span class="token punctuation">)</span><span class="token punctuation">;</span>

    double <span class="token function">distanceTo</span><span class="token punctuation">(</span><span class="token class-name">Point</span> other<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">var</span> dx <span class="token operator">=</span> x <span class="token operator">-</span> other<span class="token punctuation">.</span>x<span class="token punctuation">;</span>
        <span class="token keyword">var</span> dy <span class="token operator">=</span> y <span class="token operator">-</span> other<span class="token punctuation">.</span>y<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="operators" tabindex="-1"><a class="header-anchor" href="#operators" aria-hidden="true">#</a> 연산자</h3><p>연산자는 특별한 이름을 가진 인스턴스 메소드 입니다.<br> Dart는 아래의 이름 연산자를 정의할 수 있게 합니다.</p><table><thead><tr><th style="text-align:left;">&lt;</th><th style="text-align:left;">+</th><th style="text-align:left;">|</th><th style="text-align:left;">&gt;&gt;&gt;</th></tr></thead><tbody><tr><td style="text-align:left;">&gt;</td><td style="text-align:left;">/</td><td style="text-align:left;">^</td><td style="text-align:left;">[]</td></tr><tr><td style="text-align:left;">&lt;=</td><td style="text-align:left;">~/</td><td style="text-align:left;">&amp;</td><td style="text-align:left;">[]=</td></tr><tr><td style="text-align:left;">&gt;=</td><td style="text-align:left;">*</td><td style="text-align:left;">&lt;&lt;</td><td style="text-align:left;">~</td></tr><tr><td style="text-align:left;">-</td><td style="text-align:left;">%</td><td style="text-align:left;">&gt;&gt;</td><td style="text-align:left;">==</td></tr></tbody></table>`,13),H={class:"hint-container note"},Q=n("p",{class:"hint-container-title"},"Note",-1),U=n("code",null,"!=",-1),G=n("br",null,null,-1),W=n("br",null,null,-1),X=n("code",null,"e1 != e2",-1),Y=n("code",null,"!(e1 == e2)",-1),Z=t(`<p>연산자 선언은 내장된 식별자인 <code>operator</code>를 사용하여 정의할 수 있습니다.<br> 아래 예제는 벡터의 더하기(<code>+</code>), 빼기(<code>-</code>), 동등(<code>==</code>)을 정의한 것 입니다.</p><div class="language-dart line-numbers-mode" data-ext="dart"><pre class="language-dart"><code><span class="token keyword">class</span> <span class="token class-name">Vector</span> <span class="token punctuation">{</span>
    <span class="token keyword">final</span> x<span class="token punctuation">,</span> y<span class="token punctuation">;</span>

    <span class="token class-name">Vector</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>x<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>y<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token class-name">Vector</span> <span class="token keyword">operator</span> <span class="token operator">+</span><span class="token punctuation">(</span><span class="token class-name">Vector</span> v<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">&gt;</span> <span class="token class-name">Vector</span><span class="token punctuation">(</span>x <span class="token operator">+</span> v<span class="token punctuation">.</span>x<span class="token punctuation">,</span> y <span class="token operator">+</span> v<span class="token punctuation">.</span>y<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">Vector</span> <span class="token keyword">operator</span> <span class="token operator">-</span><span class="token punctuation">(</span><span class="token class-name">Vector</span> v<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">&gt;</span> <span class="token class-name">Vector</span><span class="token punctuation">(</span>x <span class="token operator">-</span> v<span class="token punctuation">.</span>x<span class="token punctuation">,</span> y <span class="token operator">-</span> v<span class="token punctuation">.</span>y<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token metadata function">@override</span>
    bool <span class="token keyword">operator</span> <span class="token operator">==</span><span class="token punctuation">(</span><span class="token class-name">Object</span> other<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">&gt;</span>
        other <span class="token operator">is</span> <span class="token class-name">Vector</span> <span class="token operator">&amp;&amp;</span> x <span class="token operator">==</span> other<span class="token punctuation">.</span>x <span class="token operator">&amp;&amp;</span> y <span class="token operator">==</span> other<span class="token punctuation">.</span>y<span class="token punctuation">;</span>
    
    <span class="token metadata function">@override</span>
    int <span class="token keyword">get</span> hashCode <span class="token operator">=</span><span class="token operator">&gt;</span> <span class="token class-name">Object</span><span class="token punctuation">.</span><span class="token function">hash</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> y<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">final</span> v <span class="token operator">=</span> <span class="token class-name">Vector</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">final</span> w <span class="token operator">=</span> <span class="token class-name">Vecotr</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">assert</span><span class="token punctuation">(</span>v <span class="token operator">+</span> w <span class="token operator">==</span> <span class="token class-name">Vector</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">assert</span><span class="token punctuation">(</span>v <span class="token operator">-</span> w <span class="token operator">==</span> <span class="token class-name">Vector</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="getters-and-setters" tabindex="-1"><a class="header-anchor" href="#getters-and-setters" aria-hidden="true">#</a> getter와 setter</h3><p>getter와 setter는 객체의 속성을 읽고 쓸수 있는 특별한 메소드 입니다.<br> 각 인스턴스 변수는 암묵적으로 getter와 가능하면 setter까지 가지고 있다는것을 기억하세요.<br><code>get</code>과 <code>set</code> 키워드를 사용한 getter와 setter를 구현하여 추가적인 속성을 생성할 수 있습니다.</p><div class="language-dart line-numbers-mode" data-ext="dart"><pre class="language-dart"><code><span class="token keyword">class</span> <span class="token class-name">Rectangle</span> <span class="token punctuation">{</span>
    double left<span class="token punctuation">,</span> top<span class="token punctuation">,</span> width<span class="token punctuation">,</span> height<span class="token punctuation">;</span>

    <span class="token class-name">Rectangle</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>left<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>top<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>width<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>height<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">// 두 계산된 속성을 정의 : right, bottom</span>
    double <span class="token keyword">get</span> right <span class="token operator">=</span><span class="token operator">&gt;</span> left <span class="token operator">+</span> width<span class="token punctuation">;</span>
    <span class="token keyword">set</span> <span class="token function">right</span><span class="token punctuation">(</span>double value<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">&gt;</span> left <span class="token operator">=</span> value <span class="token operator">-</span> width<span class="token punctuation">;</span>
    double <span class="token keyword">get</span> bottom <span class="token operator">=</span><span class="token operator">&gt;</span> top <span class="token operator">+</span> height<span class="token punctuation">;</span>
    <span class="token keyword">set</span> <span class="token function">bottom</span><span class="token punctuation">(</span>double value<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">&gt;</span> top <span class="token operator">=</span> value <span class="token operator">-</span> height<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">var</span> rect <span class="token operator">=</span> <span class="token class-name">Rectangle</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">,</span> <span class="token number">15</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">assert</span><span class="token punctuation">(</span>rect<span class="token punctuation">.</span>left <span class="token operator">==</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    rect<span class="token punctuation">.</span>right <span class="token operator">=</span> <span class="token number">12</span><span class="token punctuation">;</span>
    <span class="token keyword">assert</span><span class="token punctuation">(</span>rect<span class="token punctuation">.</span>left <span class="token operator">==</span> <span class="token operator">-</span><span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>getter와 setter를 사용하면 클라이언트 코드를 변경하지 않고 인스턴스 변수로 시작하여 나중에는 메소드로 래핑할 수 있습니다.</p><div class="hint-container note"><p class="hint-container-title">Note</p><p>증분(<code>++</code>)와 같은 연산자는 getter가 명시적으로 정의되어있는지 여부와 상관없이 예상대로 동작합니다.<br> 예상치 못한 부작용을 피하기 위해 연산자는 getter를 딱 한번만 호출하고 해당 값을 임시변수에 저장합니다.</p></div><h3 id="abstract-methods" tabindex="-1"><a class="header-anchor" href="#abstract-methods" aria-hidden="true">#</a> 추상 메소드</h3><p>인스턴스, getter와 setter는 추상이 될 수 있으며 인터페이스를 정의해도 다른 클래스에서 구현할 수 있도록 남길수 있습니다.<br> 추상 메소드는 <a href="#abstract-classes">추상 클래스</a>에서만 존재합니다.</p><p>메소드를 추상으로 만들기 위해 메소드 본문 대신 세미콜론(<code>;</code>)을 사용합니다.</p><div class="language-dart line-numbers-mode" data-ext="dart"><pre class="language-dart"><code><span class="token keyword">abstract</span> <span class="token keyword">class</span> <span class="token class-name">Doer</span> <span class="token punctuation">{</span>
    <span class="token comment">// 인스턴스 변수와 메소드를 정의...</span>

    <span class="token keyword">void</span> <span class="token function">doSomething</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 추상 메소드를 정의</span>
<span class="token punctuation">}</span>

<span class="token keyword">class</span> <span class="token class-name">EffectiveDoer</span> <span class="token keyword">extends</span> <span class="token class-name">Doer</span> <span class="token punctuation">{</span>
    <span class="token keyword">void</span> <span class="token function">doSomething</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// 구현을 제공하며 메소드는 여기서 추상이 아닙니다.</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="abstract-classes" tabindex="-1"><a class="header-anchor" href="#abstract-classes" aria-hidden="true">#</a> 추상 클래스</h2><p>인스턴스가 될 수 없는 추상 클래스를 정의하기 위해 <code>abstract</code> 수식어를 사용합니다.<br> 추상 클래스는 자주 구현되는 인터페이스를 정의하기 위해 유용합니다.<br> 추상 클래스를 인스턴스화할 수 있도록 보이려면, <a href="#factory-constructors">팩토리 생성자</a>를 정의합니다.</p><p>추상 클래스는 자주 <a href="#abstract-methods">추상 메소드</a>를 가지고 있습니다.<br> 다음 예제는 추상 메소드를 가지고 있는 추상 클래스를 선언하는 것 입니다.</p><div class="language-dart line-numbers-mode" data-ext="dart"><pre class="language-dart"><code><span class="token comment">// 이 클래스는 추상으로 선언되며 인스턴스화가 불가합니다.</span>
<span class="token keyword">abstract</span> <span class="token keyword">class</span> <span class="token class-name">AbstractContainer</span> <span class="token punctuation">{</span>
    <span class="token comment">// 생성자, 필드, 메소드를 선언...</span>

    <span class="token keyword">void</span> <span class="token function">updateChildren</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 추상 메소드</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="implicit-interfaces" tabindex="-1"><a class="header-anchor" href="#implicit-interfaces" aria-hidden="true">#</a> 암시적 인터페이스</h2><p>모든 클래스는 암묵적으로 클래스와 구현된 인터페이스의 모든 인스턴스 멤버를 포함한 인터페이스를 정의합니다.<br> B의 구현을 상속하지 않고 B 클래스의 API를 지원하는 클래스 A를 생성하려면, 클래스 A는 B 인터페이스를 구현해야합니다.</p><p>A 클래스는 <code>implements</code> 절에 선언된 한개 이상의 인터페이스를 구현하며 해당 인터페이스에 필요한 API를 제공합니다.<br> 예로 들면,</p><div class="language-dart line-numbers-mode" data-ext="dart"><pre class="language-dart"><code><span class="token comment">// Person, greet()를 포함한 암시적 인터페이스</span>
<span class="token keyword">class</span> <span class="token class-name">Person</span> <span class="token punctuation">{</span>
    <span class="token comment">// 인터페이스에 있지만 이 라이브러리에서만 볼 수 있음</span>
    <span class="token keyword">final</span> <span class="token class-name">String</span> _name<span class="token punctuation">;</span>

    <span class="token comment">// 생성자이기 때문에 인터페이스에 없음</span>
    <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>_name<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">// 인터페이스</span>
    <span class="token class-name">String</span> <span class="token function">greet</span><span class="token punctuation">(</span><span class="token class-name">String</span> who<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">&gt;</span> <span class="token string-literal"><span class="token string">&#39;Hello, </span><span class="token interpolation"><span class="token punctuation">$</span><span class="token expression">who</span></span><span class="token string">. I am </span><span class="token interpolation"><span class="token punctuation">$</span><span class="token expression">_name</span></span><span class="token string">.&#39;</span></span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token comment">// Person 인터페이스 구현체</span>
<span class="token keyword">class</span> <span class="token class-name">Impostor</span> <span class="token keyword">implements</span> <span class="token class-name">Person</span> <span class="token punctuation">{</span>
    <span class="token class-name">String</span> <span class="token keyword">get</span> _name <span class="token operator">=</span><span class="token operator">&gt;</span> <span class="token string-literal"><span class="token string">&#39;&#39;</span></span><span class="token punctuation">;</span>

    <span class="token class-name">String</span> <span class="token function">greet</span><span class="token punctuation">(</span><span class="token class-name">String</span> who<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">&gt;</span> <span class="token string-literal"><span class="token string">&#39;Hi </span><span class="token interpolation"><span class="token punctuation">$</span><span class="token expression">who</span></span><span class="token string">. Do you know who I am?&#39;</span></span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token class-name">String</span> <span class="token function">greetBob</span><span class="token punctuation">(</span><span class="token class-name">Person</span> person<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">&gt;</span> person<span class="token punctuation">.</span><span class="token function">greet</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&#39;Bob&#39;</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token function">print</span><span class="token punctuation">(</span><span class="token function">greetBob</span><span class="token punctuation">(</span><span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&#39;Kathy&#39;</span></span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">print</span><span class="token punctuation">(</span><span class="token function">greetBob</span><span class="token punctuation">(</span><span class="token class-name">Impostor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>아래는 다수의 인터페이스를 구현하는 클래스를 정의하는 예제입니다.</p><div class="language-dart line-numbers-mode" data-ext="dart"><pre class="language-dart"><code><span class="token keyword">class</span> <span class="token class-name">Point</span> <span class="token keyword">implements</span> <span class="token class-name">Comparable</span><span class="token punctuation">,</span> <span class="token class-name">Location</span> <span class="token punctuation">{</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h2 id="extending-a-class" tabindex="-1"><a class="header-anchor" href="#extending-a-class" aria-hidden="true">#</a> 클래스 확장하기</h2><p><code>extends</code>를 사용해서 하위 클래스를 생성할수 있고, <code>super</code>로 상위클래스를 참조할 수 있습니다.</p><div class="language-dart line-numbers-mode" data-ext="dart"><pre class="language-dart"><code><span class="token keyword">class</span> <span class="token class-name">Television</span> <span class="token punctuation">{</span>
    <span class="token keyword">void</span> <span class="token function">turnOn</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token function">_illuminateDisplay</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">_activateIrSensor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token comment">// ...</span>
<span class="token punctuation">}</span>

<span class="token keyword">class</span> <span class="token class-name">SmartTelevision</span> <span class="token keyword">extends</span> <span class="token class-name">Television</span> <span class="token punctuation">{</span>
    <span class="token keyword">void</span> <span class="token function">turnOn</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">turnOn</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">_bootNetworkInterface</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">_initializeMemory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">_upgradeApps</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token comment">// ...</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,24),nn=n("code",null,"extends",-1),sn=t(`<h3 id="overriding-members" tabindex="-1"><a class="header-anchor" href="#overriding-members" aria-hidden="true">#</a> 멤버 재정의</h3><p>하위클래스는 인스턴스 메소드(<a href="#operators">연산자</a>포함), getter, setter를 재정의할 수 있습니다.<br><code>@override</code> 어노테이션을 사용하여 의도적으로 멤버를 재정의했다고 가리킬 수 있습니다.</p><div class="language-dart line-numbers-mode" data-ext="dart"><pre class="language-dart"><code><span class="token keyword">class</span> <span class="token class-name">Television</span> <span class="token punctuation">{</span>
    <span class="token comment">// ...</span>
    <span class="token keyword">set</span> <span class="token function">contrast</span><span class="token punctuation">(</span>int value<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">class</span> <span class="token class-name">SmartTelevision</span> <span class="token keyword">extends</span> <span class="token class-name">Television</span> <span class="token punctuation">{</span>
    <span class="token metadata function">@override</span>
    <span class="token keyword">set</span> <span class="token function">contrast</span><span class="token punctuation">(</span>num value<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token punctuation">}</span>
    <span class="token comment">// ...</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>재정의 메소드 선언은 다양한 여러가지 재정의 방법에 일치해야합니다.</p>`,4),an=t("<li>반환 유형은 재정의할 메소드의 반환 유형과 동일한 유형(또는 하위유형)이어야 합니다.</li><li>인자 유형은 재정의할 메소드의 인자 유형과 동일한 유형(또는 하위유형)이어야 합니다.<br> 이전 예제에서, <code>SmartTelevision</code>의 <code>contrast</code> setter는 인자 유형을 <code>int</code>의 하위유형인 <code>num</code>으로 변경합니다.</li><li>재정의된 메소드가 n 위치의 매개변수를 수용하면, 재정의한 메소드 또한 n 위치의 매개변수를 수용해야 합니다.</li>",3),tn=n("br",null,null,-1),en=n("br",null,null,-1),pn=n("br",null,null,-1),on={href:"https://dart.dev/guides/language/sound-problems#the-covariant-keyword",target:"_blank",rel:"noopener noreferrer"},cn=n("code",null,"covariant",-1),ln=n("br",null,null,-1),un={href:"https://dart.dev/guides/language/spec",target:"_blank",rel:"noopener noreferrer"},rn={class:"hint-container warning"},dn=n("p",{class:"hint-container-title"},"Note",-1),kn=n("code",null,"==",-1),mn=n("code",null,"hashCode",-1),vn=n("br",null,null,-1),bn=n("code",null,"==",-1),hn=n("code",null,"hashCode",-1),gn={href:"https://dart.dev/guides/libraries/library-tour#implementing-map-keys",target:"_blank",rel:"noopener noreferrer"},yn=t(`<h3 id="nosuchmethod" tabindex="-1"><a class="header-anchor" href="#nosuchmethod" aria-hidden="true">#</a> noSuchMethod()</h3><p>존재하지 않는 메소드나 인스턴스 변수를 사용을 시도하는 코드를 감지하거나 반응할때는 <code>noSuchMethod()</code>를 재정의하면 됩니다.</p><div class="language-dart line-numbers-mode" data-ext="dart"><pre class="language-dart"><code><span class="token keyword">class</span> <span class="token class-name">A</span> <span class="token punctuation">{</span>
    <span class="token comment">// noSuchMethod를 재정의하지 않으면,</span>
    <span class="token comment">// 존재하지 않는 멤버를 사용하는 결과는 NoSuchMethodError입니다.</span>
    <span class="token metadata function">@override</span>
    <span class="token keyword">void</span> <span class="token function">noSuchMethod</span><span class="token punctuation">(</span><span class="token class-name">Invocation</span> invocation<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token function">print</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&#39;존재하지 않는 멤버사용을 시도했습니다: </span><span class="token interpolation"><span class="token punctuation">\${</span><span class="token expression">invocation<span class="token punctuation">.</span>memberName</span><span class="token punctuation">}</span></span><span class="token string">&#39;</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>아래 중 <strong>하나</strong>라도 참이 아니면 구현되지않은 메소드를 <strong>실행할 수 없습니다.</strong></p><ul><li>받는 쪽이 정적유형 <code>dynamic</code>을 가집니다.</li><li>받는 쪽이 미구현된 메소드(abstract도 가능)를 정의하는 정적유형을 가지고 받는 쪽의 동적유형은 클래스 <code>Object</code>와는 다른 <code>noSuchMethod()</code>의 구현을 가집니다.</li></ul>`,5),fn={href:"https://github.com/dart-lang/language/blob/master/archive/feature-specifications/nosuchmethod-forwarding.md",target:"_blank",rel:"noopener noreferrer"},wn=t(`<h2 id="extension-methods" tabindex="-1"><a class="header-anchor" href="#extension-methods" aria-hidden="true">#</a> 확장메소드</h2><p>확장메소드는 존재하는 라이브러리의 기능을 추가할 때 사용되는 방법입니다.<br> 아마 인지하지 못한채로 확장 메소드를 사용하고 있습니다.<br> 예로 들어, IDE의 코드 채우기를 사용하고 있으면, 일반적인 방법과 함께 확장 함수를 제안합니다.</p><p><code>string_apis.dart</code>에서 정의된 <code>String</code>의 명명된 <code>parseInt()</code> 확장메소드를 사용하는 예제입니다.</p><div class="language-dart line-numbers-mode" data-ext="dart"><pre class="language-dart"><code><span class="token keyword">import</span> <span class="token string-literal"><span class="token string">&#39;string_apis.dart&#39;</span></span><span class="token punctuation">;</span>
<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
<span class="token function">print</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&#39;42&#39;</span></span><span class="token punctuation">.</span><span class="token function">padLeft</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// String 메소드를 사용</span>
<span class="token function">print</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&#39;42&#39;</span></span><span class="token punctuation">.</span><span class="token function">parseInt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 확장메소드 사용</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,4),_n={href:"https://dart.dev/guides/language/extension-methods",target:"_blank",rel:"noopener noreferrer"},xn=n("h2",{id:"enumerated-types",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#enumerated-types","aria-hidden":"true"},"#"),s(" 열거된 유형")],-1),Pn=n("p",null,"열거형, enums라고 종종 불리는 열거된 유형은 고정된 숫자의 상수값을 표현하는데 사용되는 클래스의 특수한 종류입니다.",-1),Cn={class:"hint-container note"},Sn=n("p",{class:"hint-container-title"},"Note",-1),In={href:"https://api.dart.dev/stable/dart-core/Enum-class.html",target:"_blank",rel:"noopener noreferrer"},Mn=n("code",null,"Enum",-1),Vn=n("br",null,null,-1),Nn=n("p",null,[s("추상클래스와 mixin은 명시적으로 "),n("code",null,"Enum"),s("을 구현 또는 확장할 수 있지만 enum 정의를 구현하거나 혼합하여도 어떠한 객체라도 해당 클래스와 mixin의 유형을 실제 구현할 수 없습니다.")],-1),Tn=t(`<h3 id="declaring-simple-enums" tabindex="-1"><a class="header-anchor" href="#declaring-simple-enums" aria-hidden="true">#</a> 단순 열거형 선언하기</h3><p>단순한 열거된 유형을 정의하는 것은 <code>enum</code> 키워드를 사용하고 열거할 값을 목록화 하면 됩니다.</p><div class="language-dart line-numbers-mode" data-ext="dart"><pre class="language-dart"><code><span class="token keyword">enum</span> <span class="token class-name">Color</span> <span class="token punctuation">{</span> red<span class="token punctuation">,</span> green<span class="token punctuation">,</span> blue <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div>`,3),jn={class:"hint-container tip"},Dn=n("p",{class:"hint-container-title"},"Tips",-1),Ln=n("h3",{id:"declaring-enhanced-enums",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#declaring-enhanced-enums","aria-hidden":"true"},"#"),s(" 향상된 열거형 선언하기")],-1),zn=n("p",null,"또한 Dart는 고정된 수로 제한하여 정의된 상수 인스턴스를 가지는 필드, 메소드, 정적 생성자의 클래스를 선언하기 위한 열거형 선언을 허용합니다.",-1),En=n("li",null,[n("a",{href:"#adding-features-to-a-class-mixins"},"mixins"),s("로 추가된 것 포함하여 인스턴스 변수는 "),n("code",null,"final"),s("이어야 합니다.")],-1),On=n("li",null,[s("모든 "),n("a",{href:"#constant-constructors"},"발생하는 생성자"),s("는 상수여야 합니다.")],-1),An=n("li",null,[n("a",{href:"#factory-constructors"},"팩토리 생성자"),s("는 고정된 알려진 열거형 인스턴스 한개를 반환해야 합니다.")],-1),Bn={href:"https://api.dart.dev/stable/2.19.0/dart-core/Enum-class.html",target:"_blank",rel:"noopener noreferrer"},Jn=t("<li><code>index</code>, <code>hashCode</code>, 동등 연산자 <code>==</code>는 재정의될 수 없습니다.</li><li>자동으로 생성되는 정적 <code>values</code> getter와 충돌되기 때문에 <code>values</code>라는 이름을 가지는 멤버는 열거형에서 정의가 불가능합니다.</li><li>모든 enum의 인스턴스는 선언의 시작부에 선언이 되어야 하며, 최소 한개 이상의 인스턴스가 정의되어야 합니다.</li>",3),qn=t(`<p>다수의 인스턴스, 인스턴스 변수, getter, 구현된 인터페이스를 가진 향상된 열거형을 정의하는 예제입니다.</p><div class="language-dart line-numbers-mode" data-ext="dart"><pre class="language-dart"><code><span class="token keyword">enum</span> <span class="token class-name">Vehicle</span> <span class="token keyword">implements</span> <span class="token class-name">Comparable</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Vehicle</span><span class="token punctuation">&gt;</span></span> <span class="token punctuation">{</span>
    <span class="token function">car</span><span class="token punctuation">(</span>tires<span class="token punctuation">:</span> <span class="token number">4</span><span class="token punctuation">,</span> passengers<span class="token punctuation">:</span> <span class="token number">5</span><span class="token punctuation">,</span> carbonPerKilometer<span class="token punctuation">:</span> <span class="token number">400</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
    <span class="token function">bus</span><span class="token punctuation">(</span>tires<span class="token punctuation">:</span> <span class="token number">6</span><span class="token punctuation">,</span> passengers<span class="token punctuation">:</span> <span class="token number">50</span><span class="token punctuation">,</span> carbonPerKilometer<span class="token punctuation">:</span> <span class="token number">800</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
    <span class="token function">bicycle</span><span class="token punctuation">(</span>tires<span class="token punctuation">:</span> <span class="token number">2</span><span class="token punctuation">,</span> passengers<span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">,</span> carbonPerKilometer<span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">const</span> <span class="token class-name">Vehicle</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
        required <span class="token keyword">this</span><span class="token punctuation">.</span>tires<span class="token punctuation">,</span>
        required <span class="token keyword">this</span><span class="token punctuation">.</span>passengers<span class="token punctuation">,</span>
        required <span class="token keyword">this</span><span class="token punctuation">.</span>carbonPerKilometer<span class="token punctuation">,</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">final</span> int tires<span class="token punctuation">;</span>
    <span class="token keyword">final</span> int passengers<span class="token punctuation">;</span>
    <span class="token keyword">final</span> int carbonPerKilometer<span class="token punctuation">;</span>

    int <span class="token keyword">get</span> carbonFootprint <span class="token operator">=</span><span class="token operator">&gt;</span> <span class="token punctuation">(</span>carbonPerKilometer <span class="token operator">/</span> passengers<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">round</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token metadata function">@override</span>
    int <span class="token function">compareTo</span><span class="token punctuation">(</span><span class="token class-name">Vehicle</span> other<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">&gt;</span> carbonFootprint <span class="token operator">-</span> other<span class="token punctuation">.</span>carbonFootprint<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,2),$n={class:"hint-container note"},Rn=n("p",{class:"hint-container-title"},"버전노트",-1),Kn={href:"https://dart.dev/guides/language/evolution#language-versioning",target:"_blank",rel:"noopener noreferrer"},Fn=t(`<h3 id="using-enums" tabindex="-1"><a class="header-anchor" href="#using-enums" aria-hidden="true">#</a> 열거형 사용하기</h3><p>열거된 값에 접근하는 것은 다른 <a href="#static-variables">정적 변수</a>와 동일합니다.</p><div class="language-dart line-numbers-mode" data-ext="dart"><pre class="language-dart"><code><span class="token keyword">final</span> favoriteColor <span class="token operator">=</span> <span class="token class-name">Color</span><span class="token punctuation">.</span>blue<span class="token punctuation">;</span>
<span class="token keyword">if</span> <span class="token punctuation">(</span>favoriteColor <span class="token operator">==</span> <span class="token class-name">Color</span><span class="token punctuation">.</span>blue<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token function">print</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&#39;Your favorite color is blue!&#39;</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>열거형의 각 값은 <code>index</code> getter를 가지며 열거형 정의에서 값의 0부터 시작하는 위치를 반환합니다.<br> 예로 들어, 첫번째 값은 0 인덱스이며 두번째 값은 1 인덱스입니다.</p><div class="language-dart line-numbers-mode" data-ext="dart"><pre class="language-dart"><code><span class="token keyword">assert</span><span class="token punctuation">(</span><span class="token class-name">Color</span><span class="token punctuation">.</span>red<span class="token punctuation">.</span>index <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">assert</span><span class="token punctuation">(</span><span class="token class-name">Color</span><span class="token punctuation">.</span>green<span class="token punctuation">.</span>index <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">assert</span><span class="token punctuation">(</span><span class="token class-name">Color</span><span class="token punctuation">.</span>blue<span class="token punctuation">.</span>index <span class="token operator">==</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>열거된 값들의 목록을 가져오려면 열거형의 <code>values</code> 상수를 사용하면 됩니다.</p><div class="language-dart line-numbers-mode" data-ext="dart"><pre class="language-dart"><code><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Color</span><span class="token punctuation">&gt;</span></span> colors <span class="token operator">=</span> <span class="token class-name">Color</span><span class="token punctuation">.</span>values<span class="token punctuation">;</span>
<span class="token keyword">assert</span><span class="token punctuation">(</span>colors<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token class-name">Color</span><span class="token punctuation">.</span>blue<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div>`,7),Hn=t(`<div class="language-dart line-numbers-mode" data-ext="dart"><pre class="language-dart"><code><span class="token keyword">var</span> aColor <span class="token operator">=</span> <span class="token class-name">Color</span><span class="token punctuation">.</span>blue<span class="token punctuation">;</span>

<span class="token keyword">switch</span> <span class="token punctuation">(</span>aColor<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">case</span> <span class="token class-name">Color</span><span class="token punctuation">.</span>red<span class="token punctuation">:</span>
        <span class="token function">print</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&#39;Red as roses!&#39;</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">break</span><span class="token punctuation">;</span>
    <span class="token keyword">case</span> <span class="token class-name">Color</span><span class="token punctuation">.</span>green<span class="token punctuation">:</span>
        <span class="token function">print</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&#39;Green as grass!&#39;</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">break</span><span class="token punctuation">;</span>
    <span class="token keyword">default</span><span class="token punctuation">:</span> <span class="token comment">// 이 부분이 없으면 경고 발생</span>
        <span class="token function">print</span><span class="token punctuation">(</span>aColor<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// &#39;Color.blue&#39;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>Color.blue</code>에서 <code>blue</code>와 같은 열거된 값의 이름에 접근하려면 <code>.name</code> 속성을 사용하면 됩니다.</p><div class="language-dart line-numbers-mode" data-ext="dart"><pre class="language-dart"><code><span class="token function">print</span><span class="token punctuation">(</span><span class="token class-name">Color</span><span class="token punctuation">.</span>blue<span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// &#39;blue&#39;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h2 id="adding-features-to-a-class-mixins" tabindex="-1"><a class="header-anchor" href="#adding-features-to-a-class-mixins" aria-hidden="true">#</a> 클래스에 기능 추가하기 : mixin</h2><p>Mixin은 다수의 클래스 계층에서 클래스 코드를 재사용하는 방법입니다.</p><p>mixin을 사용하려면 <code>with</code> 키워드 뒤로 한개 이상의 mixin 이름을 나열합니다.<br> 아래 예제는 두개의 클래스가 mixin을 사용하는 것 입니다.</p><div class="language-dart line-numbers-mode" data-ext="dart"><pre class="language-dart"><code><span class="token keyword">class</span> <span class="token class-name">Musician</span> <span class="token keyword">extends</span> <span class="token class-name">Performer</span> <span class="token keyword">with</span> <span class="token class-name">Musical</span> <span class="token punctuation">{</span>
    <span class="token comment">// ...</span>
<span class="token punctuation">}</span>

<span class="token keyword">class</span> <span class="token class-name">Maestro</span> <span class="token keyword">extends</span> <span class="token class-name">Person</span> <span class="token keyword">with</span> <span class="token class-name">Musical</span><span class="token punctuation">,</span> <span class="token class-name">Aggressive</span><span class="token punctuation">,</span> <span class="token class-name">Demented</span> <span class="token punctuation">{</span>
    <span class="token class-name">Maestro</span><span class="token punctuation">(</span><span class="token class-name">String</span> maestroName<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        name <span class="token operator">=</span> maestroName<span class="token punctuation">;</span>
        canConduct <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>mixin을 구현하기 위해 Object를 확장하고 생성자 선언이 없는 클래스를 생성합니다.<br> mixin을 일반 클래스로 사용하길 원하지 않는 이상 <code>class</code> 대신 <code>mixin</code> 키워드를 사용합니다.<br> 예로 들면,</p><div class="language-dart line-numbers-mode" data-ext="dart"><pre class="language-dart"><code><span class="token keyword">mixin</span> <span class="token class-name">Musical</span> <span class="token punctuation">{</span>
    bool canPlayPiano <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
    bool canCompose <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
    bool canConduct <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>

    <span class="token keyword">void</span> <span class="token function">entertainMe</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>canPlayPiano<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token function">print</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&#39;Playing piano&#39;</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>canConduct<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token function">print</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&#39;Waving hands&#39;</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
            <span class="token function">print</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&#39;Humming to self&#39;</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>때로는 mixin을 사용할 유형을 제한할 경우도 있습니다.<br> 예로 들어, mixin이 내부에 정의되지 않은 함수를 실행해야 할 때가 있습니다.<br> 아래 예제에서 보여주듯, <code>on</code> 키워드를 사용하여 요구되는 상위클래스를 정의하여 mixin의 사용을 제한할 수 있습니다.</p><div class="language-dart line-numbers-mode" data-ext="dart"><pre class="language-dart"><code><span class="token keyword">class</span> <span class="token class-name">Musician</span> <span class="token punctuation">{</span>
    <span class="token comment">// ...</span>
<span class="token punctuation">}</span>
<span class="token keyword">mixin</span> <span class="token class-name">MusicalPerformer</span> <span class="token keyword">on</span> <span class="token class-name">Musician</span> <span class="token punctuation">{</span>
    <span class="token comment">// ...</span>
<span class="token punctuation">}</span>
<span class="token keyword">class</span> <span class="token class-name">SingerDancer</span> <span class="token keyword">extends</span> <span class="token class-name">Musician</span> <span class="token keyword">with</span> <span class="token class-name">MusicalPerformer</span> <span class="token punctuation">{</span>
    <span class="token comment">// ...</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>이전 코드에서 <code>Musician</code> 클래스를 확장/구현한 클래스만 mixin <code>MusicalPerformer</code>를 사용할 수 있습니다.<br><code>SingerDancer</code>가 <code>Musician</code>을 확장했기 떄문에 <code>SingerDancer</code>는 <code>MusicalPerformer</code>를 사용할 수 있습니다.</p><h2 id="class-variables-and-methods" tabindex="-1"><a class="header-anchor" href="#class-variables-and-methods" aria-hidden="true">#</a> 클래스 변수 및 함수</h2><p><code>static</code> 키워드를 사용하여 클래스전반 변수와 메소드를 구현할 수 있습니다.</p><h3 id="static-variables" tabindex="-1"><a class="header-anchor" href="#static-variables" aria-hidden="true">#</a> 정적 변수</h3><p>정적 변수(클래스 변수)는 클래스전반 상태나 상수에 유용합니다.</p><div class="language-dart line-numbers-mode" data-ext="dart"><pre class="language-dart"><code><span class="token keyword">class</span> <span class="token class-name">Queue</span> <span class="token punctuation">{</span>
    <span class="token keyword">static</span> <span class="token keyword">const</span> initialCapacity <span class="token operator">=</span> <span class="token number">16</span><span class="token punctuation">;</span>
    <span class="token comment">// ...</span>
<span class="token punctuation">}</span>

<span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">assert</span><span class="token punctuation">(</span><span class="token class-name">Queue</span><span class="token punctuation">.</span>initialCapacity <span class="token operator">==</span> <span class="token number">16</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>정적변수는 사용되기 전까지 초기화되지 않습니다.</p>`,18),Qn={class:"hint-container note"},Un=n("p",{class:"hint-container-title"},"Note",-1),Gn={href:"https://dart.dev/guides/language/effective-dart/style#identifiers",target:"_blank",rel:"noopener noreferrer"},Wn=n("code",null,"lowerCamelCase",-1),Xn=t(`<h3 id="static-methods" tabindex="-1"><a class="header-anchor" href="#static-methods" aria-hidden="true">#</a> 정적 함수</h3><p>정적 메소드(클래스 메소드)는 인스턴스에서 동작하지 않기 때문에 <code>this</code>에 접근할 수 있습니다.<br> 그러나, 정적 변수에 접근할 수 있습니다.<br> 아래 예제에서 보여주듯, 클래스에서 정적 메소드를 직접 실행할 수 있습니다.</p><div class="language-dart line-numbers-mode" data-ext="dart"><pre class="language-dart"><code><span class="token keyword">import</span> <span class="token string-literal"><span class="token string">&#39;dart:math&#39;</span></span><span class="token punctuation">;</span>

<span class="token keyword">class</span> <span class="token class-name">Point</span> <span class="token punctuation">{</span>
    double x<span class="token punctuation">,</span> y<span class="token punctuation">;</span>
    <span class="token class-name">Point</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>x<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>y<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">static</span> double <span class="token function">distanceBetween</span><span class="token punctuation">(</span><span class="token class-name">Point</span> a<span class="token punctuation">,</span> <span class="token class-name">Point</span> b<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">var</span> dx <span class="token operator">=</span> a<span class="token punctuation">.</span>x <span class="token operator">-</span> b<span class="token punctuation">.</span>y<span class="token punctuation">;</span>
        <span class="token keyword">var</span> dy <span class="token operator">=</span> a<span class="token punctuation">.</span>y <span class="token operator">-</span> b<span class="token punctuation">.</span>y<span class="token punctuation">;</span>
        <span class="token keyword">return</span> <span class="token function">sqrt</span><span class="token punctuation">(</span>dx <span class="token operator">*</span> dx <span class="token operator">+</span> dy <span class="token operator">*</span> dy<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token class-name">Point</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">var</span> b <span class="token operator">=</span> <span class="token class-name">Point</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">var</span> distance <span class="token operator">=</span> <span class="token class-name">Point</span><span class="token punctuation">.</span><span class="token function">distanceBetween</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">assert</span><span class="token punctuation">(</span><span class="token number">2.8</span> <span class="token operator">&lt;</span> distance <span class="token operator">&amp;&amp;</span> distance <span class="token operator">&lt;</span> <span class="token number">2.9</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">print</span><span class="token punctuation">(</span>distance<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="hint-container note"><p class="hint-container-title">Note</p><p>공통적이거나 넓은 방면에서 유틸리티적 기능으로 사용될 경우 정적 메소드대신 최상위 함수를 사용함을 고려하세요.</p></div><p>정적 메소드를 컴파일타임 상수로 사용할 수 있습니다.<br> 예로 들어, 상수 생성자에 매개변수로 정적 메소드를 전달할 수 있습니다.</p>`,5);function Yn(Zn,ns){const e=c("ExternalLinkIcon"),p=c("RouterLink"),r=c("AdsenseB");return l(),k("div",null,[n("p",null,[s("원문 : "),n("a",v,[s("https://dart.dev/guides/language/language-tour#classes"),a(e)])]),n("p",null,[s("Dart는 클래스와 혼합된 계승을 지원하는 객체지향 언어입니다."),b,s(" 모든 객체는 클래스의 인스턴스이며 "),h,s("을 제외한 클래스는 "),n("a",g,[s("Object"),a(e)]),s("에서 파생됩니다."),y,s(" 혼합된 계승은 모든 클래스는 정확히 하나의 상위클래스(예외로 "),n("a",f,[s("최상위 클래스"),a(e)]),s(),w,s(")를 가지지만 클래스 본문은 다수의 클래스 계층을 재사용될 수 있습니다."),_,x,s("는 클래스를 변경하거나 하위 클래스를 만들지 않고 클래스의 기능을 추가할 수 있는 방법입니다.")]),P,n("p",null,[s("런타임에 객체의 유형을 가져오려면 "),n("a",C,[S,a(e)]),s(" 객체를 반환하는 "),I,s("의 "),M,s("를 사용합니다.")]),V,n("ul",null,[N,n("li",null,[T,s("을 사용하는 것은 "),n("a",j,[s("주의해야 합니다."),a(e)]),s(" 초기화 없는 "),D,s("은 API에 setter를 추가합니다.")])]),L,(l(),i(u("script"),{type:"text/javascript",src:"https://dartpad.dev/inject_embed.dart.js",defer:""})),z,n("div",E,[O,n("p",null,[s("상위 초기화 매개변수를 사용하려면 최소 2.17 "),n("a",A,[s("언어버전"),a(e)]),s("이 필요합니다."),B,s(" 이전 버전을 사용하고 있다면 모든 상위 생성자의 매개변수를 수동으로 전달해야 합니다.")])]),J,(l(),i(u("script"),{type:"text/javascript",src:"https://dartpad.dev/inject_embed.dart.js",defer:""})),q,n("div",$,[R,n("p",null,[s("final 변수의 지연된 초기화를 다루는 다른방법은 "),n("a",K,[s("late final을 사용"),a(e)]),s("하는 것 입니다. (주의!)")])]),F,n("div",H,[Q,n("p",null,[U,s("와 같은 몇몇 "),a(p,{to:"/flutter/dart-tour/operators.html"},{default:o(()=>[s("연산자")]),_:1}),s("가 목록에 없음을 알 수 있을 것입니다."),G,s(" 이것은 단순히 구문적 변형이기 때문입니다."),W,s(" 예로 들어, "),X,s(" 표현식은 "),Y,s("의 구문적 변형입니다.")])]),Z,n("p",null,[nn,s("의 다른 사용은 "),a(p,{to:"/flutter/dart-tour/generics.html"},{default:o(()=>[s("제너릭")]),_:1}),s("의 "),a(p,{to:"/flutter/dart-tour/generics.html#restricting-the-parameterized-type"},{default:o(()=>[s("매개변수화 유형")]),_:1}),s("의 논제를 참고하세요.")]),sn,n("ul",null,[an,n("li",null,[a(p,{to:"/flutter/dart-tour/generics.html#using-generic-methods"},{default:o(()=>[s("제너릭 메소드")]),_:1}),s("은 제너릭이 아닌것으로 재정의할 수 없으며 반대도 불가능합니다.")])]),n("p",null,[s("때때로 메소드 매개변수나 인스턴스 변수의 유형을 축소하고 싶을 수 있습니다."),tn,s(" 이것은 정상적인 규칙을 위반하고 런타임 유형 오류를 발생시킬 수 있는 다운캐스드와 비슷합니다."),en,s(" 그래도 코드에서 타입에러가 발생하지 않음을 보장하면 타입축소는 가능합니다."),pn,s(" 이경우에, 매개변수 정의에서 "),n("a",on,[cn,s(" 키워드"),a(e)]),s("를 사용하면 됩니다."),ln,s(" 자세한 정보는 "),n("a",un,[s("Dart 언어 사양"),a(e)]),s("을 보세요.")]),n("div",rn,[dn,n("p",null,[kn,s("를 재정의하면 객체의 "),mn,s(" getter를 함께 재정의해야합니다."),vn,bn,s("와 "),hn,s("에 대한 재정의 예제는 "),n("a",gn,[s("맵키 구현"),a(e)]),s("을 보세요.")])]),yn,n("p",null,[s("더 많은 정보는, 비공식 "),n("a",fn,[s("noSuchMethod 전달 사양"),a(e)]),s("을 참고하세요.")]),wn,n("p",null,[s("확장메소드를 사용 및 구현하는 상세정보는 "),n("a",_n,[s("확장메소드 페이지"),a(e)]),s("를 참고하세요.")]),xn,Pn,n("div",Cn,[Sn,n("p",null,[s("모든 enums는 자동으로 "),n("a",In,[Mn,a(e)]),s(" 클래스를 확장합니다."),Vn,s(" 또한 봉인되어있기 때문에 하위클래스, 구현, 혼합될 수 없으며 명시적 인스턴스화도 할 수 없습니다.")]),Nn]),Tn,n("div",jn,[Dn,n("p",null,[s("복사-붙여넣기 오류를 방지하기 위하여 열거된 유형을 정의할 때 "),a(p,{to:"/flutter/dart-tour/built-in-types.html#trailing-comma"},{default:o(()=>[s("쉼표로 끝나기")]),_:1}),s("를 사용할 수 있습니다.")])]),Ln,zn,n("p",null,[s("향상된 열거형 선언은 일반적인 "),a(p,{to:"/flutter/dart-tour/classes.html"},{default:o(()=>[s("클래스")]),_:1}),s("의 문법을 따르되 몇가지 추가 요구사항이 있습니다.")]),n("ul",null,[En,On,An,n("li",null,[n("a",Bn,[s("Enum"),a(e)]),s("은 자동으로 확장되므로 다른 클래스는 확장될 수 없습니다.")]),Jn]),qn,n("p",null,[s("향상된 열거형의 선언에 더 자세한 내용은 "),a(p,{to:"/flutter/dart-tour/classes.html"},{default:o(()=>[s("클래스")]),_:1}),s(" 절을 참고하세요.")]),n("div",$n,[Rn,n("p",null,[s("향상된 열거형은 "),n("a",Kn,[s("언어버전"),a(e)]),s("이 최소 2.17이어야 합니다.")])]),Fn,n("p",null,[s("열거형을 "),a(p,{to:"/flutter/dart-tour/control-flow-statements.html#static-variables"},{default:o(()=>[s("switch 명령문")]),_:1}),s("에서 사용할 수 있으며 모든 열거형의 값을 다루지 않으면 경고가 발생합니다.")]),Hn,n("div",Qn,[Un,n("p",null,[s("본 페이지에서 상수 이름에 "),n("a",Gn,[s("스타일 가이드 추천"),a(e)]),s("에 따라 "),Wn,s("를 선호합니다.")])]),Xn,a(r)])}const as=d(m,[["render",Yn],["__file","classes.html.vue"]]);export{as as default};
