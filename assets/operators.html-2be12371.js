import{_ as d,r as l,o as r,c as i,a as n,b as s,d as a,w as p,e as t}from"./app-95e21c4a.js";const u={},k={href:"https://dart.dev/language/operators",target:"_blank",rel:"noopener noreferrer"},m=n("p",{id:"operators"},null,-1),v=n("br",null,null,-1),b=n("br",null,null,-1),g=t('<table><thead><tr><th style="text-align:left;">설명</th><th style="text-align:left;">연산자</th><th style="text-align:left;">결합성</th></tr></thead><tbody><tr><td style="text-align:left;">단항 접미사</td><td style="text-align:left;"><code>expr++</code> <code>expr--</code> <code>()</code> <code>[]</code> <code>?[]</code> <code>.</code> <code>?.</code> <code>!</code></td><td style="text-align:left;">없음</td></tr><tr><td style="text-align:left;">단항 접두사</td><td style="text-align:left;"><code>-expr</code> <code>!expr</code> <code>~expr</code> <code>++expr</code> <code>--expr</code> <code>await expr</code></td><td style="text-align:left;">없음</td></tr><tr><td style="text-align:left;">곱셈</td><td style="text-align:left;"><code>*</code> <code>/</code> <code>%</code> <code>~/</code></td><td style="text-align:left;">왼쪽</td></tr><tr><td style="text-align:left;">덧셈</td><td style="text-align:left;"><code>+</code> <code>-</code></td><td style="text-align:left;">왼쪽</td></tr><tr><td style="text-align:left;">쉬프트</td><td style="text-align:left;"><code>&lt;&lt;</code> <code>&gt;&gt;</code> <code>&gt;&gt;&gt;</code></td><td style="text-align:left;">왼쪽</td></tr><tr><td style="text-align:left;">비트 AND</td><td style="text-align:left;"><code>&amp;</code></td><td style="text-align:left;">왼쪽</td></tr><tr><td style="text-align:left;">비트 XOR</td><td style="text-align:left;"><code>^</code></td><td style="text-align:left;">왼쪽</td></tr><tr><td style="text-align:left;">비트 OR</td><td style="text-align:left;">`</td><td style="text-align:left;">`</td></tr><tr><td style="text-align:left;">관계 및 타입 검사</td><td style="text-align:left;"><code>&gt;=</code> <code>&gt;</code> <code>&lt;=</code> <code>&lt;</code> <code>as</code> <code>is</code> <code>is!</code></td><td style="text-align:left;">없음</td></tr><tr><td style="text-align:left;">동등</td><td style="text-align:left;"><code>==</code> <code>!=</code></td><td style="text-align:left;">없음</td></tr><tr><td style="text-align:left;">논리 AND</td><td style="text-align:left;"><code>&amp;&amp;</code></td><td style="text-align:left;">왼쪽</td></tr><tr><td style="text-align:left;">논리 OR</td><td style="text-align:left;">`</td><td style="text-align:left;"></td></tr><tr><td style="text-align:left;">null일 경우</td><td style="text-align:left;"><code>??</code></td><td style="text-align:left;">왼쪽</td></tr><tr><td style="text-align:left;">조건식</td><td style="text-align:left;"><code>expr1 ? expr2 : epxr3</code></td><td style="text-align:left;">오른쪽</td></tr><tr><td style="text-align:left;">캐스케이드</td><td style="text-align:left;"><code>..</code> <code>?..</code></td><td style="text-align:left;">왼쪽</td></tr><tr><td style="text-align:left;">할당</td><td style="text-align:left;"><code>=</code> <code>*=</code> <code>/=</code> <code>-=</code> <code>&amp;=</code> <code>^=</code> 등</td><td style="text-align:left;">오른쪽</td></tr></tbody></table>',1),h={class:"hint-container warning"},f=n("p",{class:"hint-container-title"},"Note",-1),y=n("br",null,null,-1),x=n("br",null,null,-1),_=n("br",null,null,-1),w={href:"https://dart.dev/guides/language/spec",target:"_blank",rel:"noopener noreferrer"},N=t(`<p>연산자를 사용할 때 표현식을 생성하면 됩니다.<br> 연산자 표현식 예제입니다.</p><div class="language-dart line-numbers-mode" data-ext="dart"><pre class="language-dart"><code>a<span class="token operator">++</span>
a <span class="token operator">+</span> b
a <span class="token operator">=</span> b
a <span class="token operator">==</span> b
c <span class="token operator">?</span> a <span class="token punctuation">:</span> b
a <span class="token operator">is</span> <span class="token class-name">T</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="operator-precedence-example" tabindex="-1"><a class="header-anchor" href="#operator-precedence-example" aria-hidden="true">#</a> 연산자 우선순위 예제</h2><p><a href="#operators">연산자 테이블</a>에서 각 연산자는 아래의 행에 있는 연산자보다 우선순위를 가집니다.<br> 예로 들어, 곱셈 연산자 <code>%</code>는 동등연산자 <code>==</code>보다 높은 우선순위(따라서 먼저 실행)를 가지며 동등연산자는 논리 AND 연산자<code>&amp;&amp;</code>보다 높은 우선순위를 가집니다.<br> 이 우선순위에 따라 아래 두줄의 코드에서 동일하게 실행됩니다.</p><div class="language-dart line-numbers-mode" data-ext="dart"><pre class="language-dart"><code><span class="token comment">// 괄호가 가독성을 높입니다.</span>
<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>n <span class="token operator">%</span> i <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span>d <span class="token operator">%</span> i <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>

<span class="token comment">// 읽기는 어렵지만 동일합니다.</span>
<span class="token keyword">if</span> <span class="token punctuation">(</span>n <span class="token operator">%</span> i <span class="token operator">==</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> d <span class="token operator">%</span> i <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="hint-container warning"><p class="hint-container-title">Note</p><p>연산자가 두개의 피연산자를 가지는 경우 왼쪽의 연산자가 어떤 함수를 사용하는지 결정합니다.<br> 예로 들어, <code>Vector</code> 객체와 <code>Point</code> 객체를 가지는 경우 <code>aVector + aPoint</code>는 <code>Vector</code>의 덧셈(<code>+</code>)을 사용합니다.</p></div><h2 id="arithmetic-operators" tabindex="-1"><a class="header-anchor" href="#arithmetic-operators" aria-hidden="true">#</a> 산술 연산자</h2><p>Dart는 아래 표와 같이 산술 연산자를 지원합니다.</p><table><thead><tr><th style="text-align:left;">연산자</th><th style="text-align:left;">의미</th></tr></thead><tbody><tr><td style="text-align:left;"><code>+</code></td><td style="text-align:left;">더하기</td></tr><tr><td style="text-align:left;"><code>-</code></td><td style="text-align:left;">빼기</td></tr><tr><td style="text-align:left;"><code>-expr</code></td><td style="text-align:left;">단항 마이너스, 부정 이라고도 함(표현식의 부호를 반전)</td></tr><tr><td style="text-align:left;"><code>*</code></td><td style="text-align:left;">곱하기</td></tr><tr><td style="text-align:left;"><code>/</code></td><td style="text-align:left;">나누기</td></tr><tr><td style="text-align:left;"><code>~/</code></td><td style="text-align:left;">나누기, 정수 결과를 반환</td></tr><tr><td style="text-align:left;"><code>%</code></td><td style="text-align:left;">정수 나누기에 대한 나머지 (모듈로)</td></tr></tbody></table><p>예제</p><div class="language-dart line-numbers-mode" data-ext="dart"><pre class="language-dart"><code><span class="token keyword">assert</span><span class="token punctuation">(</span><span class="token number">2</span> <span class="token operator">+</span> <span class="token number">3</span> <span class="token operator">==</span> <span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">assert</span><span class="token punctuation">(</span><span class="token number">2</span> <span class="token operator">-</span> <span class="token number">3</span> <span class="token operator">==</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">assert</span><span class="token punctuation">(</span><span class="token number">2</span> <span class="token operator">*</span> <span class="token number">3</span> <span class="token operator">==</span> <span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">assert</span><span class="token punctuation">(</span><span class="token number">5</span> <span class="token operator">/</span> <span class="token number">2</span> <span class="token operator">==</span> <span class="token number">2.5</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 결과는 더블</span>
<span class="token keyword">assert</span><span class="token punctuation">(</span><span class="token number">5</span> <span class="token operator">~/</span> <span class="token number">2</span> <span class="token operator">==</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 결과는 정수</span>
<span class="token keyword">assert</span><span class="token punctuation">(</span><span class="token number">5</span> <span class="token operator">%</span> <span class="token number">2</span> <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 나머지</span>

<span class="token keyword">assert</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&#39;5/2 = </span><span class="token interpolation"><span class="token punctuation">\${</span><span class="token expression"><span class="token number">5</span> <span class="token operator">~/</span> <span class="token number">2</span></span><span class="token punctuation">}</span></span><span class="token string"> r $ {5 % 2}\` == \`5/2 = 2 r 1&#39;</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Dart는 접두/접미 증감/감소 연산자 또한 지원합니다.</p><table><thead><tr><th style="text-align:left;">연산자</th><th style="text-align:left;">의미</th></tr></thead><tbody><tr><td style="text-align:left;"><code>++var</code></td><td style="text-align:left;"><code>var = var + 1</code> (표현식 값은 <code>var + 1</code>)</td></tr><tr><td style="text-align:left;"><code>var++</code></td><td style="text-align:left;"><code>var = var + 1</code> (표현식 값은 <code>var</code>)</td></tr><tr><td style="text-align:left;"><code>--var</code></td><td style="text-align:left;"><code>var = var - 1</code> (표현식 값은 <code>var - 1</code>)</td></tr><tr><td style="text-align:left;"><code>var--</code></td><td style="text-align:left;"><code>var = var - 1</code> (표현식 값은 <code>var</code>)</td></tr></tbody></table><p>예제</p><div class="language-dart line-numbers-mode" data-ext="dart"><pre class="language-dart"><code>int a<span class="token punctuation">;</span>
int b<span class="token punctuation">;</span>

a <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
b <span class="token operator">=</span> <span class="token operator">++</span>a<span class="token punctuation">;</span> <span class="token comment">// 증가시키고 값을 가져옵니다.</span>
<span class="token keyword">assert</span><span class="token punctuation">(</span>a <span class="token operator">==</span> b<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 1 == 1</span>

a <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
b <span class="token operator">=</span> a<span class="token operator">++</span><span class="token punctuation">;</span> <span class="token comment">// 값을 가져오고 증가시킵니다.</span>
<span class="token keyword">assert</span><span class="token punctuation">(</span>a <span class="token operator">!=</span> b<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 1 != 0</span>

a <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
b <span class="token operator">=</span> <span class="token operator">--</span>a<span class="token punctuation">;</span> <span class="token comment">// 감소시키고 값을 가져옵니다.</span>
<span class="token keyword">assert</span><span class="token punctuation">(</span>a <span class="token operator">==</span> b<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// -1 == -1</span>

a <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
b <span class="token operator">=</span> a<span class="token operator">--</span><span class="token punctuation">;</span>
<span class="token keyword">assert</span><span class="token punctuation">(</span>a <span class="token operator">!=</span> b<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// -1 != 0;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="equality-and-relational-operators" tabindex="-1"><a class="header-anchor" href="#equality-and-relational-operators" aria-hidden="true">#</a> 동등 및 관계 연산자</h2><p>아래 표는 동등/관계 연산자의 의미 목록입니다.</p><table><thead><tr><th style="text-align:left;">연산자</th><th style="text-align:left;">의미</th></tr></thead><tbody><tr><td style="text-align:left;"><code>==</code></td><td style="text-align:left;">같음. 아래 내용을 살펴보세요</td></tr><tr><td style="text-align:left;"><code>!=</code></td><td style="text-align:left;">같지 않음</td></tr><tr><td style="text-align:left;"><code>&gt;</code></td><td style="text-align:left;">보다 큼</td></tr><tr><td style="text-align:left;"><code>&lt;</code></td><td style="text-align:left;">보다 작음</td></tr><tr><td style="text-align:left;"><code>&gt;=</code></td><td style="text-align:left;">보다 크거나 같음</td></tr><tr><td style="text-align:left;"><code>&lt;=</code></td><td style="text-align:left;">보다 작거나 같음</td></tr></tbody></table>`,18),D=n("code",null,"==",-1),C=n("br",null,null,-1),B={href:"https://api.dart.dev/stable/dart-core/identical.html",target:"_blank",rel:"noopener noreferrer"},S=n("code",null,"identical()",-1),P=n("br",null,null,-1),A=n("code",null,"==",-1),L=n("li",null,"x나 y가 null이면 둘다 null일 경우 ture, 하나만 null일 경우이는 false를 반환합니다.",-1),T=n("code",null,"==",-1),V=n("code",null,"==",-1),O=t(`<p>여기 동등과 관계 연산자를 사용한 예제입니다.</p><div class="language-dart line-numbers-mode" data-ext="dart"><pre class="language-dart"><code><span class="token keyword">assert</span><span class="token punctuation">(</span><span class="token number">2</span> <span class="token operator">==</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">assert</span><span class="token punctuation">(</span><span class="token number">2</span> <span class="token operator">!=</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">assert</span><span class="token punctuation">(</span><span class="token number">3</span> <span class="token operator">&gt;</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">assert</span><span class="token punctuation">(</span><span class="token number">2</span> <span class="token operator">&lt;</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">assert</span><span class="token punctuation">(</span><span class="token number">3</span> <span class="token operator">&gt;=</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">assert</span><span class="token punctuation">(</span><span class="token number">2</span> <span class="token operator">&lt;=</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="type-test-operators" tabindex="-1"><a class="header-anchor" href="#type-test-operators" aria-hidden="true">#</a> 타입 검사 연산자</h2><p><code>as</code>, <code>is</code>, <code>is!</code> 연산자는 런타임중 타입을 확인하는 방법입니다.</p>`,4),R=n("thead",null,[n("tr",null,[n("th",{style:{"text-align":"left"}},"연산자"),n("th",{style:{"text-align":"left"}},"의미")])],-1),j=n("td",{style:{"text-align":"left"}},[n("code",null,"as")],-1),q={style:{"text-align":"left"}},I=n("tr",null,[n("td",{style:{"text-align":"left"}},[n("code",null,"is")]),n("td",{style:{"text-align":"left"}},"객체가 특정 타입일 경우 True")],-1),E=n("tr",null,[n("td",{style:{"text-align":"left"}},[n("code",null,"is!")]),n("td",{style:{"text-align":"left"}},"객체가 특정 타입을 포함하지 않은 경우 True")],-1),G=t(`<p><code>obj is T</code>의 결과는 <code>obj</code>가 <code>T</code>로 지정된 인터페이스를 구현했다면 true 입니다.<br> 예로 들어, <code>obj is Object?</code>는 항상 true입니다.</p><p><code>as</code> 연산자는 객체가 특정타입인 것이 확실할 때 객체를 특정 타입으로 변환할 때 사용합니다.<br> 예제는 다음과 같습니다.</p><div class="language-dart line-numbers-mode" data-ext="dart"><pre class="language-dart"><code><span class="token punctuation">(</span>employee <span class="token operator">as</span> <span class="token class-name">Person</span><span class="token punctuation">)</span><span class="token punctuation">.</span>firstName <span class="token operator">=</span> <span class="token string-literal"><span class="token string">&#39;Bob&#39;</span></span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>만약 객체가 <code>T</code> 타입임이 확실하지 않으면 객체를 사용하기 전 <code>is T</code>를 사용해서 타입을 확인합니다.</p><div class="language-dart line-numbers-mode" data-ext="dart"><pre class="language-dart"><code><span class="token keyword">if</span> <span class="token punctuation">(</span>employee <span class="token operator">is</span> <span class="token class-name">Person</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// 타입 확인</span>
    employee<span class="token punctuation">.</span>firstName <span class="token operator">=</span> <span class="token string-literal"><span class="token string">&#39;Bob&#39;</span></span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="hint-container note"><p class="hint-container-title">Note</p><p>코드가 동일한 것은 아닙니다.<br><code>employee</code>가 null이거나 <code>Person</code>이 아닌 경우 첫번째 예제는 예외가 발생됩니다.<br> 두번째는 아무것도 발생되지 않습니다.</p></div><h2 id="assignment-operators" tabindex="-1"><a class="header-anchor" href="#assignment-operators" aria-hidden="true">#</a> 할당 연산자</h2><p>이미 봤듯, <code>=</code> 연산자를 활용해서 값을 할당할 수 있습니다.<br> 할당되는 변수가 null 인 경우에만 할당하려면 <code>??=</code> 연산자를 활용합니다.</p><div class="language-dart line-numbers-mode" data-ext="dart"><pre class="language-dart"><code><span class="token comment">// a에 값을 할당</span>
a <span class="token operator">=</span> value<span class="token punctuation">;</span>

<span class="token comment">// b가 null일 경우 값을 할당, 아니면 b는 유지</span>
b <span class="token operator">?</span><span class="token operator">?</span><span class="token operator">=</span> value<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>+=</code>와 같은 복합 할당 연산자는 연산자와 할당을 조합합니다.</p><table><thead><tr><th><code>=</code></th><th><code>*=</code></th><th><code>%=</code></th><th><code>&gt;&gt;&gt;=</code></th><th><code>^=</code></th></tr></thead><tbody><tr><td><strong><code>+=</code></strong></td><td><strong><code>/=</code></strong></td><td><strong><code>&lt;&lt;=</code></strong></td><td><strong><code>&amp;=</code></strong></td><td>**\`</td></tr><tr><td><strong><code>-=</code></strong></td><td><strong><code>~/=</code></strong></td><td><strong><code>&gt;&gt;=</code></strong></td><td></td><td></td></tr></tbody></table><p>복합 할당 연산자가 동작하는 원리입니다.</p><table><thead><tr><th></th><th>복합 할당</th><th>동일 표현식</th></tr></thead><tbody><tr><td><strong>op 연산자</strong></td><td><code>a op= b</code></td><td><code>a = a op b</code></td></tr><tr><td><strong>예제</strong></td><td><code>a += b</code></td><td><code>a = a + b</code></td></tr></tbody></table><p>아래 예제는 할당과 복합 할당 연산자를 사용한 것 입니다.</p><div class="language-dart line-numbers-mode" data-ext="dart"><pre class="language-dart"><code><span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span> <span class="token comment">// =를 사용한 할당</span>
a <span class="token operator">*=</span> <span class="token number">3</span><span class="token punctuation">;</span> <span class="token comment">// 할당 및 곱셈 : a = a * 3</span>
<span class="token keyword">assert</span><span class="token punctuation">(</span>a <span class="token operator">==</span> <span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="logical-operators" tabindex="-1"><a class="header-anchor" href="#logical-operators" aria-hidden="true">#</a> 논리 연산자</h2><p>논리 연산자를 사용해서 부울식을 반전 또는 조합할 수 있습니다.</p><table><thead><tr><th>연산자</th><th>의미</th></tr></thead><tbody><tr><td><code>!expr</code></td><td>다음 표현식을 반전 (false를 true, 또는 그 반대)</td></tr><tr><td>\`</td><td></td></tr><tr><td><code>&amp;&amp;</code></td><td>논리 AND</td></tr></tbody></table><p>논리 연산자를 사용한 예제입니다.</p><div class="language-dart line-numbers-mode" data-ext="dart"><pre class="language-dart"><code><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>done <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span>col <span class="token operator">==</span> <span class="token number">0</span> <span class="token operator">||</span> col <span class="token operator">==</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// ...뭔가 하기...</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="bitwise-and-shift-operators" tabindex="-1"><a class="header-anchor" href="#bitwise-and-shift-operators" aria-hidden="true">#</a> 비트 및 쉬프트 연산자</h2><p>Dart에서 숫자의 개별 비트를 조작할 수 있습니다.<br> 보통 정수와 함께 대한 비트나 쉬프트 연산자를 사용합니다.</p><table><thead><tr><th>연산자</th><th>의미</th></tr></thead><tbody><tr><td><code>&amp;</code></td><td>AND</td></tr><tr><td>\`</td><td>\`</td></tr><tr><td><code>^</code></td><td>XOR</td></tr><tr><td><code>~expr</code></td><td>단항 비트 보수 (0은 1, 1은 0)</td></tr><tr><td><code>&lt;&lt;</code></td><td>왼쪽 쉬프트</td></tr><tr><td><code>&gt;&gt;</code></td><td>오른쪽 쉬프트</td></tr><tr><td><code>&gt;&gt;&gt;</code></td><td>부호없는 오른쪽 쉬프트</td></tr></tbody></table><p>비트와 쉬프트 연산자를 사용한 예제입니다.</p><div class="language-dart line-numbers-mode" data-ext="dart"><pre class="language-dart"><code><span class="token keyword">final</span> value <span class="token operator">=</span> <span class="token number">0x22</span><span class="token punctuation">;</span>
<span class="token keyword">final</span> bitmask <span class="token operator">=</span> <span class="token number">0x0f</span><span class="token punctuation">;</span>

<span class="token keyword">assert</span><span class="token punctuation">(</span><span class="token punctuation">(</span>value <span class="token operator">&amp;</span> bitmask<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0x02</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// AND</span>
<span class="token keyword">assert</span><span class="token punctuation">(</span><span class="token punctuation">(</span>value <span class="token operator">&amp;</span> <span class="token operator">~</span>bitmask<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0x20</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// AND NOT</span>
<span class="token keyword">assert</span><span class="token punctuation">(</span><span class="token punctuation">(</span>value <span class="token operator">|</span> bitmask<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0x2f</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// OR</span>
<span class="token keyword">assert</span><span class="token punctuation">(</span><span class="token punctuation">(</span>value <span class="token operator">^</span> bitmask<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0x2d</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// XOR</span>
<span class="token keyword">assert</span><span class="token punctuation">(</span><span class="token punctuation">(</span>value <span class="token operator">&lt;&lt;</span> <span class="token number">4</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0x220</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 왼쪽 쉬프트</span>
<span class="token keyword">assert</span><span class="token punctuation">(</span><span class="token punctuation">(</span>value <span class="token operator">&gt;&gt;</span> <span class="token number">4</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0x02</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 오른쪽 쉬프트</span>
<span class="token keyword">assert</span><span class="token punctuation">(</span><span class="token punctuation">(</span>value <span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token number">4</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0x02</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 부호없는 오른쪽 쉬프트</span>
<span class="token keyword">assert</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token operator">-</span>value <span class="token operator">&gt;&gt;</span> <span class="token number">4</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token operator">-</span><span class="token number">0x03</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 오른쪽 쉬프트</span>
<span class="token keyword">assert</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token operator">-</span>value <span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token number">4</span><span class="token punctuation">)</span> <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 부호없는 오른쪽 쉬프트</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,25),X={class:"hint-container note"},W=n("p",{class:"hint-container-title"},"버전노트",-1),$=n("code",null,">>>",-1),z={href:"https://dart.dev/guides/language/evolution#language-versioning",target:"_blank",rel:"noopener noreferrer"},F=n("h2",{id:"conditional-expressions",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#conditional-expressions","aria-hidden":"true"},"#"),s(" 조건 표현식")],-1),H=t(`<p><code>조건 ? 표현식1 : 표현식2</code></p><p>만약 조건이 true라면, 표현식1을 평가하고 (그 결과값을 반환), 반대면 표현식2의 값을 평가하고 반환합니다.</p><p><code>표현식1 ?? 표현식2</code></p><p>표현식1이 null이 아니면 값을 반환하고 반대면 표현식2의 값을 평가하고 반환합니다.</p><p>부울 표현식을 기반으로 값을 할당해야할 때 <code>?</code>와 <code>:</code>을 사용하는 것을 고려하세요.</p><div class="language-dart line-numbers-mode" data-ext="dart"><pre class="language-dart"><code><span class="token keyword">var</span> visibility <span class="token operator">=</span> isPublic <span class="token operator">?</span> <span class="token string-literal"><span class="token string">&#39;public&#39;</span></span> <span class="token punctuation">:</span> <span class="token string-literal"><span class="token string">&#39;private&#39;</span></span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>부울 표현식이 null을 확인하면 <code>??</code>의 사용을 고려하세요.</p><div class="language-dart line-numbers-mode" data-ext="dart"><pre class="language-dart"><code><span class="token class-name">String</span> <span class="token function">playerName</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token operator">?</span> name<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">&gt;</span> name <span class="token operator">?</span><span class="token operator">?</span> <span class="token string-literal"><span class="token string">&#39;Guest&#39;</span></span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>위 예제는 최소 두가지 다른 방법으로 작성은 가능하나 간결하지는 않습니다.</p><div class="language-dart line-numbers-mode" data-ext="dart"><pre class="language-dart"><code><span class="token comment">// ?: 연산자를 사용한 조금 긴 버전</span>
<span class="token class-name">String</span> <span class="token function">playerName</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token operator">?</span> name<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">&gt;</span> name <span class="token operator">!=</span> <span class="token keyword">null</span> <span class="token operator">?</span> name <span class="token punctuation">:</span> <span class="token string-literal"><span class="token string">&#39;Guest&#39;</span></span><span class="token punctuation">;</span>

<span class="token comment">// if-else 명령문을 사용한 매우 긴 버전</span>
<span class="token class-name">String</span> <span class="token function">playerName</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token operator">?</span> name<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>name <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> name<span class="token punctuation">;</span>
    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token string-literal"><span class="token string">&#39;Guest&#39;</span></span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="cascade-notation" tabindex="-1"><a class="header-anchor" href="#cascade-notation" aria-hidden="true">#</a> 캐스케이드 표현법</h2><p>캐스케이드(<code>..</code>, <code>?..</code>)는 동일한 객체에 대하여 연속적인 명령을 가능하게 합니다.<br> 인스턴스 멤버에 접속하거나 동일한 객체에 인스턴스 함수를 호출할 수 있습니다.<br> 임시 변수를 만드는 단계를 생략하게 하고 좀 더 유동적인 코드를 작성할 수 있게 합니다.</p><p>아래의 코드를 살펴봅시다.</p><div class="language-dart line-numbers-mode" data-ext="dart"><pre class="language-dart"><code><span class="token keyword">var</span> paint <span class="token operator">=</span> <span class="token class-name">Paint</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token punctuation">.</span><span class="token punctuation">.</span>color <span class="token operator">=</span> <span class="token class-name">Colors</span><span class="token punctuation">.</span>black
    <span class="token punctuation">.</span><span class="token punctuation">.</span>strokeCap <span class="token operator">=</span> <span class="token class-name">StrokeCap</span><span class="token punctuation">.</span>round
    <span class="token punctuation">.</span><span class="token punctuation">.</span>strokeWidth <span class="token operator">=</span> <span class="token number">5.0</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>Paint()</code>의 생성자는 <code>Paint</code> 객체를 반환합니다.<br> 이 객체에 캐스케이드 표기법을 따르는 코드는 반환되는 값들을 무시합니다.</p><p>이전 예제는 다음 코드와 동일합니다.</p><div class="language-dart line-numbers-mode" data-ext="dart"><pre class="language-dart"><code><span class="token keyword">var</span> paint <span class="token operator">=</span> <span class="token class-name">Paint</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
paint<span class="token punctuation">.</span>color <span class="token operator">=</span> <span class="token class-name">Colors</span><span class="token punctuation">.</span>black<span class="token punctuation">;</span>
paint<span class="token punctuation">.</span>strokeCap <span class="token operator">=</span> <span class="token class-name">StrokeCap</span><span class="token punctuation">.</span>round<span class="token punctuation">;</span>
paint<span class="token punctuation">.</span>strokeWidth <span class="token operator">=</span> <span class="token number">5.0</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>만약 캐스케이드 연산자를 사용할 객체가 null일 수도 있는 경우 null-단축 캐스케이드(<code>?..</code>)를 첫번째 연산자로 사용합니다.<br><code>?..</code>로 시작하면 null 객체에 대한 캐스케이드 연산자가 할당되지 않음을 보장합니다.</p><div class="language-dart line-numbers-mode" data-ext="dart"><pre class="language-dart"><code><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&#39;#confirm&#39;</span></span><span class="token punctuation">)</span> <span class="token comment">// 객체 가져오기</span>
    <span class="token operator">?</span><span class="token punctuation">.</span><span class="token punctuation">.</span>text <span class="token operator">=</span> <span class="token string-literal"><span class="token string">&#39;Confirm&#39;</span></span> <span class="token comment">// 멤버 사용하기</span>
    <span class="token punctuation">.</span><span class="token punctuation">.</span>classes<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&#39;important&#39;</span></span><span class="token punctuation">)</span>
    <span class="token punctuation">.</span><span class="token punctuation">.</span>onClick<span class="token punctuation">.</span><span class="token function">listen</span><span class="token punctuation">(</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">&gt;</span> window<span class="token punctuation">.</span><span class="token function">alert</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&#39;Confirmed!&#39;</span></span><span class="token punctuation">)</span><span class="token punctuation">)</span>
    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token function">scrollIntoView</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,19),J={class:"hint-container note"},K=n("p",{class:"hint-container-title"},"버전노트",-1),M=n("code",null,"?..",-1),Q={href:"https://dart.dev/guides/language/evolution#language-versioning",target:"_blank",rel:"noopener noreferrer"},U=t(`<p>이전 코드는 아래와 동일합니다.</p><div class="language-dart line-numbers-mode" data-ext="dart"><pre class="language-dart"><code><span class="token keyword">var</span> button <span class="token operator">=</span> <span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&#39;#confirm&#39;</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
button<span class="token operator">?</span><span class="token punctuation">.</span>text <span class="token operator">=</span> <span class="token string-literal"><span class="token string">&#39;Confirm&#39;</span></span><span class="token punctuation">;</span>
button<span class="token operator">?</span><span class="token punctuation">.</span>classes<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&#39;important&#39;</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
button<span class="token operator">?</span><span class="token punctuation">.</span>onClick<span class="token punctuation">.</span><span class="token function">listen</span><span class="token punctuation">(</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">&gt;</span> window<span class="token punctuation">.</span><span class="token function">alert</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&#39;Confirmed!&#39;</span></span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
button<span class="token operator">?</span><span class="token punctuation">.</span><span class="token function">scrollIntoView</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>또한 중첩된 캐스케이드도 가능합니다.<br> 예제는 다음과 같습니다.</p><div class="language-dart line-numbers-mode" data-ext="dart"><pre class="language-dart"><code><span class="token keyword">final</span> addressBook <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">AddressBookBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token punctuation">.</span><span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token string-literal"><span class="token string">&#39;jenny&#39;</span></span>
    <span class="token punctuation">.</span><span class="token punctuation">.</span>email <span class="token operator">=</span> <span class="token string-literal"><span class="token string">&#39;jenny@example.com&#39;</span></span>
    <span class="token punctuation">.</span><span class="token punctuation">.</span>phone <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">PhoneNumberBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
        <span class="token punctuation">.</span><span class="token punctuation">.</span>number <span class="token operator">=</span> <span class="token string-literal"><span class="token string">&#39;415-555-0100&#39;</span></span>
        <span class="token punctuation">.</span><span class="token punctuation">.</span>label <span class="token operator">=</span> <span class="token string-literal"><span class="token string">&#39;home&#39;</span></span><span class="token punctuation">)</span>
        <span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
    <span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>주의할 점은 함수에 캐스케이드를 구성할 때 실제 객체를 반환해야합니다.<br> 예로 들어, 아래의 코드는 실패합니다.</p><div class="language-dart line-numbers-mode" data-ext="dart"><pre class="language-dart"><code><span class="token keyword">var</span> sb <span class="token operator">=</span> <span class="token class-name">StringBuffer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
sb<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&#39;foo&#39;</span></span><span class="token punctuation">)</span>
    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&#39;bar&#39;</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 에러 : &#39;write&#39; 함수는 &#39;void&#39;로 정의될 수 없습니다.</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>sb.write()</code>를 호출하면 void가 반환되기 때문에 <code>void</code>로 캐스케이드를 구성할 수 없습니다.</p><div class="hint-container note"><p class="hint-container-title">Note</p><p>엄밀히 말하면, 캐스케이드에 대한 &quot;이중점&quot; 표기법은 연산자가 아닙니다.<br> Dart 구문의 일부일 뿐입니다.</p></div><h2 id="other-operators" tabindex="-1"><a class="header-anchor" href="#other-operators" aria-hidden="true">#</a> 기타 연산자</h2><p>다른 예에서 나머지 연산자의 대부분을 살펴보았습니다.</p><table><thead><tr><th style="text-align:left;">연산자</th><th style="text-align:left;">이름</th><th style="text-align:left;">의미</th></tr></thead><tbody><tr><td style="text-align:left;"><code>()</code></td><td style="text-align:left;">함수 어플리케이션</td><td style="text-align:left;">함수 호출을 표현</td></tr><tr><td style="text-align:left;"><code>[]</code></td><td style="text-align:left;">첨자 접근</td><td style="text-align:left;">오버라이드 가능한 <code>[]</code> 연산자의 호출을 표현. 예로 <code>fooList[1]</code>은 int <code>1</code>을 전달해 <code>fooList</code>의 인덱스 <code>1</code>인 요소에 접근합니다.</td></tr><tr><td style="text-align:left;"><code>?[]</code></td><td style="text-align:left;">조건부 첨자 접근</td><td style="text-align:left;"><code>[]</code>와 비슷하지만 왼쪽 피연산자가 null일 수 있습니다. 예로, <code>fooList?[1]</code>은 int <code>1</code>을 전달해 <code>fooList</code>의 인덱스 <code>1</code>인 요소에 접근하지만 <code>fooList</code>가 null일 수 있습니다. (그럴 경우 null로 계산됨)</td></tr><tr><td style="text-align:left;"><code>.</code></td><td style="text-align:left;">멤버 접근</td><td style="text-align:left;">표현식의 속성을 참조. 예로, <code>foo.bar</code>는 표현식 <code>foo</code>에서 <code>bar</code> 속성을 선택합니다.</td></tr><tr><td style="text-align:left;"><code>?.</code></td><td style="text-align:left;">조건부 멤버 접근</td><td style="text-align:left;"><code>.</code>와 비슷하지만 왼쪽 피연산자가 null일 수 있습니다. 예로, <code>foo?.bar</code>는 표현식 <code>foo</code>에서 <code>bar</code> 속성을 선택하지만 <code>foo</code>가 null일 수 있습니다. (그럴 경우 <code>foo?.bar</code>는 null)</td></tr><tr><td style="text-align:left;"><code>!</code></td><td style="text-align:left;">Null 표명 연산자</td><td style="text-align:left;">표현식을 non-nullable 형식으로 캐스팅합니다. 캐스트에 실패하면 런타임 예외가 발생합니다. 예로, <code>foo!.bar</code>는 <code>foo</code>가 null이 아니면 <code>bar</code> 속성을 선택하고, <code>foo</code>가 null이면 런타임 예외를 발생시킨다고 표명합니다.</td></tr></tbody></table>`,11),Y=n("code",null,".",-1),Z=n("code",null,"?.",-1),nn=n("code",null,"..",-1);function sn(an,tn){const e=l("ExternalLinkIcon"),o=l("RouterLink"),c=l("AdsenseB");return r(),i("div",null,[n("p",null,[s("원문 : "),n("a",k,[s("https://dart.dev/language/operators"),a(e)])]),m,n("p",null,[s("Dart는 아래 테이블에 나열된 연산자를 지원합니다."),v,s(" 이 표는 Dart 연산자 연관성과 Dart 연산자 관계의 근사치인 내림차순 연산자 우선순위를 보여줍니다."),b,s(" 이중 많은 것을 "),a(o,{to:"/dart/language/methods.html#operators"},{default:p(()=>[s("클래스 멤버의 연산자")]),_:1}),s("로 구현할 수 있습니다.")]),g,n("div",h,[f,n("p",null,[s("직전 테이블은 참고용으로만 사용해야합니다."),y,s(" 연산자 우선순위와 결합성의 개념은 언어 문법에서 발견되는 진실의 근사치입니다."),x,s(" 연산자 우선순위는 Dart 파서의 동작에 대한 근사치 입니다."),_,s(" 문법에 정의된 Dart 연산자 관계에 대한 표준적인 동작인 "),n("a",w,[s("Dart 언어 사양"),a(e)]),s("에서 찾을 수 있습니다.")])]),N,n("p",null,[s("두개의 객체 x, y 가 동일한 것인지 확인하려면 "),D,s(" 연산자를 사용하면 됩니다."),C,s(" (두 객체가 정확하게 같은 객체인지 판별하려는 특수한 경우에는 "),n("a",B,[S,a(e)]),s(" 함수를 대신 사용합니다.)"),P,s(" 아래는 "),A,s(" 연산자가 동작하는 방식입니다.")]),n("ol",null,[L,n("li",null,[s("y를 인자로 x의 "),T,s(" 함수를 수행하여 결과를 반환합니다. (맞다. "),V,s("와 같은 연산자는 첫번째 피연산자에서 실행되는 함수입니다. 자세한 정보는 "),a(o,{to:"/dart/language/methods.html#operators"},{default:p(()=>[s("연산자")]),_:1}),s("를 참고하세요)")])]),O,n("table",null,[R,n("tbody",null,[n("tr",null,[j,n("td",q,[s("타입변환 ("),a(o,{to:"/dart/language/libraries.html#specifying-a-library-prefix"},{default:p(()=>[s("라이브러리 접두어")]),_:1}),s(" 지정으로도 사용)")])]),I,E])]),G,n("div",X,[W,n("p",null,[$,s(" 연산자(트리플 쉬프트 또는 부호없는 쉬프트)는 2.14 이상의 "),n("a",z,[s("언어 버전"),a(e)]),s("을 요구합니다.")])]),F,n("p",null,[s("Dart는 "),a(o,{to:"/dart/language/control-flow.html#if-and-else"},{default:p(()=>[s("if-else")]),_:1}),s(" 명령문이 필요한 표현식을 간결하게 할 수 있는 두개의 연산자를 가지고 있습니다.")]),H,n("div",J,[K,n("p",null,[M,s(" 문법은 "),n("a",Q,[s("Dart 언어버전"),a(e)]),s(" 2.12 이상을 요구합니다.")])]),U,n("p",null,[Y,s(", "),Z,s(", "),nn,s(" 연산자에 대한 자세한 정보는 "),a(o,{to:"/dart/language/classes.html"},{default:p(()=>[s("클래스")]),_:1}),s("를 참고하세요.")]),a(c)])}const on=d(u,[["render",sn],["__file","operators.html.vue"]]);export{on as default};
