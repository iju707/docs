import{_ as c,r as p,o as i,c as l,a as s,b as n,d as a,e as t}from"./app-95e21c4a.js";const u={},r={href:"https://boto3.amazonaws.com/v1/documentation/api/latest/guide/sqs.html",target:"_blank",rel:"noopener noreferrer"},d=s("br",null,null,-1),k={href:"http://aws.amazon.com/documentation/sqs/",target:"_blank",rel:"noopener noreferrer"},m=s("h2",{id:"sqs",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#sqs","aria-hidden":"true"},"#"),n(" SQS")],-1),v=s("br",null,null,-1),b={href:"https://boto3.amazonaws.com/v1/documentation/api/latest/guide/resources.html#guide-resources",target:"_blank",rel:"noopener noreferrer"},g={href:"https://boto3.amazonaws.com/v1/documentation/api/latest/guide/collections.html#guide-collections",target:"_blank",rel:"noopener noreferrer"},h=t(`<h2 id="큐-생성하기" tabindex="-1"><a class="header-anchor" href="#큐-생성하기" aria-hidden="true">#</a> 큐 생성하기</h2><p>큐는 이름으로 생성할 수 있습니다.<br> 또한 아이템이 처리되기 전까지 대기하는 시간(초)와 같이 큐의 속성도 선택적으로 설정할 수 있습니다.<br> 다음 예제에서 큐의 이름을 <code>test</code>로 사용하겠습니다.<br> 큐를 생성하기전에 SQS 서비스자원을 얻어와야 합니다.</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token comment"># 서비스 자원 가져오기</span>
sqs <span class="token operator">=</span> boto3<span class="token punctuation">.</span>resource<span class="token punctuation">(</span><span class="token string">&#39;sqs&#39;</span><span class="token punctuation">)</span>

<span class="token comment"># 큐 생성하기. SQS.Qqueue 인스턴스를 반환합니다.</span>
queue <span class="token operator">=</span> sqs<span class="token punctuation">.</span>create_queue<span class="token punctuation">(</span>QueueName<span class="token operator">=</span><span class="token string">&#39;test&#39;</span><span class="token punctuation">,</span> Attributes<span class="token operator">=</span><span class="token punctuation">{</span><span class="token string">&#39;DelaySeconds&#39;</span><span class="token punctuation">:</span> <span class="token string">&#39;5&#39;</span><span class="token punctuation">}</span><span class="token punctuation">)</span>

<span class="token comment"># 큐의 식별자와 속성에 접근할 수 있습니다.</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>queue<span class="token punctuation">.</span>url<span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>queue<span class="token punctuation">.</span>attributes<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">&#39;DelaySeconds&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,3),_={href:"https://boto3.amazonaws.com/v1/documentation/api/latest/reference/services/sqs.html#SQS.ServiceResource.create_queue",target:"_blank",rel:"noopener noreferrer"},S=t(`<div class="hint-container warning"><p class="hint-container-title">Note</p><p><code>test</code>라는 큐를 이미 보유하고 있을 경우 위 코드에서 예외가 발생할 수 있습니다.</p></div><h2 id="기존-큐-사용하기" tabindex="-1"><a class="header-anchor" href="#기존-큐-사용하기" aria-hidden="true">#</a> 기존 큐 사용하기</h2><p>큐 이름을 기준으로 검색할 수 있습니다.<br> 만약 큐가 없는 경우에는 예외가 발생할 수 있습니다.</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token comment"># 서비스 자원 가져오기</span>
sqs <span class="token operator">=</span> boto3<span class="token punctuation">.</span>resource<span class="token punctuation">(</span><span class="token string">&#39;sqs&#39;</span><span class="token punctuation">)</span>

<span class="token comment"># 큐 가져오기. SQS.Queue 인스턴스가 반환됩니다.</span>
queue <span class="token operator">=</span> sqs<span class="token punctuation">.</span>get_queue_by_name<span class="token punctuation">(</span>QueueName<span class="token operator">=</span><span class="token string">&#39;test&#39;</span><span class="token punctuation">)</span>

<span class="token comment"># 큐의 식별자와 속성에 접근할 수 있습니다.</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>queue<span class="token punctuation">.</span>url<span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>queue<span class="token punctuation">.</span>attributes<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">&#39;DelaySeconds&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>기존 큐에 대한 모든 목록을 볼 수도 있습니다.</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token comment"># ARN(아마존 자원 이름)의 일부인 큐 이름을 각각 출력합니다.</span>
<span class="token keyword">for</span> queue <span class="token keyword">in</span> sqs<span class="token punctuation">.</span>queues<span class="token punctuation">.</span><span class="token builtin">all</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span>queue<span class="token punctuation">.</span>url<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="hint-container tip"><p class="hint-container-title">Tips</p><p>큐로부터 이름을 가져오려면, 큐의 <code>attributes</code> 속성에서 가능한 ARN을 사용해야합니다.<br><code>queue.attributes[&#39;QueueArn&#39;].split(&#39;:&#39;)[-1]</code>에서 이름을 반환합니다.</p></div>`,7),y={href:"https://boto3.amazonaws.com/v1/documentation/api/latest/reference/services/sqs.html#SQS.ServiceResource.get_queue_by_name",target:"_blank",rel:"noopener noreferrer"},q={href:"https://boto3.amazonaws.com/v1/documentation/api/latest/reference/services/sqs.html#SQS.ServiceResource.queues",target:"_blank",rel:"noopener noreferrer"},f=t(`<h2 id="메시지-전송하기" tabindex="-1"><a class="header-anchor" href="#메시지-전송하기" aria-hidden="true">#</a> 메시지 전송하기</h2><p>메시지를 전송하면 큐의 맨끝에 메시지가 추가됩니다.</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token comment"># 서비스 자원 가져오기</span>
sqs <span class="token operator">=</span> boto3<span class="token punctuation">.</span>resource<span class="token punctuation">(</span><span class="token string">&#39;sqs&#39;</span><span class="token punctuation">)</span>

<span class="token comment"># 큐 가져오기</span>
queue <span class="token operator">=</span> sqs<span class="token punctuation">.</span>get_queue_by_name<span class="token punctuation">(</span>QueueName<span class="token operator">=</span><span class="token string">&#39;test&#39;</span><span class="token punctuation">)</span>

<span class="token comment"># 새로운 메시지 생성하기</span>
response <span class="token operator">=</span> queue<span class="token punctuation">.</span>send_message<span class="token punctuation">(</span>MessageBody<span class="token operator">=</span><span class="token string">&#39;world&#39;</span><span class="token punctuation">)</span>

<span class="token comment"># 응답은 자원이 아니지만, 메시지ID와 MD5를 제공합니다</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>response<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">&#39;MessageId&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>response<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">&#39;MD5OfMessageBody&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>사용자정의 속성을 포함하여 메시지를 생성할 수 있습니다.</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>queue<span class="token punctuation">.</span>send_message<span class="token punctuation">(</span>MessageBody<span class="token operator">=</span><span class="token string">&#39;boto3&#39;</span><span class="token punctuation">,</span> MessageAttributes<span class="token operator">=</span><span class="token punctuation">{</span>
    <span class="token string">&#39;Author&#39;</span><span class="token punctuation">:</span> <span class="token punctuation">{</span>
        <span class="token string">&#39;StringValue&#39;</span><span class="token punctuation">:</span> <span class="token string">&#39;Daniel&#39;</span><span class="token punctuation">,</span>
        <span class="token string">&#39;DataType&#39;</span><span class="token punctuation">:</span> <span class="token string">&#39;String&#39;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>또한 메시지를 배치로 전송할 수 있습니다.<br> 한개의 요청에 두개의 메시지를 서술하여 전송하는 것은 아래와 같습니다.</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>response <span class="token operator">=</span> queue<span class="token punctuation">.</span>send_messages<span class="token punctuation">(</span>Entries<span class="token operator">=</span><span class="token punctuation">[</span>
    <span class="token punctuation">{</span>
        <span class="token string">&#39;Id&#39;</span><span class="token punctuation">:</span> <span class="token string">&#39;1&#39;</span><span class="token punctuation">,</span>
        <span class="token string">&#39;MessageBody&#39;</span><span class="token punctuation">:</span> <span class="token string">&#39;world&#39;</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token punctuation">{</span>
        <span class="token string">&#39;Id&#39;</span><span class="token punctuation">:</span> <span class="token string">&#39;2&#39;</span><span class="token punctuation">,</span>
        <span class="token string">&#39;MessageBody&#39;</span><span class="token punctuation">:</span> <span class="token string">&#39;boto3&#39;</span><span class="token punctuation">,</span>
        <span class="token string">&#39;MessageAttributes&#39;</span><span class="token punctuation">:</span> <span class="token punctuation">{</span>
            <span class="token string">&#39;Author&#39;</span><span class="token punctuation">:</span> <span class="token punctuation">{</span>
                <span class="token string">&#39;StringValue&#39;</span><span class="token punctuation">:</span> <span class="token string">&#39;Daniel&#39;</span><span class="token punctuation">,</span>
                <span class="token string">&#39;DataType&#39;</span><span class="token punctuation">:</span> <span class="token string">&#39;String&#39;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">]</span><span class="token punctuation">)</span>

<span class="token comment"># 실패 내용 출력하기</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>response<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">&#39;Failed&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>위 경우 응답에 <code>Successful</code>과 <code>Failed</code> 메시지의 목록을 포함하고 있으며 필요시 실패한 메시지를 재전송할 수 있습니다.</p>`,8),Q={href:"https://boto3.amazonaws.com/v1/documentation/api/latest/reference/services/sqs.html#SQS.Queue.send_message",target:"_blank",rel:"noopener noreferrer"},w={href:"https://boto3.amazonaws.com/v1/documentation/api/latest/reference/services/sqs.html#SQS.Queue.send_messages",target:"_blank",rel:"noopener noreferrer"},x=t(`<h2 id="메시지-처리하기" tabindex="-1"><a class="header-anchor" href="#메시지-처리하기" aria-hidden="true">#</a> 메시지 처리하기</h2><p>메시지는 배치에서 처리됩니다.</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token comment"># 서비스 자원 가져오기</span>
sqs <span class="token operator">=</span> boto3<span class="token punctuation">.</span>resource<span class="token punctuation">(</span><span class="token string">&#39;sqs&#39;</span><span class="token punctuation">)</span>

<span class="token comment"># 큐 가져오기</span>
queue <span class="token operator">=</span> sqs<span class="token punctuation">.</span>get_queue_by_name<span class="token punctuation">(</span>QueueName<span class="token operator">=</span><span class="token string">&#39;test&#39;</span><span class="token punctuation">)</span>

<span class="token comment"># 메시지를 처리하여 본문, 작성자(선택)을 출력하기</span>
<span class="token keyword">for</span> message <span class="token keyword">in</span> queue<span class="token punctuation">.</span>receive_messages<span class="token punctuation">(</span>MessageAttributeNames<span class="token operator">=</span><span class="token punctuation">[</span><span class="token string">&#39;Author&#39;</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token comment"># 있으면 작성자 메시지 속성을 가져오기</span>
    author_text <span class="token operator">=</span> <span class="token string">&#39;&#39;</span>
    <span class="token keyword">if</span> message<span class="token punctuation">.</span>message_attributes <span class="token keyword">is</span> <span class="token keyword">not</span> <span class="token boolean">None</span><span class="token punctuation">:</span>
        author_name <span class="token operator">=</span> message<span class="token punctuation">.</span>message_attributes<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">&#39;Author&#39;</span><span class="token punctuation">)</span><span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">&#39;StringValue&#39;</span><span class="token punctuation">)</span>
        <span class="token keyword">if</span> author_name<span class="token punctuation">:</span>
            author_text <span class="token operator">=</span> <span class="token string">&#39; ({0})&#39;</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>author_name<span class="token punctuation">)</span>
        
    <span class="token comment"># 본문과 작성자(있으면)를 출력하기</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&#39;Hello, {0}!{1}&#39;</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>message<span class="token punctuation">.</span>body<span class="token punctuation">,</span> author_text<span class="token punctuation">)</span><span class="token punctuation">)</span>
    
    <span class="token comment"># 큐에게 메시지가 처리되었다고 알리기</span>
    message<span class="token punctuation">.</span>delete<span class="token punctuation">(</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,3),A={href:"https://boto3.amazonaws.com/v1/documentation/api/latest/reference/services/sqs.html#SQS.Queue.send_messages",target:"_blank",rel:"noopener noreferrer"},z=t(`<div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>Hello, world!
Hello, boto3! (Daniel)
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div>`,1),M={href:"https://boto3.amazonaws.com/v1/documentation/api/latest/reference/services/sqs.html#SQS.Queue.receive_messages",target:"_blank",rel:"noopener noreferrer"},N={href:"https://boto3.amazonaws.com/v1/documentation/api/latest/reference/services/sqs.html#SQS.Message.delete",target:"_blank",rel:"noopener noreferrer"};function B(D,R){const e=p("ExternalLinkIcon"),o=p("AdsenseB");return i(),l("div",null,[s("p",null,[n("원본 : "),s("a",r,[n("https://boto3.amazonaws.com/v1/documentation/api/latest/guide/sqs.html"),a(e)])]),s("p",null,[n("이 튜토리얼은 AWS 서비스에서 Boto3를 어떻게 사용하는지 보여줍니다."),d,n(" 이번 예제 튜토리얼에서 "),s("a",k,[n("아마존 단순 큐 서비스(Amazon Simple Queue Service (SQS))"),a(e)]),n("를 Boto3로 사용하는 법을 배울 수 있습니다.")]),m,s("p",null,[n("SQS는 큐와 메시지 프로세스를 가능하게 합니다."),v,n(" 이번 튜토리얼에서 "),s("a",b,[n("자원"),a(e)]),n("과 "),s("a",g,[n("컬렉션"),a(e)]),n("으로 새로운 큐를 생성하고 기존 큐를 가져오고 사용하는 것, 큐에 새로운 메시지를 주입하고 큐에서 메시지를 처리하는 것을 배울 것 입니다.")]),h,s("p",null,[n("참조 : "),s("a",_,[n("SQS.ServiceResource.create_queue()"),a(e)])]),S,s("p",null,[n("참조 : "),s("a",y,[n("SQS.ServiceResource.get_queue_by_name()"),a(e)]),n(", "),s("a",q,[n("SQS.ServiceResource.queues"),a(e)])]),f,s("p",null,[n("참조 : "),s("a",Q,[n("SQS.Queue.send_message()"),a(e)]),n(", "),s("a",w,[n("SQS.Queue.send_messages()"),a(e)])]),x,s("p",null,[n("이전 절에서 "),s("a",A,[n("SQS.Queue.send_messages()"),a(e)]),n("로 배치전송된 메시지만 가져오게 된다면 위 코드는 아래와 같이 출력됩니다.")]),z,s("p",null,[n("참조 : "),s("a",M,[n("SQS.Queue.receive_messages()"),a(e)]),n(", "),s("a",N,[n("SQS.Message.delete()"),a(e)])]),a(o)])}const I=c(u,[["render",B],["__file","sample-tutorial.html.vue"]]);export{I as default};
