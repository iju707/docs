import{_ as d,r as l,o as t,c as r,a as n,b as e,d as s,w as o,e as i}from"./app-95e21c4a.js";const p={},u=i(`<p>Compose의 다양한 곳에서 여러가지 의미로 환경변수를 사용합니다.<br> 이번 페이지에서 관련된 필요정보를 확인해볼수 있습니다.</p><h2 id="compose-파일의-환경변수-대체" tabindex="-1"><a class="header-anchor" href="#compose-파일의-환경변수-대체" aria-hidden="true">#</a> Compose 파일의 환경변수 대체</h2><p>Compose 파일내 변수를 추출하여 쉘의 환경변수로 사용할 수 있습니다.</p><div class="language-yaml line-numbers-mode" data-ext="yml"><pre class="language-yaml"><code><span class="token key atrule">web</span><span class="token punctuation">:</span>
  <span class="token key atrule">image</span><span class="token punctuation">:</span> <span class="token string">&quot;webapp:\${TAG}&quot;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>다수의 환경변수를 가지고 있다면 환경변수파일 경로를 사용해서 대체할 수 있습니다.<br> 기본적으로 <code>docker-compose</code> 명령은 동일 프로젝트 디렉터리(Compose 파일이 있는 상위 폴더)의 <code>.env</code> 파일을 찾게 됩니다.</p><p>파일을 독립변수로 전달하면 어디든 저장하고 이름만 적절하게 지정하면 됩니다.<br> 예로들면, <code>.env.ci</code>, <code>.env.dev</code>, <code>.env.prod</code>와 같습니다.<br> 파일 경로 전달은 <code>--env-file</code> 옵션을 사용하면 됩니다.</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">docker-compose</span> --env-file ./config/.env.dev up 
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div>`,7),v=n("h2",{id:"컨테이너의-환경변수-설정",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#컨테이너의-환경변수-설정","aria-hidden":"true"},"#"),e(" 컨테이너의 환경변수 설정")],-1),m=n("code",null,"docker run -e VARIABLE=VALUE ...",-1),b=n("code",null,"environment",-1),h=i(`<div class="language-yaml line-numbers-mode" data-ext="yml"><pre class="language-yaml"><code><span class="token key atrule">web</span><span class="token punctuation">:</span>
  <span class="token key atrule">environment</span><span class="token punctuation">:</span>
    <span class="token punctuation">-</span> DEBUG=1
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="컨테이너의-환경변수-전달" tabindex="-1"><a class="header-anchor" href="#컨테이너의-환경변수-전달" aria-hidden="true">#</a> 컨테이너의 환경변수 전달</h2>`,2),k=n("code",null,"docker run -e VARIABLE ...",-1),_=n("code",null,"environment",-1),g=i(`<div class="language-yaml line-numbers-mode" data-ext="yml"><pre class="language-yaml"><code><span class="token key atrule">web</span><span class="token punctuation">:</span>
  <span class="token key atrule">environment</span><span class="token punctuation">:</span>
    <span class="token punctuation">-</span> DEBUG
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>컨테이너의 <code>DEBUG</code> 변수 값은 Compose가 실행된 쉘의 동일 변수값으로 전달됩니다.</p><h2 id="env-file-구성-옵션" tabindex="-1"><a class="header-anchor" href="#env-file-구성-옵션" aria-hidden="true">#</a> &quot;env_file&quot; 구성 옵션</h2>`,3),f=n("code",null,"docker run --env-file=FILE ...",-1),x=i(`<div class="language-yaml line-numbers-mode" data-ext="yml"><pre class="language-yaml"><code><span class="token key atrule">web</span><span class="token punctuation">:</span>
  <span class="token key atrule">env_file</span><span class="token punctuation">:</span>
    <span class="token punctuation">-</span> web<span class="token punctuation">-</span>variables.env
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="docker-compose-run의-환경변수-설정" tabindex="-1"><a class="header-anchor" href="#docker-compose-run의-환경변수-설정" aria-hidden="true">#</a> <code>docker-compose run</code>의 환경변수 설정</h2><p><code>docker run -e</code>와 같이 <code>docker-compose run -e</code>를 사용하여 일회성 컨테이너에 환경변수를 설정할 수 있습니다.</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">docker-compose</span> run <span class="token parameter variable">-e</span> <span class="token assign-left variable">DEBUG</span><span class="token operator">=</span><span class="token number">1</span> web python console.py
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>또한 값을 주지 않으면 쉘의 변수값을 전달할 수 있습니다.</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">docker-compose</span> run <span class="token parameter variable">-e</span> DEBUG web python console.py
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>컨테이너의 <code>DEBUG</code> 변수값은 Compose가 실행된 쉘에 동일한 변수의 값으로 전달됩니다.</p><h2 id="env-파일" tabindex="-1"><a class="header-anchor" href="#env-파일" aria-hidden="true">#</a> &quot;.env&quot; 파일</h2>`,8),y=n("code",null,".env",-1),E=i(`<div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>$ <span class="token function">cat</span> .env
<span class="token assign-left variable">TAG</span><span class="token operator">=</span>v1.5

$ <span class="token function">cat</span> docker-compose.yml
version: <span class="token string">&#39;3&#39;</span>
services:
  web:
    image: <span class="token string">&quot;webapp:<span class="token variable">\${TAG}</span>&quot;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,1),C=n("code",null,"docker-compose up",-1),w=n("code",null,"web",-1),B=n("code",null,"webapp:v1.5",-1),D=n("br",null,null,-1),N=i(`<div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>$ <span class="token function">docker-compose</span> config

version: <span class="token string">&#39;3&#39;</span>
services:
  web:
    image: <span class="token string">&#39;webapp:v1.5&#39;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>쉘의 값이 <code>.env</code> 파일에 정의된것보다 우선되어집니다.<br> 쉘에서 <code>TAG</code>를 다른값으로 설정하면 <code>image</code>에 치환되는 값이 변경됩니다.</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>$ <span class="token builtin class-name">export</span> <span class="token assign-left variable">TAG</span><span class="token operator">=</span>v2.0
$ <span class="token function">docker-compose</span> config

version: <span class="token string">&#39;3&#39;</span>
services:
  web:
    image: <span class="token string">&#39;webapp:v2.0&#39;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>다수의 파일에 동일한 환경변수를 설정하면, Compose는 아래의 우선순위로 값을 선택하게 됩니다.</p><ol><li>Compose 파일</li><li>쉘 환경변수</li><li>환경 파일</li><li>Dockerfile</li><li>정의되지 않은 변수</li></ol><p>아래의 예제는 환경파일과 Compose 파일에 동일한 환경변수를 설정한 것 입니다.</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>$ <span class="token function">cat</span> ./Docker/api/api.env
<span class="token assign-left variable">NODE_ENV</span><span class="token operator">=</span>test

$ <span class="token function">cat</span> docker-compose.yml
version: <span class="token string">&#39;3&#39;</span>
services:
  api:
    image: <span class="token string">&#39;node:6-alpine&#39;</span>
    env_file:
     - ./Docker/api/api.env
    environment:
     - <span class="token assign-left variable">NODE_ENV</span><span class="token operator">=</span>production
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>컨테이너를 실행하면 환경변수는 Compose 파일에 정의된 값을 사용하게 됩니다.</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>$ <span class="token function">docker-compose</span> <span class="token builtin class-name">exec</span> api <span class="token function">node</span>

<span class="token operator">&gt;</span> p<wbr>rocess.env.NODE_ENV
<span class="token string">&#39;production&#39;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Docker Compose 항목에 <code>environment</code>나 <code>env_file</code>이 없는 경우에만 <code>Dockerfile</code>에 <code>ARG</code>나 <code>ENV</code>를 처리하게 됩니다.</p><blockquote><p>NodeJS 컨테이너 세부사항</p><p><code>package.json</code>에 <code>script:start</code>를 위해 <code>NODE_ENV=test node server.js</code>와 같이 설정되어있으면 <code>docker-compose.yml</code> 파일에 설정된건 무시됩니다.</p></blockquote><h2 id="환경변수를-사용하여-compose-구성" tabindex="-1"><a class="header-anchor" href="#환경변수를-사용하여-compose-구성" aria-hidden="true">#</a> 환경변수를 사용하여 Compose 구성</h2>`,12),A=n("br",null,null,-1),V=n("code",null,"COMPOSE_",-1),G=n("code",null,"DOCKER_",-1),q=n("h2",{id:"links를-활용한-환경변수",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#links를-활용한-환경변수","aria-hidden":"true"},"#"),e(" links를 활용한 환경변수")],-1),$=n("br",null,null,-1),L=n("br",null,null,-1);function O(U,R){const a=l("RouterLink"),c=l("AdsenseB");return t(),r("div",null,[u,n("p",null,[e("더 많은 정보는 Compose 파일 참조의 "),s(a,{to:"/docker/compose/compose-file/compose-file-v3.html#%EB%B3%80%EC%88%98%EB%8C%80%EC%B2%B4"},{default:o(()=>[e("변수대체")]),_:1}),e(" 섹션을 참고하시기 바랍니다.")]),v,n("p",null,[m,e(" 명령과 같이 서비스 컨테이너의 환경변수를 "),s(a,{to:"/docker/compose/compose-file/compose-file-v3.html#environment"},{default:o(()=>[b,e(" 키")]),_:1}),e("로 설정할 수 있습니다.")]),h,n("p",null,[k,e(" 명령과 같이 서비스의 컨테이너에 "),s(a,{to:"/docker/compose/compose-file/compose-file-v3.html#environment"},{default:o(()=>[_,e(" 키")]),_:1}),e("를 값없이 설정하여 쉘의 환경변수를 전달할 수 있습니다.")]),g,n("p",null,[f,e(" 명령과 같이 서비스의 컨테이너에 "),s(a,{to:"/docker/compose/compose-file/compose-file-v3.html#env_file"},{default:o(()=>[e("'env_file' 옵션")]),_:1}),e("으로 외부파일을 사용하여 다수의 환경변수를 전달할 수 있습니다.")]),x,n("p",null,[e("Compose 파일 또는 구성에서 참조할 환경변수의 기본값을 "),y,e("라는 "),s(a,{to:"/docker/compose/env-file.html"},{default:o(()=>[e("환경파일")]),_:1}),e("에 설정할 수 있습니다.")]),E,n("p",null,[C,e("을 실행하면 "),w,e(" 서비스는 "),B,e("을 사용하게 됩니다."),D,s(a,{to:"/docker/compose/reference/config.html"},{default:o(()=>[e("config 명령어")]),_:1}),e("로 터미널에 실행중인 어플리케이션 구성을 출력하여 검증할 수 있습니다.")]),N,n("p",null,[e("다수의 환경변수는 Docker Compose 명령어 방식으로 구성할 수 있습니다."),A,e(" 이것은 "),V,e("나 "),G,e("로 시작하며 자세한 것은 "),s(a,{to:"/docker/compose/reference/envvars.html"},{default:o(()=>[e("CLI 환경변수")]),_:1}),e("를 참고하세요.")]),q,n("p",null,[s(a,{to:"/docker/compose/compose-file/compose-file-v1.html#link-environment-variables"},{default:o(()=>[e("v1 Compose 파일")]),_:1}),e("에 "),s(a,{to:"/docker/compose/compose-file/compose-file-v3.html#links"},{default:o(()=>[e("'links' 옵션")]),_:1}),e("을 사용할 경우, 환경변수는 각각의 링크에 생성됩니다."),$,e(" 이 변수는 만료되었습니다."),L,e(" like 별칭대신 hostname을 사용하시기 바랍니다.")]),s(c)])}const I=d(p,[["render",O],["__file","environment-variables.html.vue"]]);export{I as default};
