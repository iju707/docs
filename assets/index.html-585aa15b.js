import{_ as i,r as c,o as u,c as r,a as n,b as s,d as a,w as e,e as p}from"./app-95e21c4a.js";const d={},k={href:"https://dart.dev/language",target:"_blank",rel:"noopener noreferrer"},m=n("p",null,"이 페이지는 Dart 언어의 주요기능에 대하여 예제를 가지고 간략한 소개를 제공합니다.",-1),v={href:"https://dart.dev/guides/libraries/library-tour",target:"_blank",rel:"noopener noreferrer"},b=n("br",null,null,-1),h={href:"https://dart.dev/codelabs/dart-cheatsheet",target:"_blank",rel:"noopener noreferrer"},g=n("h2",{id:"variables",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#variables","aria-hidden":"true"},"#"),s(" 변수")],-1),_=n("code",null,"var",-1),f=n("br",null,null,-1),y=p(`<div class="language-dart line-numbers-mode" data-ext="dart"><pre class="language-dart"><code><span class="token keyword">var</span> name <span class="token operator">=</span> <span class="token string-literal"><span class="token string">&#39;Voyager I&#39;</span></span><span class="token punctuation">;</span>
<span class="token keyword">var</span> year <span class="token operator">=</span> <span class="token number">1977</span><span class="token punctuation">;</span>
<span class="token keyword">var</span> antennaDiameter <span class="token operator">=</span> <span class="token number">3.7</span><span class="token punctuation">;</span>
<span class="token keyword">var</span> flybyObjects <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string-literal"><span class="token string">&#39;Jupiter&#39;</span></span><span class="token punctuation">,</span> <span class="token string-literal"><span class="token string">&#39;Saturn&#39;</span></span><span class="token punctuation">,</span> <span class="token string-literal"><span class="token string">&#39;Uranus&#39;</span></span><span class="token punctuation">,</span> <span class="token string-literal"><span class="token string">&#39;Neptune&#39;</span></span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token keyword">var</span> image <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token string-literal"><span class="token string">&#39;tags&#39;</span></span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string-literal"><span class="token string">&#39;saturn&#39;</span></span><span class="token punctuation">]</span><span class="token punctuation">,</span>
  <span class="token string-literal"><span class="token string">&#39;url&#39;</span></span><span class="token punctuation">:</span> <span class="token string-literal"><span class="token string">&#39;//path/to/saturn.jpg&#39;</span></span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,1),w=n("code",null,"final",-1),x=n("code",null,"const",-1),D=p(`<h2 id="control-flow-statements" tabindex="-1"><a class="header-anchor" href="#control-flow-statements" aria-hidden="true">#</a> 흐름 제어문</h2><p>Dart는 일반적인 흐름 제어문을 지원합니다.</p><div class="language-dart line-numbers-mode" data-ext="dart"><pre class="language-dart"><code><span class="token keyword">if</span> <span class="token punctuation">(</span>year <span class="token operator">&gt;=</span> <span class="token number">2001</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token function">print</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&#39;21st century&#39;</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>year <span class="token operator">&gt;=</span> <span class="token number">1901</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token function">print</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&#39;20th century&#39;</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">final</span> object <span class="token keyword">in</span> flybyObjects<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token function">print</span><span class="token punctuation">(</span>object<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">for</span> <span class="token punctuation">(</span>int month <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> month <span class="token operator">&lt;=</span> <span class="token number">12</span><span class="token punctuation">;</span> month<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token function">print</span><span class="token punctuation">(</span>month<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">while</span> <span class="token punctuation">(</span>year <span class="token operator">&lt;</span> <span class="token number">2016</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  year <span class="token operator">+=</span> <span class="token number">1</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,3),S=n("code",null,"break",-1),j=n("code",null,"continue",-1),T=n("code",null,"switch",-1),P=n("code",null,"case",-1),I=n("code",null,"assert",-1),O=n("h2",{id:"functions",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#functions","aria-hidden":"true"},"#"),s(" 함수")],-1),E={href:"https://dart.dev/guides/language/effective-dart/design#types",target:"_blank",rel:"noopener noreferrer"},$=p(`<div class="language-dart line-numbers-mode" data-ext="dart"><pre class="language-dart"><code>int <span class="token function">fibonacci</span><span class="token punctuation">(</span>int n<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>n <span class="token operator">==</span> <span class="token number">0</span> <span class="token operator">||</span> n <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token keyword">return</span> n<span class="token punctuation">;</span>
  <span class="token keyword">return</span> <span class="token function">fibonacci</span><span class="token punctuation">(</span>n <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token function">fibonacci</span><span class="token punctuation">(</span>n <span class="token operator">-</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">var</span> result <span class="token operator">=</span> <span class="token function">fibonacci</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>단축 <code>=&gt;</code>(화살표) 문법은 단일 명령문을 포함한 함수를 다룹니다.<br> 이 문법은 익명함수를 인자로 전달할 때 특히 유용합니다.</p><div class="language-dart line-numbers-mode" data-ext="dart"><pre class="language-dart"><code>flybyObjects<span class="token punctuation">.</span><span class="token function">where</span><span class="token punctuation">(</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">&gt;</span> name<span class="token punctuation">.</span><span class="token function">contains</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&#39;turn&#39;</span></span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>print<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>익명함수를 보여주는것 외에(<code>where()</code> 인자), 함수를 인자로 사용할 수 있는 코드를 보여줍니다. (<code>forEach()</code>의 인자로 상위 <code>print()</code> 함수를 전달)</p>`,4),N=p(`<h2 id="comments" tabindex="-1"><a class="header-anchor" href="#comments" aria-hidden="true">#</a> 주석</h2><p>Dart의 주석은 일반적으로 <code>//</code>으로 시작합니다.</p><div class="language-dart line-numbers-mode" data-ext="dart"><pre class="language-dart"><code><span class="token comment">// This is a normal, one-line comment.</span>

<span class="token comment">/// This is a documentation comment, used to document libraries,</span>
<span class="token comment">/// classes, and their members. Tools like IDEs and dartdoc treat</span>
<span class="token comment">/// doc comments specially.</span>

<span class="token comment">/* Comments like these are also supported. */</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,3),F=p(`<h2 id="imports" tabindex="-1"><a class="header-anchor" href="#imports" aria-hidden="true">#</a> 가져오기</h2><p>다른 라이브러리에 정의된 API에 접근하려면 <code>import</code>를 사용합니다.</p><div class="language-dart line-numbers-mode" data-ext="dart"><pre class="language-dart"><code><span class="token comment">// 코어 라이브러리 가져오기</span>
<span class="token keyword">import</span> <span class="token string-literal"><span class="token string">&#39;dart:math&#39;</span></span><span class="token punctuation">;</span>

<span class="token comment">// 외부 패키지에서 라이브러리 가져오기</span>
<span class="token keyword">import</span> <span class="token string-literal"><span class="token string">&#39;package:test/test.dart&#39;</span></span><span class="token punctuation">;</span>

<span class="token comment">// 파일에서 가져오기</span>
<span class="token keyword">import</span> <span class="token string-literal"><span class="token string">&#39;path/to/my_other_file.dart&#39;</span></span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,3),C=n("code",null,"show",-1),L=n("code",null,"hide",-1),R=n("code",null,"deferred",-1),V=p(`<h2 id="classes" tabindex="-1"><a class="header-anchor" href="#classes" aria-hidden="true">#</a> 클래스</h2><p>여기 세개의 속성, 두개의 생성자, 그리고 메소드를 가진 클래스 예제가 있습니다.<br> 속성중 한개는 직접 설정이 불가능하며, getter 메소드(변수 대신)를 사용해서 정의하고 있습니다.<br> 메소드는 문자열 보간을 사용해서 변수에 대한 문자열 내부의 문자 동등여부를 출력합니다.</p><div class="language-dart line-numbers-mode" data-ext="dart"><pre class="language-dart"><code><span class="token keyword">class</span> <span class="token class-name">Spacecraft</span> <span class="token punctuation">{</span>
  <span class="token class-name">String</span> name<span class="token punctuation">;</span>
  <span class="token class-name">DateTime</span><span class="token operator">?</span> launchDate<span class="token punctuation">;</span>

  <span class="token comment">// 읽기전용인 non-final 속성</span>
  int<span class="token operator">?</span> <span class="token keyword">get</span> launchYear <span class="token operator">=</span><span class="token operator">&gt;</span> launchDate<span class="token operator">?</span><span class="token punctuation">.</span>year<span class="token punctuation">;</span>

  <span class="token comment">// 멤버에 대한 할당이 문법적으로 자동화된 생성자</span>
  <span class="token class-name">Spacecraft</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>launchDate<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// 필요시 초기화 코드</span>
  <span class="token punctuation">}</span>

  <span class="token comment">// 기본값을 전달하기 위한 명명된 생성자</span>
  <span class="token class-name">Spacecraft</span><span class="token punctuation">.</span><span class="token function">unlaunched</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">)</span> <span class="token punctuation">:</span> <span class="token keyword">this</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token comment">// 메소드</span>
  <span class="token keyword">void</span> <span class="token function">describe</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token function">print</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&#39;Spacecraft: </span><span class="token interpolation"><span class="token punctuation">$</span><span class="token expression">name</span></span><span class="token string">&#39;</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// 타입 상승은 getter에서 동작하지 않습니다.</span>
    <span class="token keyword">var</span> launchDate <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>launchDate<span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>launchDate <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      int years <span class="token operator">=</span> <span class="token class-name">DateTime</span><span class="token punctuation">.</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">difference</span><span class="token punctuation">(</span>launchDate<span class="token punctuation">)</span><span class="token punctuation">.</span>inDays <span class="token operator">~/</span> <span class="token number">365</span><span class="token punctuation">;</span>
      <span class="token function">print</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&#39;Launched: </span><span class="token interpolation"><span class="token punctuation">$</span><span class="token expression">launchYear</span></span><span class="token string"> (</span><span class="token interpolation"><span class="token punctuation">$</span><span class="token expression">years</span></span><span class="token string"> years ago)&#39;</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
      <span class="token function">print</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&#39;Unlaunched&#39;</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,3),A=n("code",null,"toString()",-1),B=p(`<p><code>Spacecraft</code> 클래스를 아래와 같이 사용할 것 입니다.</p><div class="language-dart line-numbers-mode" data-ext="dart"><pre class="language-dart"><code><span class="token keyword">var</span> voyager <span class="token operator">=</span> <span class="token class-name">Spacecraft</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&#39;Voyager I&#39;</span></span><span class="token punctuation">,</span> <span class="token class-name">DateTime</span><span class="token punctuation">(</span><span class="token number">1977</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
voyager<span class="token punctuation">.</span><span class="token function">describe</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">var</span> voyager3 <span class="token operator">=</span> <span class="token class-name">Spacecraft</span><span class="token punctuation">.</span><span class="token function">unlaunched</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&#39;Voyager III&#39;</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
voyager3<span class="token punctuation">.</span><span class="token function">describe</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,2),q=n("code",null,"new",-1),M=n("code",null,"const",-1),W=n("code",null,"factory",-1),Y=p(`<h2 id="enums" tabindex="-1"><a class="header-anchor" href="#enums" aria-hidden="true">#</a> 열거형</h2><p>열거형은 사전정의된 값 또는 인스턴스(다른 타입의 인스턴스가 없는 조건)의 집합을 열거하는 방법입니다.</p><p>사전정의된 식물타입의 간단한 목록인 단순 <code>enum</code>의 예제입니다.</p><div class="language-dart line-numbers-mode" data-ext="dart"><pre class="language-dart"><code><span class="token keyword">enum</span> <span class="token class-name">PlanetType</span> <span class="token punctuation">{</span> terrestrial<span class="token punctuation">,</span> gas<span class="token punctuation">,</span> ice <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>태양계 이름을 사용하여 정의된 상수 인스턴스 집합인 행성계 클래스의 향상된 열거형 선언 예제입니다.</p><div class="language-dart line-numbers-mode" data-ext="dart"><pre class="language-dart"><code><span class="token comment">/// 태양계 시스템과 몇몇 속성을 가진 다른 행성의 열거형</span>
<span class="token keyword">enum</span> <span class="token class-name">Planet</span> <span class="token punctuation">{</span>
  <span class="token function">mercury</span><span class="token punctuation">(</span>planetType<span class="token punctuation">:</span> <span class="token class-name">PlanetType</span><span class="token punctuation">.</span>terrestrial<span class="token punctuation">,</span> moons<span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">,</span> hasRings<span class="token punctuation">:</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
  <span class="token function">venus</span><span class="token punctuation">(</span>planetType<span class="token punctuation">:</span> <span class="token class-name">PlanetType</span><span class="token punctuation">.</span>terrestrial<span class="token punctuation">,</span> moons<span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">,</span> hasRings<span class="token punctuation">:</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
  <span class="token comment">// ···</span>
  <span class="token function">uranus</span><span class="token punctuation">(</span>planetType<span class="token punctuation">:</span> <span class="token class-name">PlanetType</span><span class="token punctuation">.</span>ice<span class="token punctuation">,</span> moons<span class="token punctuation">:</span> <span class="token number">27</span><span class="token punctuation">,</span> hasRings<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
  <span class="token function">neptune</span><span class="token punctuation">(</span>planetType<span class="token punctuation">:</span> <span class="token class-name">PlanetType</span><span class="token punctuation">.</span>ice<span class="token punctuation">,</span> moons<span class="token punctuation">:</span> <span class="token number">14</span><span class="token punctuation">,</span> hasRings<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token comment">/// 상수를 만드는 생성자</span>
  <span class="token keyword">const</span> <span class="token class-name">Planet</span><span class="token punctuation">(</span>
      <span class="token punctuation">{</span>required <span class="token keyword">this</span><span class="token punctuation">.</span>planetType<span class="token punctuation">,</span> required <span class="token keyword">this</span><span class="token punctuation">.</span>moons<span class="token punctuation">,</span> required <span class="token keyword">this</span><span class="token punctuation">.</span>hasRings<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token comment">/// 모든 인스턴스의 변수는 final</span>
  <span class="token keyword">final</span> <span class="token class-name">PlanetType</span> planetType<span class="token punctuation">;</span>
  <span class="token keyword">final</span> int moons<span class="token punctuation">;</span>
  <span class="token keyword">final</span> bool hasRings<span class="token punctuation">;</span>

  <span class="token comment">/// 향상된 enum은 getter와 다른 메소드를 지원함</span>
  bool <span class="token keyword">get</span> isGiant <span class="token operator">=</span><span class="token operator">&gt;</span>
      planetType <span class="token operator">==</span> <span class="token class-name">PlanetType</span><span class="token punctuation">.</span>gas <span class="token operator">||</span> planetType <span class="token operator">==</span> <span class="token class-name">PlanetType</span><span class="token punctuation">.</span>ice<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>Planet</code> enum은 다음과 같이 사용합니다.</p><div class="language-dart line-numbers-mode" data-ext="dart"><pre class="language-dart"><code><span class="token keyword">final</span> yourPlanet <span class="token operator">=</span> <span class="token class-name">Planet</span><span class="token punctuation">.</span>earth<span class="token punctuation">;</span>

<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>yourPlanet<span class="token punctuation">.</span>isGiant<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token function">print</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&#39;Your planet is not a &quot;giant planet&quot;.&#39;</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,8),G=p(`<h2 id="inheritance" tabindex="-1"><a class="header-anchor" href="#inheritance" aria-hidden="true">#</a> 상속</h2><p>Dart는 단일 상속을 가집니다.</p><div class="language-dart line-numbers-mode" data-ext="dart"><pre class="language-dart"><code><span class="token keyword">class</span> <span class="token class-name">Orbiter</span> <span class="token keyword">extends</span> <span class="token class-name">Spacecraft</span> <span class="token punctuation">{</span>
  double altitude<span class="token punctuation">;</span>

  <span class="token class-name">Orbiter</span><span class="token punctuation">(</span><span class="token keyword">super</span><span class="token punctuation">.</span>name<span class="token punctuation">,</span> <span class="token class-name">DateTime</span> <span class="token keyword">super</span><span class="token punctuation">.</span>launchDate<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>altitude<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,3),U=n("code",null,"@override",-1),J=p(`<h2 id="mixins" tabindex="-1"><a class="header-anchor" href="#mixins" aria-hidden="true">#</a> Mixin</h2><p>Mixin은 다중 클래스 계층에서 코드를 재사용하는 방법입니다.<br> 아래 mixin 정의가 있습니다.</p><div class="language-dart line-numbers-mode" data-ext="dart"><pre class="language-dart"><code><span class="token keyword">mixin</span> <span class="token class-name">Piloted</span> <span class="token punctuation">{</span>
  int astronauts <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>

  <span class="token keyword">void</span> <span class="token function">describeCrew</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token function">print</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&#39;Number of astronauts: </span><span class="token interpolation"><span class="token punctuation">$</span><span class="token expression">astronauts</span></span><span class="token string">&#39;</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>클래스에 mixin의 기능을 추가하려면 <code>with</code>로 mixin을 클래스에 확장시키면 됩니다.</p><div class="language-dart line-numbers-mode" data-ext="dart"><pre class="language-dart"><code><span class="token keyword">class</span> <span class="token class-name">PilotedCraft</span> <span class="token keyword">extends</span> <span class="token class-name">Spacecraft</span> <span class="token keyword">with</span> <span class="token class-name">Piloted</span> <span class="token punctuation">{</span>
  <span class="token comment">// ···</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>PilotedCraft</code>는 이제 <code>astronauts</code> 필드와 <code>describeCrew()</code> 메소드를 가지게 됩니다.</p>`,6),z=p(`<h2 id="interfaces-and-abstract-classes" tabindex="-1"><a class="header-anchor" href="#interfaces-and-abstract-classes" aria-hidden="true">#</a> 인터페이스와 추상 클래스</h2><p>Dart는 <code>interface</code> 키워드가 없습니다.<br> 대신 모든 클래스는 암묵적으로 인터페이스를 정의합니다.<br> 따라서 어떤 클래스든 구현할 수 있습니다.</p><div class="language-dart line-numbers-mode" data-ext="dart"><pre class="language-dart"><code><span class="token keyword">class</span> <span class="token class-name">MockSpaceship</span> <span class="token keyword">implements</span> <span class="token class-name">Spacecraft</span> <span class="token punctuation">{</span>
  <span class="token comment">// ···</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,3),H=n("p",null,[s("구성체 클래스에 의해 확장(또는 구현)되기 위한 추상 클래스를 만들 수 있습니다."),n("br"),s(" 추상 클래스는 추상 메소드(본문이 없는)를 포함합니다.")],-1),K=n("div",{class:"language-dart line-numbers-mode","data-ext":"dart"},[n("pre",{dart:"",class:"language-dart"},[n("code",null,[n("span",{class:"token keyword"},"abstract"),s(),n("span",{class:"token keyword"},"class"),s(),n("span",{class:"token class-name"},"Describable"),s(),n("span",{class:"token punctuation"},"{"),s(`
  `),n("span",{class:"token keyword"},"void"),s(),n("span",{class:"token function"},"describe"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`

  `),n("span",{class:"token keyword"},"void"),s(),n("span",{class:"token function"},"describeWithEmphasis"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token punctuation"},"{"),s(`
    `),n("span",{class:"token function"},"print"),n("span",{class:"token punctuation"},"("),n("span",{class:"token string-literal"},[n("span",{class:"token string"},"'========='")]),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`
    `),n("span",{class:"token function"},"describe"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`
    `),n("span",{class:"token function"},"print"),n("span",{class:"token punctuation"},"("),n("span",{class:"token string-literal"},[n("span",{class:"token string"},"'========='")]),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`
  `),n("span",{class:"token punctuation"},"}"),s(`
`),n("span",{class:"token punctuation"},"}"),s(`
`)])]),n("div",{class:"highlight-lines"},[n("div",{class:"highlight-line"}," "),n("br"),n("br"),n("br"),n("br"),n("br"),n("br"),n("br"),n("br")]),n("div",{class:"line-numbers","aria-hidden":"true"},[n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"})])],-1),Q=n("p",null,[n("code",null,"Describable"),s("를 확장한 어떤 클래스든 "),n("code",null,"describeWithEmphasis()"),s(" 메소드를 가지며 확장자의 "),n("code",null,"describe()"),s(" 구현을 호출하게 됩니다.")],-1),X=n("h2",{id:"async",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#async","aria-hidden":"true"},"#"),s(" 비동기")],-1),Z=n("p",null,[s("콜백 무덤을 피하고 좀더 코드를 읽기 쉽게 만들기 위해 "),n("code",null,"async"),s("와 "),n("code",null,"await"),s("를 사용합니다.")],-1),nn=n("div",{class:"language-dart line-numbers-mode","data-ext":"dart"},[n("pre",{dart:"",class:"language-dart"},[n("code",null,[n("span",{class:"token keyword"},"const"),s(" oneSecond "),n("span",{class:"token operator"},"="),s(),n("span",{class:"token class-name"},"Duration"),n("span",{class:"token punctuation"},"("),s("seconds"),n("span",{class:"token punctuation"},":"),s(),n("span",{class:"token number"},"1"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`
`),n("span",{class:"token comment"},"// ···"),s(`
`),n("span",{class:"token class-name"},"Future"),n("span",{class:"token generics"},[n("span",{class:"token punctuation"},"<"),n("span",{class:"token keyword"},"void"),n("span",{class:"token punctuation"},">")]),s(),n("span",{class:"token function"},"printWithDelay"),n("span",{class:"token punctuation"},"("),n("span",{class:"token class-name"},"String"),s(" message"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token keyword"},"async"),s(),n("span",{class:"token punctuation"},"{"),s(`
  `),n("span",{class:"token keyword"},"await"),s(),n("span",{class:"token class-name"},"Future"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"delayed"),n("span",{class:"token punctuation"},"("),s("oneSecond"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`
  `),n("span",{class:"token function"},"print"),n("span",{class:"token punctuation"},"("),s("message"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`
`),n("span",{class:"token punctuation"},"}"),s(`
`)])]),n("div",{class:"highlight-lines"},[n("br"),n("br"),n("div",{class:"highlight-line"}," "),n("br"),n("br"),n("br")]),n("div",{class:"line-numbers","aria-hidden":"true"},[n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"})])],-1),sn=p(`<p>위 메소드는 아래와 같습니다.</p><div class="language-dart line-numbers-mode" data-ext="dart"><pre class="language-dart"><code><span class="token class-name">Future</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token keyword">void</span><span class="token punctuation">&gt;</span></span> <span class="token function">printWithDelay</span><span class="token punctuation">(</span><span class="token class-name">String</span> message<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> <span class="token class-name">Future</span><span class="token punctuation">.</span><span class="token function">delayed</span><span class="token punctuation">(</span>oneSecond<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span>_<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token function">print</span><span class="token punctuation">(</span>message<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>다음 예제에서는 <code>async</code>와 <code>await</code>가 비동기 코드를 좀더 읽기 쉽게 만들어주는 것을 보여줍니다.</p><div class="language-dart line-numbers-mode" data-ext="dart"><pre class="language-dart"><code><span class="token class-name">Future</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token keyword">void</span><span class="token punctuation">&gt;</span></span> <span class="token function">createDescriptions</span><span class="token punctuation">(</span><span class="token class-name">Iterable</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> objects<span class="token punctuation">)</span> <span class="token keyword">async</span> <span class="token punctuation">{</span>
  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">final</span> object <span class="token keyword">in</span> objects<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">try</span> <span class="token punctuation">{</span>
      <span class="token keyword">var</span> file <span class="token operator">=</span> <span class="token class-name">File</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&#39;</span><span class="token interpolation"><span class="token punctuation">$</span><span class="token expression">object</span></span><span class="token string">.txt&#39;</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">await</span> file<span class="token punctuation">.</span><span class="token function">exists</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">var</span> modified <span class="token operator">=</span> <span class="token keyword">await</span> file<span class="token punctuation">.</span><span class="token function">lastModified</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">print</span><span class="token punctuation">(</span>
            <span class="token string-literal"><span class="token string">&#39;File for </span><span class="token interpolation"><span class="token punctuation">$</span><span class="token expression">object</span></span><span class="token string"> already exists. It was modified on </span><span class="token interpolation"><span class="token punctuation">$</span><span class="token expression">modified</span></span><span class="token string">.&#39;</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">continue</span><span class="token punctuation">;</span>
      <span class="token punctuation">}</span>
      <span class="token keyword">await</span> file<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token keyword">await</span> file<span class="token punctuation">.</span><span class="token function">writeAsString</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&#39;Start describing </span><span class="token interpolation"><span class="token punctuation">$</span><span class="token expression">object</span></span><span class="token string"> in this file.&#39;</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span> <span class="token keyword">on</span> <span class="token class-name">IOException</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span>e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token function">print</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&#39;Cannot create description for </span><span class="token interpolation"><span class="token punctuation">$</span><span class="token expression">object</span></span><span class="token string">: </span><span class="token interpolation"><span class="token punctuation">$</span><span class="token expression">e</span></span><span class="token string">&#39;</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>또한 <code>async*</code>를 사용해서 스트림을 만드는데 멋지고 읽기쉬운 방법으로 만들 수 있습니다.</p><div class="language-dart line-numbers-mode" data-ext="dart"><pre class="language-dart"><code><span class="token class-name">Stream</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> <span class="token function">report</span><span class="token punctuation">(</span><span class="token class-name">Spacecraft</span> craft<span class="token punctuation">,</span> <span class="token class-name">Iterable</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> objects<span class="token punctuation">)</span> <span class="token keyword">async*</span> <span class="token punctuation">{</span>
  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">final</span> object <span class="token keyword">in</span> objects<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">await</span> <span class="token class-name">Future</span><span class="token punctuation">.</span><span class="token function">delayed</span><span class="token punctuation">(</span>oneSecond<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">yield</span> <span class="token string-literal"><span class="token string">&#39;</span><span class="token interpolation"><span class="token punctuation">\${</span><span class="token expression">craft<span class="token punctuation">.</span>name</span><span class="token punctuation">}</span></span><span class="token string"> flies by </span><span class="token interpolation"><span class="token punctuation">$</span><span class="token expression">object</span></span><span class="token string">&#39;</span></span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,6),an=n("code",null,"async",-1),tn=n("code",null,"Future",-1),en=n("code",null,"Stream",-1),pn=n("code",null,"await for",-1),on=p(`<h2 id="exceptions" tabindex="-1"><a class="header-anchor" href="#exceptions" aria-hidden="true">#</a> 예외</h2><p>예외를 발생시키려면 <code>throw</code>를 사용합니다.</p><div class="language-dart line-numbers-mode" data-ext="dart"><pre class="language-dart"><code><span class="token keyword">if</span> <span class="token punctuation">(</span>astronauts <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">throw</span> <span class="token class-name">StateError</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&#39;No astronauts.&#39;</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>예외를 포착하려면, <code>try</code> 명령문과 <code>on</code> 또는 <code>catch</code> (또는 둘다)를 사용합니다.</p>`,4),cn=n("div",{class:"language-dart line-numbers-mode","data-ext":"dart"},[n("pre",{dart:"",class:"language-dart"},[n("code",null,[n("span",{class:"token class-name"},"Future"),n("span",{class:"token generics"},[n("span",{class:"token punctuation"},"<"),n("span",{class:"token keyword"},"void"),n("span",{class:"token punctuation"},">")]),s(),n("span",{class:"token function"},"describeFlybyObjects"),n("span",{class:"token punctuation"},"("),n("span",{class:"token class-name"},"List"),n("span",{class:"token generics"},[n("span",{class:"token punctuation"},"<"),n("span",{class:"token class-name"},"String"),n("span",{class:"token punctuation"},">")]),s(" flybyObjects"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token keyword"},"async"),s(),n("span",{class:"token punctuation"},"{"),s(`
  `),n("span",{class:"token keyword"},"try"),s(),n("span",{class:"token punctuation"},"{"),s(`
    `),n("span",{class:"token keyword"},"for"),s(),n("span",{class:"token punctuation"},"("),n("span",{class:"token keyword"},"final"),s(" object "),n("span",{class:"token keyword"},"in"),s(" flybyObjects"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token punctuation"},"{"),s(`
      `),n("span",{class:"token keyword"},"var"),s(" description "),n("span",{class:"token operator"},"="),s(),n("span",{class:"token keyword"},"await"),s(),n("span",{class:"token class-name"},"File"),n("span",{class:"token punctuation"},"("),n("span",{class:"token string-literal"},[n("span",{class:"token string"},"'"),n("span",{class:"token interpolation"},[n("span",{class:"token punctuation"},"$"),n("span",{class:"token expression"},"object")]),n("span",{class:"token string"},".txt'")]),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"readAsString"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`
      `),n("span",{class:"token function"},"print"),n("span",{class:"token punctuation"},"("),s("description"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`
    `),n("span",{class:"token punctuation"},"}"),s(`
  `),n("span",{class:"token punctuation"},"}"),s(),n("span",{class:"token keyword"},"on"),s(),n("span",{class:"token class-name"},"IOException"),s(),n("span",{class:"token keyword"},"catch"),s(),n("span",{class:"token punctuation"},"("),s("e"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token punctuation"},"{"),s(`
    `),n("span",{class:"token function"},"print"),n("span",{class:"token punctuation"},"("),n("span",{class:"token string-literal"},[n("span",{class:"token string"},"'Could not describe object: "),n("span",{class:"token interpolation"},[n("span",{class:"token punctuation"},"$"),n("span",{class:"token expression"},"e")]),n("span",{class:"token string"},"'")]),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`
  `),n("span",{class:"token punctuation"},"}"),s(),n("span",{class:"token keyword"},"finally"),s(),n("span",{class:"token punctuation"},"{"),s(`
    flybyObjects`),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"clear"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`
  `),n("span",{class:"token punctuation"},"}"),s(`
`),n("span",{class:"token punctuation"},"}"),s(`
`)])]),n("div",{class:"highlight-lines"},[n("br"),n("br"),n("br"),n("br"),n("br"),n("br"),n("div",{class:"highlight-line"}," "),n("br"),n("br"),n("br"),n("br"),n("br")]),n("div",{class:"line-numbers","aria-hidden":"true"},[n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"})])],-1),ln=n("p",null,[s("참고할 것은 위 코드는 비동기 입니다."),n("br"),n("code",null,"try"),s("는 동기 코드 및 "),n("code",null,"async"),s(" 함수의 코드 모두 동작합니다.")],-1),un=n("code",null,"rethrow",-1),rn=n("code",null,"Error",-1),dn=n("code",null,"Exception",-1),kn=n("h2",{id:"important-concepts",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#important-concepts","aria-hidden":"true"},"#"),s(" 주요 개념")],-1),mn=n("p",null,"Dart 언어에 대해 배우고자 할 경우 다음의 사실과 개념을 염두해두세요.",-1),vn=n("br",null,null,-1),bn=n("code",null,"null",-1),hn=n("br",null,null,-1),gn=n("code",null,"null",-1),_n={href:"https://dart.dev/null-safety",target:"_blank",rel:"noopener noreferrer"},fn={href:"https://api.dart.dev/stable/dart-core/Object-class.html",target:"_blank",rel:"noopener noreferrer"},yn=n("code",null,"Object",-1),wn={class:"hint-container tip"},xn=n("p",{class:"hint-container-title"},"버전노트",-1),Dn={href:"https://dart.dev/null-safety",target:"_blank",rel:"noopener noreferrer"},Sn=n("br",null,null,-1),jn={href:"https://dart.dev/guides/language/evolution#language-versioning",target:"_blank",rel:"noopener noreferrer"},Tn=n("li",null,[n("p",null,[s("Dart는 강력한 타입형이지만 Dart가 타입을 유추할 수 있으므로 타입지정은 선택적입니다."),n("br"),s(" 이전 코드에서는 "),n("code",null,"number"),s("는 "),n("code",null,"int"),s("타입으로 유추됩니다.")])],-1),Pn={href:"https://dart.dev/null-safety",target:"_blank",rel:"noopener noreferrer"},In=n("code",null,"null",-1),On=n("br",null,null,-1),En=n("code",null,"?",-1),$n=n("br",null,null,-1),Nn=n("code",null,"int?",-1),Fn=n("code",null,"null",-1),Cn=n("br",null,null,-1),Ln=n("code",null,"null",-1),Rn=n("code",null,"!",-1),Vn=n("br",null,null,-1),An=n("code",null,"int x = nullableButNotNullInt!",-1),Bn=n("code",null,"Object?",-1),qn=n("code",null,"Object",-1),Mn={href:"https://dart.dev/guides/language/effective-dart/design#avoid-using-dynamic-unless-you-want-to-disable-static-checking",target:"_blank",rel:"noopener noreferrer"},Wn=n("code",null,"dynamic",-1),Yn=p("<li><p>Dart는 <code>List&lt;int&gt;</code> (정수의 목록) 또는 <code>List&lt;Object&gt;</code> (다양한 타입의 객체 목록)와 같이 제너릭 타입을 지원합니다.</p></li><li><p>Dart는 클래스나 객체에 연결된 함수(각각 정적, 인스턴스 메소드) 뿐만 아니라 최상위 함수(<code>main()</code> 와 같은)를 지원합니다.<br> 또한 함수내 함수(중첩 또는 로컬 함수)를 만들 수 있습니다.</p></li><li><p>비슷하게, Dart는 클래스나 객체에 연결된 변수(정적, 인스턴스 변수) 뿐만 아니라 최상위 변수도 지원합니다.<br> 인스턴스 변수를 필드나 속성이라고도 합니다.</p></li>",3),Gn=n("code",null,"public",-1),Un=n("code",null,"protected",-1),Jn=n("code",null,"private",-1),zn=n("br",null,null,-1),Hn=n("code",null,"_",-1),Kn=n("br",null,null,-1),Qn=n("li",null,[n("p",null,[s("식별자는 문자나 밑줄("),n("code",null,"_"),s(")로 시작할 수 있으며 그 뒤에는 문자와 숫자의 조합이 가능합니다.")])],-1),Xn=n("br",null,null,-1),Zn=n("code",null,"condition ? expr1 : expr2",-1),ns=n("code",null,"expr1",-1),ss=n("code",null,"expr2",-1),as=n("br",null,null,-1),ts=n("br",null,null,-1),es=n("br",null,null,-1),ps=n("br",null,null,-1),os=n("br",null,null,-1),cs=n("br",null,null,-1),ls=n("h2",{id:"additional-resources",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#additional-resources","aria-hidden":"true"},"#"),s(" 추가적인 자료")],-1),is={href:"https://dart.dev/guides/libraries/library-tour",target:"_blank",rel:"noopener noreferrer"},us={href:"https://api.dart.dev/",target:"_blank",rel:"noopener noreferrer"},rs=n("br",null,null,-1),ds={href:"https://dart.dev/guides/language/effective-dart/style",target:"_blank",rel:"noopener noreferrer"};function ks(ms,vs){const o=c("ExternalLinkIcon"),t=c("RouterLink"),l=c("AdsenseB");return u(),r("div",null,[n("p",null,[s("원문 : "),n("a",k,[s("https://dart.dev/language"),a(o)])]),m,n("p",null,[s("Dart의 코어 라이브러리에 대해 배우려면 "),n("a",v,[s("라이브러리 둘러보기"),a(o)]),s("를 참고하세요."),b,s(" 또한 더 많은 실습 소개를 보려면 "),n("a",h,[s("Dart 컨닝 코드랩"),a(o)]),s("에 방문해보세요.")]),g,n("p",null,[a(t,{to:"/dart/language/type-system.html"},{default:e(()=>[s("형식이 안전")]),_:1}),s("한 Dart 코드에서 대부분의 변수를 그들의 타입을 명시적으로 지정하지 않고 "),_,s("를 사용하여 선언할 수 있습니다."),f,s(" 타입추론 덕에 변수의 타입은 초기 값에 의하여 결정됩니다.")]),y,n("p",null,[s("기본값 및 "),w,s("과 "),x,s(" 키워드, 특수 타입을 포함하여 Dart에서 변수에 대하여 "),a(t,{to:"/dart/language/variables.html"},{default:e(()=>[s("더 읽어보세요")]),_:1}),s(".")]),D,n("p",null,[S,s(", "),j,s(", "),T,s(", "),P,s(", "),I,s("를 포함하여 Dart의 흐름 제어문에 대해 "),a(t,{to:"/dart/language/control-flow.html"},{default:e(()=>[s("더 읽어보세요")]),_:1}),s(".")]),O,n("p",null,[s("각 함수의 인자와 반환 값에 대한 타입을 지정하는 것을 "),n("a",E,[s("권장합니다"),a(o)]),s(".")]),$,n("p",null,[s("선택적 인자, 기본 인자값, 어휘적 범위를 포함하여 Dart의 함수에 대해 "),a(t,{to:"/dart/language/functions.html"},{default:e(()=>[s("더 읽어보세요")]),_:1}),s(".")]),N,n("p",null,[s("문서화 도구가 어떻게 작동하는지를 포함하여 Dart의 주석에 대해 "),a(t,{to:"/dart/language/comments.html"},{default:e(()=>[s("더 읽어보세요")]),_:1}),s(".")]),F,n("p",null,[s("라이브러리 접두사 및 "),C,s("와 "),L,s(", "),R,s(" 키워드를 통한 지연 로딩 등을 포함하여 Dart의 라이브러리와 가시성에 대해 "),a(t,{to:"/dart/language/libraries.html"},{default:e(()=>[s("더 읽어보세요")]),_:1}),s(".")]),V,n("p",null,[s("문자열 보간 및 리터럴, 표현식, "),A,s(" 메소드를 포함하여 문자열에 대해 "),a(t,{to:"/dart/language/built-in-types.html#strings"},{default:e(()=>[s("더 읽어보세요")]),_:1}),s(".")]),B,n("p",null,[s("초기화 목록, 선택적 "),q,s("와 "),M,s(", 생성자 리다이렉팅, "),W,s(" 생성자, getter, setter 등등을 포함하여 Dart의 클래스에 대해 "),a(t,{to:"/dart/language/classes.html"},{default:e(()=>[s("더 읽어보세요")]),_:1}),s(".")]),Y,n("p",null,[s("향상된 Enum 요구사항 및 자동도입 속성, 열거값 이름에 접근, switch 명령문 지원 등등을 포함하여 Dart의 enum에 대해 "),a(t,{to:"/dart/language/enum.html"},{default:e(()=>[s("더 읽어보세요")]),_:1}),s(".")]),G,n("p",null,[s("클래스 확장, 선택적 "),U,s(" 어노테이션 등 "),a(t,{to:"/dart/language/extend.html"},{default:e(()=>[s("더 읽어보세요")]),_:1}),s(".")]),J,n("p",null,[s("mixin에 대해 "),a(t,{to:"/dart/language/mixins.html"},{default:e(()=>[s("더 읽어보세요")]),_:1}),s(".")]),z,n("p",null,[s("암묵적 인터페이스에 대해 "),a(t,{to:"/dart/language/classes.html#implicit-interfaces"},{default:e(()=>[s("더 읽어보세요")]),_:1}),s(".")]),H,K,Q,n("p",null,[s("추상 클래스와 메소드에 대해 "),a(t,{to:"/dart/language/classes.html#abstract-classes"},{default:e(()=>[s("더 읽어보세요")]),_:1}),s(".")]),X,Z,nn,sn,n("p",null,[an,s(" 함수 및 "),tn,s(", "),en,s(", 비동기 반복구 ("),pn,s(") 등 비동기지원에 대해 "),a(t,{to:"/dart/language/async.html"},{default:e(()=>[s("더 읽어보세요")]),_:1}),s(".")]),on,cn,ln,n("p",null,[s("스택트레이스, "),un,s(", "),rn,s("와 "),dn,s(" 차이점 등 예외에 대하여 "),a(t,{to:"/dart/language/error-handling.html#exceptions"},{default:e(()=>[s("더 읽어보세요")]),_:1}),s(".")]),kn,mn,n("ul",null,[n("li",null,[n("p",null,[s("변수에 위치하는 모든것은 객체이며 모든 객체는 클래스의 인스턴스입니다."),vn,s(" 숫자, 함수와 "),bn,s(" 조차도 객체입니다."),hn,gn,s("을 제외하고는("),n("a",_n,[s("null 안전보장"),a(o)]),s("을 활성화한 경우) 모든 객체는 "),n("a",fn,[yn,a(o)]),s(" 클래스에서 상속됩니다.")]),n("div",wn,[xn,n("p",null,[n("a",Dn,[s("Null 안전"),a(o)]),s("은 Dart 2.12에서 소개되었습니다."),Sn,s(" Null 안전을 사용하려면 적어도 2.12 "),n("a",jn,[s("언어버전"),a(o)]),s(" 이상을 사용해야 합니다.")])])]),Tn,n("li",null,[n("p",null,[n("a",Pn,[s("Null 안전"),a(o)]),s("을 활성화 하면 변수는 가능하다고 표시하기전까지 "),In,s("을 가질 수 없습니다."),On,s(" 해당 타입의 맨 끝에 물음표("),En,s(")를 추가해서 변수가 null이 가능하다고 만들 수 있습니다."),$n,s(" 예로 들어, "),Nn,s("는 정수이거나 "),Fn,s("일 수 있습니다."),Cn,s(" Dart에서는 가능하지만 표현식자체가 절대로 "),Ln,s("을 가질 수 없는것을 알고 있다면, "),Rn,s("를 추가해서 null이 아님을 경고할 수 있습니다. (만약 null이면 예외발생)"),Vn,s(" 예로 들어, "),An])]),n("li",null,[n("p",null,[s("명시적으로 모든 타입이 가능하다고 하고 싶은 경우에는 "),Bn,s("(Null 안전 활성화한 경우), "),qn,s(", "),n("a",Mn,[s("특수한 타입인 "),Wn,a(o)]),s("(런타임까지 타입확인을 지연하고자 하는 경우) 타입을 사용하면 됩니다.")])]),Yn,n("li",null,[n("p",null,[s("자바와 다르게 Dart는 "),Gn,s(", "),Un,s("나 "),Jn,s(" 키워드가 없습니다."),zn,s(" 밑줄("),Hn,s(")로 식별자를 시작하면, 라이브러리내 비공개입니다."),Kn,s(" 자세한 내용은 "),a(t,{to:"/dart/language/libraries.html"},{default:e(()=>[s("라이브러리와 가져오기")]),_:1}),s("을 참고하세요.")])]),Qn,n("li",null,[n("p",null,[s("Dart는 표현식(런타임 값이 있는)과 명령문(그렇지 않음)을 가지고 있습니다."),Xn,s(" 예로 들어, "),a(t,{to:"/dart/language/operators.html#conditional-expressions"},{default:e(()=>[s("조건 표현식")]),_:1}),s("인 "),Zn,s("는 "),ns,s(" 또는 "),ss,s(" 값을 가지고 있습니다."),as,s(" 비교하여 "),a(t,{to:"/dart/language/control-flow.html#if-and-else"},{default:e(()=>[s("if-else 명령문")]),_:1}),s("은 값이 없습니다."),ts,s(" 명령문은 종종 한개 이상의 표현식을 포함하지만 표현식은 명령문을 직접 포함하지는 않습니다.")])]),n("li",null,[n("p",null,[s("Dart 툴은 경고와 에러 두가지 타입의 문제를 알려줍니다."),es,s(" 경고는 코드가 동작하지 않을 수 있지만 프로그램 실행을 중단시키지는 않습니다."),ps,s(" 에러는 컴파일타임 또는 런타임에 발생할 수 있습니다."),os,s(" 컴파일타임 에러는 코드가 전혀 실행되지 않습니다."),cs,s(" 런타임 에러는 코드가 실행중에 "),a(t,{to:"/dart/language/error-handling.html#exceptions"},{default:e(()=>[s("예외")]),_:1}),s("가 발생합니다.")])])]),ls,n("p",null,[s("더 많은 코드 예제는 "),n("a",is,[s("라이브러리 투어"),a(o)]),s("와 "),n("a",us,[s("Dart API 참조"),a(o)]),s("에 있습니다."),rs,s(" 이 사이트의 코드 규칙은 "),n("a",ds,[s("Dart 스타일 가이드"),a(o)]),s("를 따릅니다.")]),a(l)])}const hs=i(d,[["render",ks],["__file","index.html.vue"]]);export{hs as default};
