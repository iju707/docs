import{_ as d,r as u,o as k,c as m,a as n,b as s,d as t,w as a,e as p}from"./app-95e21c4a.js";const v={},g={href:"https://docs.spring.io/spring-framework/docs/current/reference/html/core.html#beans-basics",target:"_blank",rel:"noopener noreferrer"},b=p("<p><code>org.springframework.context.ApplicationConext</code> 인터페이스는 스프링 IoC 컨테이너를 대표하고 빈을 객체화, 구성, 초기화를 담당한다.<br> 컨테이너는 어떤 객체를 객체화, 구성, 초기화해야되는지 구성 메타데이터를 읽어서 지침을 가져옵니다.<br> 구성 메타데이터는 XML, 자바 어노테이션, 자바 코드로 표현됩니다.<br> 이를 통해 어플리케이션을 구성하는 객체와 이러한 객체간의 풍부한 상호종속성을 표현할 수 있습니다.</p><p>스프링에서 <code>ApplicationContext</code> 인터페이스의 다양한 구현체를 지원합니다.<br> 독립형 어플리케이션에서 <code>ClassPathXmlApplicationContext</code> 나 <code>FileSystemXmlApplicationContext</code>의 인스턴스를 생성하는 것이 일반적입니다.<br> XML이 구성 메타데이터를 정의하는데 전통적인 유형이지만 추가 메타형식에 대한 지원을 선언적 활성화를 위하여 작은 양의 XML 구성을 제공함으로써 컨테이너에게 자바 어노테이션이나 자바 코드로 메타데이터 형식을 사용할 수 있습니다.</p>",2),h=n("br",null,null,-1),_=n("br",null,null,-1),x={href:"https://spring.io/tools",target:"_blank",rel:"noopener noreferrer"},f=p('<p>아래의 다이어그램은 스프링이 어떻게 동작하는지에 대한 고차원적 뷰입니다.<br> 어플리케이션 클래스가 구성 메타데이터와 결합이 되고 <code>ApplicationContext</code>가 생성되어 초기화된 뒤 완전히 구성되면 실행가능한 시스템이나 어플리케이션을 가지게 됩니다.</p><figure><img src="https://docs.spring.io/spring-framework/docs/current/reference/html/images/container-magic.png"><figcaption align="center"><b>그림 1. 스프링 IoC 컨테이너</b></figcaption></figure><h2 id="_1-2-1-구성-메타데이터" tabindex="-1"><a class="header-anchor" href="#_1-2-1-구성-메타데이터" aria-hidden="true">#</a> 1.2.1 구성 메타데이터</h2><p>직전 다이어그램에 보여주듯, 스프링 IoC 컨테이너는 구성 메타데이터 양식을 소비합니다.<br> 이 구성 메타데이터는 어플리케이션 개발자가 스프링 컨테이너에게 어플리케이션의 객체를 어떻게 인스턴스화 하고 구성하고 모으는지 말해주는 것을 표현합니다.</p><p>구성 메타데이터는 전통적으로 단순하고 직관적인 XML 형식을 지원합니다. 이번 장에서 스프링 IoC 컨테이너에 대한 주요 컨셉과 특징을 전달하는데 사용됩니다.</p>',5),q={class:"hint-container tip"},w=n("p",{class:"hint-container-title"},"Tips",-1),A=n("br",null,null,-1),C=n("br",null,null,-1),y=n("p",null,"스프링 컨테이너에서 사용되는 다른 형식의 메타데이터는 다음과 같습니다.",-1),S=n("br",null,null,-1),L=n("br",null,null,-1),j={href:"https://docs.spring.io/spring-framework/docs/current/javadoc-api/org/springframework/context/annotation/Configuration.html",target:"_blank",rel:"noopener noreferrer"},B={href:"https://docs.spring.io/spring-framework/docs/current/javadoc-api/org/springframework/context/annotation/Bean.html",target:"_blank",rel:"noopener noreferrer"},D={href:"https://docs.spring.io/spring-framework/docs/current/javadoc-api/org/springframework/context/annotation/Import.html",target:"_blank",rel:"noopener noreferrer"},X={href:"https://docs.spring.io/spring-framework/docs/current/javadoc-api/org/springframework/context/annotation/DependsOn.html",target:"_blank",rel:"noopener noreferrer"},M=n("p",null,[s("스프링 구성은 컨테이너가 관리해야하는 하나 이상의 빈 정의로 구성됩니다."),n("br"),s(" XML기반 구성 메타데이터는 상위 "),n("code",null,"<beans/>"),s(" 요소 내부에 "),n("code",null,"<bean/>"),s(" 으로 빈을 구성합니다."),n("br"),s(" 자바 구성은 일반적으로 "),n("code",null,"@Configuration"),s(" 클래스에 "),n("code",null,"@Bean"),s(" 어노테이션기반 함수를 사용합니다.")],-1),G=n("br",null,null,-1),I=n("code",null,"Action",-1),R=n("code",null,"SessionFactories",-1),T=n("br",null,null,-1),E=n("br",null,null,-1),P=n("br",null,null,-1),J={href:"https://docs.spring.io/spring-framework/docs/current/reference/html/core.html#aop-atconfigurable",target:"_blank",rel:"noopener noreferrer"},F=p(`<p>아래의 예제는 XML기반 구성 메타데이터의 기본 구조를 보여줍니다.</p><div class="language-xml line-numbers-mode" data-ext="xml"><pre class="language-xml"><code><span class="token prolog">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>beans</span> <span class="token attr-name">xmlns</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>http://www.springframework.org/schema/beans<span class="token punctuation">&quot;</span></span>
    <span class="token attr-name"><span class="token namespace">xmlns:</span>xsi</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>http://www.w3.org/2001/XMLSchema-instance<span class="token punctuation">&quot;</span></span>
    <span class="token attr-name"><span class="token namespace">xsi:</span>schemaLocation</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>http://www.springframework.org/schema/beans
        https://www.springframework.org/schema/beans/spring-beans.xsd<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>

    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>...<span class="token punctuation">&quot;</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>...<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>  
        <span class="token comment">&lt;!-- collaborators and configuration for this bean go here --&gt;</span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">&gt;</span></span>

    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>...<span class="token punctuation">&quot;</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>...<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
        <span class="token comment">&lt;!-- collaborators and configuration for this bean go here --&gt;</span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">&gt;</span></span>

    <span class="token comment">&lt;!-- more bean definitions go here --&gt;</span>

<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>beans</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li><code>id</code> : 개별 빈 정의를 식별하는 문자열</li><li><code>class</code> : 빈의 유형을 정의하며, 정규화된 클래스 명을 사용합니다.</li></ul>`,3),U=n("code",null,"id",-1),N=n("br",null,null,-1),V=n("br",null,null,-1),O=n("h2",{id:"_1-2-2-컨테이너-인스턴스화",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#_1-2-2-컨테이너-인스턴스화","aria-hidden":"true"},"#"),s(" 1.2.2 컨테이너 인스턴스화")],-1),H=n("p",null,[n("code",null,"ApplicationContext"),s(" 생성자에 적용되는 위치 경로(들)은 컨테이너가 다양한 외부 리소스(로컬 파일시스템, 자바 "),n("code",null,"CLASSPATH"),s(" 등)에서 불러올 구성 메타데이터의 리소스문자열 입니다.")],-1),$=n("div",{class:"language-java line-numbers-mode","data-ext":"java"},[n("pre",{class:"language-java"},[n("code",null,[n("span",{class:"token class-name"},"ApplicationContext"),s(" context "),n("span",{class:"token operator"},"="),s(),n("span",{class:"token keyword"},"new"),s(),n("span",{class:"token class-name"},"ClassPathXmlApplicationContext"),n("span",{class:"token punctuation"},"("),n("span",{class:"token string"},'"services.xml"'),n("span",{class:"token punctuation"},","),s(),n("span",{class:"token string"},'"daos.xml"'),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`
`)])]),n("div",{class:"line-numbers","aria-hidden":"true"},[n("div",{class:"line-number"})])],-1),z=n("div",{class:"language-kotlin line-numbers-mode","data-ext":"kt"},[n("pre",{class:"language-kotlin"},[n("code",null,[n("span",{class:"token keyword"},"val"),s(" context "),n("span",{class:"token operator"},"="),s(),n("span",{class:"token function"},"ClassPathXmlApplicationContext"),n("span",{class:"token punctuation"},"("),n("span",{class:"token string-literal singleline"},[n("span",{class:"token string"},'"services.xml"')]),n("span",{class:"token punctuation"},","),s(),n("span",{class:"token string-literal singleline"},[n("span",{class:"token string"},'"daos.xml"')]),n("span",{class:"token punctuation"},")"),s(`
`)])]),n("div",{class:"line-numbers","aria-hidden":"true"},[n("div",{class:"line-number"})])],-1),K={class:"hint-container tip"},Q=n("p",{class:"hint-container-title"},"Tips",-1),W=n("code",null,"Resource",-1),Y=n("code",null,"Resources",-1),Z=n("br",null,null,-1),nn=n("code",null,"Resource",-1),sn=p(`<p>아래 예제는 서비스 레이어 객체 (<code>services.xml</code>) 구성 파일을 보여줍니다.</p><div class="language-xml line-numbers-mode" data-ext="xml"><pre class="language-xml"><code><span class="token prolog">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>beans</span> <span class="token attr-name">xmlns</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>http://www.springframework.org/schema/beans<span class="token punctuation">&quot;</span></span>
    <span class="token attr-name"><span class="token namespace">xmlns:</span>xsi</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>http://www.w3.org/2001/XMLSchema-instance<span class="token punctuation">&quot;</span></span>
    <span class="token attr-name"><span class="token namespace">xsi:</span>schemaLocation</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>http://www.springframework.org/schema/beans
        https://www.springframework.org/schema/beans/spring-beans.xsd<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>

    <span class="token comment">&lt;!-- services --&gt;</span>

    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>petStore<span class="token punctuation">&quot;</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>org.springframework.samples.jpetstore.services.PetStoreServiceImpl<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>accountDao<span class="token punctuation">&quot;</span></span> <span class="token attr-name">ref</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>accountDao<span class="token punctuation">&quot;</span></span><span class="token punctuation">/&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>itemDao<span class="token punctuation">&quot;</span></span> <span class="token attr-name">ref</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>itemDao<span class="token punctuation">&quot;</span></span><span class="token punctuation">/&gt;</span></span>
        <span class="token comment">&lt;!-- additional collaborators and configuration for this bean go here --&gt;</span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">&gt;</span></span>

    <span class="token comment">&lt;!-- more bean definitions for services go here --&gt;</span>

<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>beans</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>아래의 예제는 데이터 접근 객체 <code>daos.xml</code> 파일을 보여줍니다.</p><div class="language-xml line-numbers-mode" data-ext="xml"><pre class="language-xml"><code><span class="token prolog">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>beans</span> <span class="token attr-name">xmlns</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>http://www.springframework.org/schema/beans<span class="token punctuation">&quot;</span></span>
    <span class="token attr-name"><span class="token namespace">xmlns:</span>xsi</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>http://www.w3.org/2001/XMLSchema-instance<span class="token punctuation">&quot;</span></span>
    <span class="token attr-name"><span class="token namespace">xsi:</span>schemaLocation</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>http://www.springframework.org/schema/beans
        https://www.springframework.org/schema/beans/spring-beans.xsd<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>

    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>accountDao<span class="token punctuation">&quot;</span></span>
        <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>org.springframework.samples.jpetstore.dao.jpa.JpaAccountDao<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
        <span class="token comment">&lt;!-- additional collaborators and configuration for this bean go here --&gt;</span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">&gt;</span></span>

    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>itemDao<span class="token punctuation">&quot;</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>org.springframework.samples.jpetstore.dao.jpa.JpaItemDao<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
        <span class="token comment">&lt;!-- additional collaborators and configuration for this bean go here --&gt;</span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">&gt;</span></span>

    <span class="token comment">&lt;!-- more bean definitions for data access objects go here --&gt;</span>

<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>beans</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,4),an=n("code",null,"PetStoreServiceImpl",-1),tn=n("code",null,"JpaAccountDao",-1),en=n("code",null,"JpaItemDao",-1),on=n("br",null,null,-1),cn=n("code",null,"property",-1),ln=n("code",null,"name",-1),pn=n("code",null,"ref",-1),un=n("br",null,null,-1),rn=n("code",null,"id",-1),dn=n("code",null,"ref",-1),kn=n("br",null,null,-1),mn=p(`<h3 id="xml-기반-구성-메타데이터-작성" tabindex="-1"><a class="header-anchor" href="#xml-기반-구성-메타데이터-작성" aria-hidden="true">#</a> XML 기반 구성 메타데이터 작성</h3><p>빈에 대한 정의가 여러개 XML 파일에 걸쳐있는 것이 유용하기도 합니다.<br> 자주, 각각의 개별 XML 구성 파일이 아키텍처상 논리적 레이어나 모듈을 표현하기도 합니다.</p><p>이 모든 XML 조각으로부터 빈 정의를 불러와서 어플리케이션 컨텍스트의 생성자에 사용할 수 있습니다.<br><a href="#_1-2-2-%EC%BB%A8%ED%85%8C%EC%9D%B4%EB%84%88-%EC%9D%B8%EC%8A%A4%ED%84%B4%EC%8A%A4%ED%99%94">이전 섹션</a>에서 보여준 것 처럼 생성자는 다수의 <code>Resource</code> 위치를 가져갑니다.<br> 대안으로 다른 파일(들)에서 빈 정의를 불러오기 위해 한개 이상의 <code>&lt;import/&gt;</code> 요소를 사용하면 됩니다.<br> 어떻게 사용하는지 아래 예제를 참고하시면 됩니다.</p><div class="language-xml line-numbers-mode" data-ext="xml"><pre class="language-xml"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>beans</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>import</span> <span class="token attr-name">resource</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>services.xml<span class="token punctuation">&quot;</span></span><span class="token punctuation">/&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>import</span> <span class="token attr-name">resource</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>resources/messageSource.xml<span class="token punctuation">&quot;</span></span><span class="token punctuation">/&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>import</span> <span class="token attr-name">resource</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>/resources/themeSource.xml<span class="token punctuation">&quot;</span></span><span class="token punctuation">/&gt;</span></span>

    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>bean1<span class="token punctuation">&quot;</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>...<span class="token punctuation">&quot;</span></span><span class="token punctuation">/&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>bean2<span class="token punctuation">&quot;</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>...<span class="token punctuation">&quot;</span></span><span class="token punctuation">/&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>beans</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>위 예제에서 외부 빈 정의는 3개의 파일 (<code>services.xml</code>, <code>messageSource.xml</code>, <code>themeSource.xml</code>)에서 불러오게 됩니다.<br> 모든 위치경로는 가져오기를 수행하는 정의 파일과의 상대경로입니다.<br> 따라서 <code>service.xml</code> 파일은 가져오기를 하는 파일과 동일한 디렉터리나 클래스패스 위치에 있어야 합니다.<br><code>messageSource.xml</code> 와 <code>themeSource.xml</code> 은 가져오기를 하는 파일 위치 하위에 <code>resources</code> 위치안에 있어야 합니다.<br> 이때 선두 슬래쉬는 무시됩니다.<br> 그러나, 주어진 경로가 상대경로이기 때문에 슬래쉬를 사용하지 않는 것잊 좋습니다.<br> 최상위 <code>&lt;beans/&gt;</code> 요소를 포함하여 가져오는 파일의 내용은 스프링 스키마에 따라 유효한 XML 빈 정의여야 합니다.</p><div class="hint-container tip"><p class="hint-container-title">Tips</p><p><code>../</code> 상대경로를 사용해서 부모 디렉터리의 파일을 참조하는 것이 가능하지만 추천하지는 않습니다.<br> 이렇게 하면 현재 어플리케이션 외부에 있는 파일에 대한 종속성이 생성됩니다.<br> 특히, 런타임 처리 프로세스가 <strong>가장 근접한</strong> 클래스패스 루트를 선택하고 그것의 상위 디렉터리를 찾게되기 때문에 이 참조방식은 <code>classpath:</code> URL (예로, <code>classpath:../services.xml</code>) 에서는 추천되지 않습니다.<br> 클래스패스 구성 변경으로 다른, 잘못된 디렉터리를 선택할 수 있게 됩니다.</p><p>항상 상대경로 대신 리소스의 전체위치를 사용할 수 있습니다.<br> 예로들어 <code>file:C:/config/services.xml</code> 이나 <code>classpath:/config/services.xml</code> 와 같습니다.<br> 그러나, 어플리케이션 구성을 특정 절대위치에 연결하고 있다는 점을 유의하시기 바랍니다.<br> 일반적으로 이러한 절대 위치에 대한 간접참조를 유지하는 것을 선호합니다.<br> 예로들어, 실행중 JVM 시스템 속성으로 처리될 <code>\${...}</code> 치환자와 같습니다.</p></div><p>네임스페이스 자체는 import 지시자 기능을 제공합니다.<br> 스프링에서 제공하는 XML 네임스페이스 선택 (예, <code>context</code>, <code>util</code>)에서 일반 빈 정의 이상의 추가 구성기능을 사용할 수 있습니다.</p><h3 id="groovy-빈-정의-dsl" tabindex="-1"><a class="header-anchor" href="#groovy-빈-정의-dsl" aria-hidden="true">#</a> Groovy 빈 정의 DSL</h3><p>외부화 구성 메타데이터의 추가 예제로, 빈 정의는 Grails 프레임워크로 알려진 스프링 그루비 빈 정의 DSL로 표현될 수 있습니다.<br> 일반적으로 아래의 예제에서 보여주는 구조와 같은 <code>.groovy</code> 파일에 구성되어있습니다.</p><div class="language-groovy line-numbers-mode" data-ext="groovy"><pre class="language-groovy"><code>beans <span class="token punctuation">{</span>
    <span class="token function">dataSource</span><span class="token punctuation">(</span>BasicDataSource<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        driverClassName <span class="token operator">=</span> <span class="token interpolation-string"><span class="token string">&quot;org.hsqldb.jdbcDriver&quot;</span></span>
        url <span class="token operator">=</span> <span class="token interpolation-string"><span class="token string">&quot;jdbc:hsqldb:mem:grailsDB&quot;</span></span>
        username <span class="token operator">=</span> <span class="token interpolation-string"><span class="token string">&quot;sa&quot;</span></span>
        password <span class="token operator">=</span> <span class="token interpolation-string"><span class="token string">&quot;&quot;</span></span>
        settings <span class="token operator">=</span> <span class="token punctuation">[</span>mynew<span class="token punctuation">:</span><span class="token interpolation-string"><span class="token string">&quot;setting&quot;</span></span><span class="token punctuation">]</span>
    <span class="token punctuation">}</span>
    <span class="token function">sessionFactory</span><span class="token punctuation">(</span>SessionFactory<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        dataSource <span class="token operator">=</span> dataSource
    <span class="token punctuation">}</span>
    <span class="token function">myService</span><span class="token punctuation">(</span>MyService<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        nestedBean <span class="token operator">=</span> <span class="token punctuation">{</span> AnotherBean bean <span class="token operator">-&gt;</span>
            dataSource <span class="token operator">=</span> dataSource
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>이 구성 스타일은 XML 빈 정의와 거의 동일하며 스프링 XML 구성 네임스페이스를 지원합니다.<br><code>importBeans</code> 지시자를 통해 XML 빈 정의 파일을 불러올 수 있습니다.</p><h2 id="_1-2-3-컨테이너-사용하기" tabindex="-1"><a class="header-anchor" href="#_1-2-3-컨테이너-사용하기" aria-hidden="true">#</a> 1.2.3 컨테이너 사용하기</h2><p><code>ApplicationContext</code>는 다른 빈과 의존성의 레지스트리를 관리하는 확장된 팩토리 능력을 위한 인터페이스 입니다.<br><code>T getBean(String name, Class&lt;T&gt; requiredType)</code> 함수를 사용해서 빈의 인스턴스를 얻을 수 있습니다.</p><p><code>ApplicationContext</code>를 통해 빈에 대한 정의를 읽고 접근하는지 아래예제를 통해 보여주겠습니다.</p>`,14),vn=n("div",{class:"language-java line-numbers-mode","data-ext":"java"},[n("pre",{class:"language-java"},[n("code",null,[n("span",{class:"token comment"},"// create and configure beans"),s(`
`),n("span",{class:"token class-name"},"ApplicationContext"),s(" context "),n("span",{class:"token operator"},"="),s(),n("span",{class:"token keyword"},"new"),s(),n("span",{class:"token class-name"},"ClassPathXmlApplicationContext"),n("span",{class:"token punctuation"},"("),n("span",{class:"token string"},'"services.xml"'),n("span",{class:"token punctuation"},","),s(),n("span",{class:"token string"},'"daos.xml"'),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`

`),n("span",{class:"token comment"},"// retrieve configured instance"),s(`
`),n("span",{class:"token class-name"},"PetStoreService"),s(" service "),n("span",{class:"token operator"},"="),s(" context"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"getBean"),n("span",{class:"token punctuation"},"("),n("span",{class:"token string"},'"petStore"'),n("span",{class:"token punctuation"},","),s(),n("span",{class:"token class-name"},"PetStoreService"),n("span",{class:"token punctuation"},"."),n("span",{class:"token keyword"},"class"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`

`),n("span",{class:"token comment"},"// use configured instance"),s(`
`),n("span",{class:"token class-name"},"List"),n("span",{class:"token generics"},[n("span",{class:"token punctuation"},"<"),n("span",{class:"token class-name"},"String"),n("span",{class:"token punctuation"},">")]),s(" userList "),n("span",{class:"token operator"},"="),s(" service"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"getUsernameList"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`
`)])]),n("div",{class:"line-numbers","aria-hidden":"true"},[n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"})])],-1),gn=n("div",{class:"language-kotlin line-numbers-mode","data-ext":"kt"},[n("pre",{class:"language-kotlin"},[n("code",null,[n("span",{class:"token keyword"},"import"),s(" org"),n("span",{class:"token punctuation"},"."),s("springframework"),n("span",{class:"token punctuation"},"."),s("beans"),n("span",{class:"token punctuation"},"."),s("factory"),n("span",{class:"token punctuation"},"."),s(`getBean

`),n("span",{class:"token comment"},"// create and configure beans"),s(`
`),n("span",{class:"token keyword"},"val"),s(" context "),n("span",{class:"token operator"},"="),s(),n("span",{class:"token function"},"ClassPathXmlApplicationContext"),n("span",{class:"token punctuation"},"("),n("span",{class:"token string-literal singleline"},[n("span",{class:"token string"},'"services.xml"')]),n("span",{class:"token punctuation"},","),s(),n("span",{class:"token string-literal singleline"},[n("span",{class:"token string"},'"daos.xml"')]),n("span",{class:"token punctuation"},")"),s(`

`),n("span",{class:"token comment"},"// retrieve configured instance"),s(`
`),n("span",{class:"token keyword"},"val"),s(" service "),n("span",{class:"token operator"},"="),s(" context"),n("span",{class:"token punctuation"},"."),s("getBean"),n("span",{class:"token operator"},"<"),s("PetStoreService"),n("span",{class:"token operator"},">"),n("span",{class:"token punctuation"},"("),n("span",{class:"token string-literal singleline"},[n("span",{class:"token string"},'"petStore"')]),n("span",{class:"token punctuation"},")"),s(`

`),n("span",{class:"token comment"},"// use configured instance"),s(`
`),n("span",{class:"token keyword"},"var"),s(" userList "),n("span",{class:"token operator"},"="),s(" service"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"getUsernameList"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")"),s(`
`)])]),n("div",{class:"line-numbers","aria-hidden":"true"},[n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"})])],-1),bn=n("p",null,[s("Groovy 구성에서 부트스트래핑이 매우 유사합니다."),n("br"),s(" Groovy방식인지 알 수 있도록 한 다른 컨텍스트 구현체(XML 빈 정의 또한 이해가능)를 사용합니다."),n("br"),s(" 아래는 Groovy 구성에 대한 예제입니다.")],-1),hn=n("div",{class:"language-java line-numbers-mode","data-ext":"java"},[n("pre",{class:"language-java"},[n("code",null,[n("span",{class:"token class-name"},"ApplicationContext"),s(" context "),n("span",{class:"token operator"},"="),s(),n("span",{class:"token keyword"},"new"),s(),n("span",{class:"token class-name"},"GenericGroovyApplicationContext"),n("span",{class:"token punctuation"},"("),n("span",{class:"token string"},'"services.groovy"'),n("span",{class:"token punctuation"},","),s(),n("span",{class:"token string"},'"daos.groovy"'),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`
`)])]),n("div",{class:"line-numbers","aria-hidden":"true"},[n("div",{class:"line-number"})])],-1),_n=n("div",{class:"language-kotlin line-numbers-mode","data-ext":"kt"},[n("pre",{class:"language-kotlin"},[n("code",null,[n("span",{class:"token keyword"},"val"),s(" context "),n("span",{class:"token operator"},"="),s(),n("span",{class:"token function"},"GenericGroovyApplicationContext"),n("span",{class:"token punctuation"},"("),n("span",{class:"token string-literal singleline"},[n("span",{class:"token string"},'"services.groovy"')]),n("span",{class:"token punctuation"},","),s(),n("span",{class:"token string-literal singleline"},[n("span",{class:"token string"},'"daos.groovy"')]),n("span",{class:"token punctuation"},")"),s(`
`)])]),n("div",{class:"line-numbers","aria-hidden":"true"},[n("div",{class:"line-number"})])],-1),xn=n("p",null,[s("좀더 확장가능한 방식으로는 "),n("code",null,"GenericApplicationContext"),s(" 와 리더대리자 간의 조합입니다."),n("br"),s(" 예로들어 - 아래 예제와 같이 XML 파일을 위한 "),n("code",null,"XmlBeanDefinitionReader"),s("를 함께 사용하는 것 입니다.")],-1),fn=n("div",{class:"language-java line-numbers-mode","data-ext":"java"},[n("pre",{class:"language-java"},[n("code",null,[n("span",{class:"token class-name"},"GenericApplicationContext"),s(" context "),n("span",{class:"token operator"},"="),s(),n("span",{class:"token keyword"},"new"),s(),n("span",{class:"token class-name"},"GenericApplicationContext"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`
`),n("span",{class:"token keyword"},"new"),s(),n("span",{class:"token class-name"},"XmlBeanDefinitionReader"),n("span",{class:"token punctuation"},"("),s("context"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"loadBeanDefinitions"),n("span",{class:"token punctuation"},"("),n("span",{class:"token string"},'"services.xml"'),n("span",{class:"token punctuation"},","),s(),n("span",{class:"token string"},'"daos.xml"'),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`
context`),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"refresh"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`
`)])]),n("div",{class:"line-numbers","aria-hidden":"true"},[n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"})])],-1),qn=n("div",{class:"language-kotlin line-numbers-mode","data-ext":"kt"},[n("pre",{class:"language-kotlin"},[n("code",null,[n("span",{class:"token keyword"},"val"),s(" context "),n("span",{class:"token operator"},"="),s(),n("span",{class:"token function"},"GenericApplicationContext"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")"),s(`
`),n("span",{class:"token function"},"XmlBeanDefinitionReader"),n("span",{class:"token punctuation"},"("),s("context"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"loadBeanDefinitions"),n("span",{class:"token punctuation"},"("),n("span",{class:"token string-literal singleline"},[n("span",{class:"token string"},'"services.xml"')]),n("span",{class:"token punctuation"},","),s(),n("span",{class:"token string-literal singleline"},[n("span",{class:"token string"},'"daos.xml"')]),n("span",{class:"token punctuation"},")"),s(`
context`),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"refresh"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")"),s(`
`)])]),n("div",{class:"line-numbers","aria-hidden":"true"},[n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"})])],-1),wn=n("p",null,[s("또한 아래 예제와 같이 Groovy 파일을 위한 "),n("code",null,"GroovyBeanDefinitionReader"),s("를 함께 사용할 수 있습니다.")],-1),An=n("div",{class:"language-java line-numbers-mode","data-ext":"java"},[n("pre",{class:"language-java"},[n("code",null,[n("span",{class:"token class-name"},"GenericApplicationContext"),s(" context "),n("span",{class:"token operator"},"="),s(),n("span",{class:"token keyword"},"new"),s(),n("span",{class:"token class-name"},"GenericApplicationContext"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`
`),n("span",{class:"token keyword"},"new"),s(),n("span",{class:"token class-name"},"GroovyBeanDefinitionReader"),n("span",{class:"token punctuation"},"("),s("context"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"loadBeanDefinitions"),n("span",{class:"token punctuation"},"("),n("span",{class:"token string"},'"services.groovy"'),n("span",{class:"token punctuation"},","),s(),n("span",{class:"token string"},'"daos.groovy"'),n("span",{class:"token punctuation"},")"),s(`
context`),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"refresh"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`
`)])]),n("div",{class:"line-numbers","aria-hidden":"true"},[n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"})])],-1),Cn=n("div",{class:"language-kotlin line-numbers-mode","data-ext":"kt"},[n("pre",{class:"language-kotlin"},[n("code",null,[n("span",{class:"token keyword"},"val"),s(" context "),n("span",{class:"token operator"},"="),s(),n("span",{class:"token function"},"GenericApplicationContext"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")"),s(`
`),n("span",{class:"token function"},"GroovyBeanDefinitionReader"),n("span",{class:"token punctuation"},"("),s("context"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"loadBeanDefinitions"),n("span",{class:"token punctuation"},"("),n("span",{class:"token string-literal singleline"},[n("span",{class:"token string"},'"services.groovy"')]),n("span",{class:"token punctuation"},","),s(),n("span",{class:"token string-literal singleline"},[n("span",{class:"token string"},'"daos.groovy"')]),n("span",{class:"token punctuation"},")"),s(`
context`),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"refresh"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")"),s(`
`)])]),n("div",{class:"line-numbers","aria-hidden":"true"},[n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"})])],-1),yn=p("<p>동일한 <code>ApplicationContext</code> 에 이러한 리더 대리자들을 혼합사용하여 다양한 구성 소스에서 빈 정의를 읽을 수 있습니다.</p><p><code>getBean</code> 을 사용하여 빈에 대한 인스턴스를 받아올 수 있습니다.<br><code>ApplicationContext</code> 인터페이스는 빈을 가져오는 다른 함수도 있지만 이상적으로는 어플리케이션 코드가 이것을 사용하면 안됩니다.<br> 대신, 어플리케이션 코드가 <code>getBean()</code> 함수를 더이상 호출하지 않고 스프링 API에 의존성을 가지지 않는 것 입니다.<br> 예로들어, 웹 프레임워크의 스프링 통합은 특정 빈에 메타데이터를 통해 정의한 의존성(autowired 어노테이션 등)을 기반으로 컨트롤러나 JSF-관리되는 빈 등와 같이 다양한 웹 프레임워크 컴포넌트에 대한 의존성 주입을 제공합니다.</p>",2);function Sn(Ln,jn){const l=u("ExternalLinkIcon"),c=u("RouterLink"),i=u("CodeTabs"),r=u("AdsenseB");return k(),m("div",null,[n("p",null,[s("원문 : "),n("a",g,[s("https://docs.spring.io/spring-framework/docs/current/reference/html/core.html#beans-basics"),t(l)])]),b,n("p",null,[s("대분 어플리케이션 시나리오의 스프링 IoC 컨테이너에서 한개 이상 인스턴스에 대한 인스턴스화를 위해 명시적 사용자 코드를 작성할 필요는 없습니다."),h,s(" 예로 들어, 웹 어플리케이션 시나리오에서 어플리케이션의 web.xml 파일에 있는 상용구 웹 설명자 XML의 간단한 8줄이면 충분합니다. ("),t(c,{to:"/spring/core/ioc/1_15.html"},{default:a(()=>[s("웹 어플리케이션을 위한 편리한 ApplicationContext 인스턴스화")]),_:1}),s(" 참고)"),_,n("a",x,[s("Spring Tools for Eclipse"),t(l)]),s("(이클립스-제공 개발 환경) 를 사용하면, 몇번의 마우스 클릭이나 키 입력으로 쉽게 이 상용구 구성을 만들 수 있습니다.")]),f,n("div",q,[w,n("p",null,[s("XML 기반 메타데이터는 구성 메타데이터에서 허용되는 유일한 형식은 아닙니다."),A,s(" 스프링 IoC 컨테이너 자체는 구성 메타데이터가 실제 작성된 형식에서 완전히 분리됩니다."),C,s(" 최근에는 많은 개발자들이 스프링 어플리케이션에서 "),t(c,{to:"/spring/core/ioc/1_12.html"},{default:a(()=>[s("자바기반 구성")]),_:1}),s("을 선택하고 있습니다.")])]),y,n("ul",null,[n("li",null,[t(c,{to:"/spring/core/ioc/1_19.html"},{default:a(()=>[s("어노테이션기반 구성")]),_:1}),s(" : 스프링 2.5 에서 어노테이션기반 구성 메타데이터 지원이 소개되었습니다.")]),n("li",null,[t(c,{to:"/spring/core/ioc/1_12.html"},{default:a(()=>[s("자바기반 구성")]),_:1}),s(" : 스프링 3.0 부터 스프링 JavaConfig 프로젝트에서 제공된 많은 기능이 스프링 프레임워크 코어에 일부가 되었습니다."),S,s(" 그래서 XML 파일이 아닌 자바를 사용하여 어플리케이션 클래스 외부에 빈을 정의할 수 있습니다."),L,s(" 이 새로운 기능을 사용하려면 "),n("a",j,[s("@Annotation"),t(l)]),s(", "),n("a",B,[s("@Bean"),t(l)]),s(", "),n("a",D,[s("@Import"),t(l)]),s(", "),n("a",X,[s("@DependsOn"),t(l)]),s("을 보시면 됩니다.")])]),M,n("p",null,[s("이 빈 정의는 어플리케이션을 구성하는 실제 객체에 해당합니다."),G,s(" 일반적으로 서비스 레이어 객체, 데이터 접근 객체 (DAO), 스트럿츠의 "),I,s(" 인스턴스와 같은 프리젠테이션 객체, 하이버네이트의 "),R,s(" 와 같은 인프라구조 객체 등등을 정의합니다."),T,s(" 일반적으로 도메인 객체를 만들고 로드하는 것은 DAO나 비즈니스 로직의 책임이기 때문에 컨테이너에서 세분화된 도메인 개체를 구성하지는 않습니다."),E,s(" 그러나 IoC 컨테이너 제어 밖에서 생성된 객체를 구성할 경우 AspectJ와의 스프링 통합을 사용하면 됩니다."),P,s(" 자세한 내용은 "),n("a",J,[s("5.10.1 스프링에서 도메인객체의 의존성 주입을 AspectJ로 사용하기"),t(l)]),s("를 참고하시면 됩니다.")]),F,n("p",null,[U,s(" 속성의 값은 협업객체를 참고합니다."),N,s(" 협업객체를 참조하는 XML은 이번 예제에는 없습니다."),V,s(" 자세한 내용은 "),t(c,{to:"/spring/core/ioc/1_4.html"},{default:a(()=>[s("4. 의존성")]),_:1}),s("를 참고하세요.")]),O,H,t(i,{id:"76",data:[{id:"java"},{id:"kotlin"}]},{title0:a(({value:e,isActive:o})=>[s("java")]),title1:a(({value:e,isActive:o})=>[s("kotlin")]),tab0:a(({value:e,isActive:o})=>[$]),tab1:a(({value:e,isActive:o})=>[z]),_:1}),n("div",K,[Q,n("p",null,[s("스프링 IoC 컨테이너에 대해 배운뒤, URI 문법으로 정의된 위치로부터 InputStream을 읽는 편리한 메커니즘을 제공하는 스프링의 "),W,s(" 추상화("),t(c,{to:"/spring/core/resources/2_1.html"},{default:a(()=>[Y]),_:1}),s("에서 안내)에 대해 더 알고싶을 것 입니다."),Z,s(" 특히, "),nn,s(" 경로는 "),t(c,{to:"/spring/core/resources/2_8.html"},{default:a(()=>[s("어플리케이션 컨텍스트와 리소스 경로")]),_:1}),s("에서 설명하듯 어플리케이션 컨텍스트를 생성하는 데 사용됩니다.")])]),sn,n("p",null,[s("위에 언급한 예제에서 서비스 레이어는 "),an,s(" 클래스와 "),tn,s(", "),en,s(" 유형의 두개 데이터 접근 객체(JPA 객체-관계 매핑 표준 기반)로 구성되어있습니다."),on,cn,s(" 중 "),ln,s(" 요소는 자바빈 속성의 이름을 참조하며, "),pn,s(" 요소는 다른 빈 정의의 이름을 참조합니다."),un,rn,s("와 "),dn,s(" 요소간의 연결은 협력하는 객체간 의존성을 표현합니다."),kn,s(" 객체들의 의존성 구성에 관련된 상세한 내용은 "),t(c,{to:"/spring/core/ioc/1_4.html"},{default:a(()=>[s("의존성")]),_:1}),s("에서 확인하실 수 있습니다.")]),mn,t(i,{id:"143",data:[{id:"java"},{id:"kotlin"}]},{title0:a(({value:e,isActive:o})=>[s("java")]),title1:a(({value:e,isActive:o})=>[s("kotlin")]),tab0:a(({value:e,isActive:o})=>[vn]),tab1:a(({value:e,isActive:o})=>[gn]),_:1}),bn,t(i,{id:"154",data:[{id:"java"},{id:"kotlin"}]},{title0:a(({value:e,isActive:o})=>[s("java")]),title1:a(({value:e,isActive:o})=>[s("kotlin")]),tab0:a(({value:e,isActive:o})=>[hn]),tab1:a(({value:e,isActive:o})=>[_n]),_:1}),xn,t(i,{id:"165",data:[{id:"java"},{id:"kotlin"}]},{title0:a(({value:e,isActive:o})=>[s("java")]),title1:a(({value:e,isActive:o})=>[s("kotlin")]),tab0:a(({value:e,isActive:o})=>[fn]),tab1:a(({value:e,isActive:o})=>[qn]),_:1}),wn,t(i,{id:"176",data:[{id:"java"},{id:"kotlin"}]},{title0:a(({value:e,isActive:o})=>[s("java")]),title1:a(({value:e,isActive:o})=>[s("kotlin")]),tab0:a(({value:e,isActive:o})=>[An]),tab1:a(({value:e,isActive:o})=>[Cn]),_:1}),yn,t(r)])}const Dn=d(v,[["render",Sn],["__file","1_2.html.vue"]]);export{Dn as default};
