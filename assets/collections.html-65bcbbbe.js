import{_ as i,r as l,o as r,c as u,a as s,b as n,d as a,w as o,e}from"./app-95e21c4a.js";const d={},k={href:"https://dart.dev/language/collections",target:"_blank",rel:"noopener noreferrer"},g=s("h2",{id:"lists",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#lists","aria-hidden":"true"},"#"),n(" 리스트")],-1),v=s("br",null,null,-1),m={href:"https://api.dart.dev/stable/dart-core/List-class.html",target:"_blank",rel:"noopener noreferrer"},b=s("code",null,"List",-1),h=e(`<p>Dart 리스트 리터럴은 대괄호(<code>[]</code>)로 시작종료되는 표현식이나 값의 쉼표로 구분된 목록으로 표현됩니다.<br> 여기 Dart 리스트의 예제가 있습니다.</p><div class="language-dart line-numbers-mode" data-ext="dart"><pre class="language-dart"><code><span class="token keyword">var</span> list <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div>`,2),_={class:"hint-container note"},f=s("p",{class:"hint-container-title"},"Note",-1),y=s("code",null,"list",-1),w=s("code",null,"List<int>",-1),x=s("br",null,null,-1),S=s("br",null,null,-1),D=e(`<p id="trailing-comma"></p><p>Dart 콜렉션 리터럴의 마지막 아이템에 콤마를 추가할 수 있습니다.<br> 마지막 콤마는 콜렉션에 영향을 주지는 않지만 복사-붙여넣기 오류를 방지할 수 있습니다.</p><div class="language-dart line-numbers-mode" data-ext="dart"><pre class="language-dart"><code><span class="token keyword">var</span> list <span class="token operator">=</span> <span class="token punctuation">[</span>
    <span class="token string-literal"><span class="token string">&#39;Car&#39;</span></span><span class="token punctuation">,</span>
    <span class="token string-literal"><span class="token string">&#39;Boat&#39;</span></span><span class="token punctuation">,</span>
    <span class="token string-literal"><span class="token string">&#39;Plane&#39;</span></span><span class="token punctuation">,</span>
<span class="token punctuation">]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>리스트는 0으로 시작되는 인덱싱을 사용하며 첫번째값의 인덱스가 0이고 <code>list.length - 1</code>이 마지막값의 인덱스가 됩니다.<br><code>.length</code> 속성을 사용해서 리스트의 길이를 가져올 수 있으며, 첨자연산자(<code>[]</code>)를 사용하여 리스트의 값을 가져올 수 있습니다.</p><div class="language-dart line-numbers-mode" data-ext="dart"><pre class="language-dart"><code><span class="token keyword">var</span> list <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token keyword">assert</span><span class="token punctuation">(</span>list<span class="token punctuation">.</span>length <span class="token operator">==</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">assert</span><span class="token punctuation">(</span>list<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

list<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
<span class="token keyword">assert</span><span class="token punctuation">(</span>list<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>리스트를 컴파일타임 상수로 만들고자 한다면 리스트 리터럴의 선두에 <code>const</code>를 추가하면 됩니다.</p><div class="language-dart line-numbers-mode" data-ext="dart"><pre class="language-dart"><code><span class="token keyword">var</span> constantList <span class="token operator">=</span> <span class="token keyword">const</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token comment">// constantList[1] = 1; // 이 줄은 오류가 발생할 것 입니다.</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="spread-operators" tabindex="-1"><a class="header-anchor" href="#spread-operators" aria-hidden="true">#</a> 스프레드 연산자</h3><p>Dart에서는 컬렉션에 여러값을 간결하게 삽입할 수 있는 방법인 **스프레드 연산자 (<code>...</code>)**와 **null인식 스프레드 연산자(<code>...?</code>)**를 지원합니다.</p><p>예로 들어, 리스트의 값들을 다른 리스트에 삽입하기 위해 스프레드 연산자(<code>...</code>)를 사용할 수 있습니다.</p><div class="language-dart line-numbers-mode" data-ext="dart"><pre class="language-dart"><code><span class="token keyword">var</span> list <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token keyword">var</span> list2 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>list<span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token keyword">assert</span><span class="token punctuation">(</span>list2<span class="token punctuation">.</span>length <span class="token operator">==</span> <span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>만약 스프레드 연산자 오른쪽에 있는 표현식이 null이 될 수 있으면 null인식 스프레드 연산자(<code>...?</code>)를 사용해서 예외를 피할 수 있습니다.</p><div class="language-dart line-numbers-mode" data-ext="dart"><pre class="language-dart"><code><span class="token keyword">var</span> list2 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token operator">?</span>list<span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token keyword">assert</span><span class="token punctuation">(</span>list2<span class="token punctuation">.</span>length <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div>`,13),M={href:"https://github.com/dart-lang/language/blob/master/accepted/2.3/spread-collections/feature-specification.md",target:"_blank",rel:"noopener noreferrer"},A=e(`<h3 id="collection-operators" tabindex="-1"><a class="header-anchor" href="#collection-operators" aria-hidden="true">#</a> 콜렉션 연산자</h3><p>또한 Dart는 <strong>콜렉션 if</strong>와 <strong>콜렉션 for</strong>를 제공하며 조건식(<code>if</code>)나 반복구(<code>for</code>)를 사용하여 콜렉션을 구성할 수 있습니다.</p><p>여기 <strong>콜렉션 if</strong>를 사용하여 3개 또는 4개 아이템을 가지는 리스트를 생성하는 예제입니다.</p><div class="language-dart line-numbers-mode" data-ext="dart"><pre class="language-dart"><code><span class="token keyword">var</span> nav <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string-literal"><span class="token string">&#39;Home&#39;</span></span><span class="token punctuation">,</span> <span class="token string-literal"><span class="token string">&#39;Furniture&#39;</span></span><span class="token punctuation">,</span> <span class="token string-literal"><span class="token string">&#39;Plants&#39;</span></span><span class="token punctuation">,</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>promoActive<span class="token punctuation">)</span> <span class="token string-literal"><span class="token string">&#39;Outlet&#39;</span></span><span class="token punctuation">]</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>다른 리스트에 추가하기 전에 리스트의 아이템을 조작하기 위해 <strong>콜렉션 for</strong>를 사용하는 예제입니다.</p><div class="language-dart line-numbers-mode" data-ext="dart"><pre class="language-dart"><code><span class="token keyword">var</span> listOfInts <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token keyword">var</span> listOfStrings <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string-literal"><span class="token string">&#39;#0&#39;</span></span><span class="token punctuation">,</span> <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token keyword">in</span> listOfInts<span class="token punctuation">)</span> <span class="token string-literal"><span class="token string">&#39;#</span><span class="token interpolation"><span class="token punctuation">$</span><span class="token expression">i</span></span><span class="token string">&#39;</span></span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token keyword">assert</span><span class="token punctuation">(</span>listOfStrings<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token string-literal"><span class="token string">&#39;#1&#39;</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,6),L=s("code",null,"if",-1),I=s("code",null,"for",-1),N={href:"https://github.com/dart-lang/language/blob/master/accepted/2.3/control-flow-collections/feature-specification.md",target:"_blank",rel:"noopener noreferrer"},X=s("br",null,null,-1),B={href:"https://dart.dev/guides/libraries/library-tour#collections",target:"_blank",rel:"noopener noreferrer"},C=s("h2",{id:"sets",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#sets","aria-hidden":"true"},"#"),n(" 세트")],-1),G=s("br",null,null,-1),P={href:"https://api.dart.dev/stable/dart-core/Set-class.html",target:"_blank",rel:"noopener noreferrer"},T=s("code",null,"Set",-1),O=e(`<p>세트 리터럴로 만든 간단한 Dart 세트 예제입니다.</p><div class="language-dart line-numbers-mode" data-ext="dart"><pre class="language-dart"><code><span class="token keyword">var</span> halogens <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string-literal"><span class="token string">&#39;fluorine&#39;</span></span><span class="token punctuation">,</span> <span class="token string-literal"><span class="token string">&#39;chlorine&#39;</span></span><span class="token punctuation">,</span> <span class="token string-literal"><span class="token string">&#39;bormine&#39;</span></span><span class="token punctuation">,</span> <span class="token string-literal"><span class="token string">&#39;iodine&#39;</span></span><span class="token punctuation">,</span> <span class="token string-literal"><span class="token string">&#39;astatine&#39;</span></span><span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div>`,2),H={class:"hint-container note"},V=s("p",{class:"hint-container-title"},"Note",-1),$=s("code",null,"halogens",-1),E=s("code",null,"Set<String>",-1),R=s("br",null,null,-1),F=s("br",null,null,-1),U={href:"https://dart.dev/guides/language/type-system#type-inference",target:"_blank",rel:"noopener noreferrer"},j=e(`<p>비어있는 세트를 만드려면 타입 인자에 <code>{}</code>를 사용하거나 <code>Set</code> 타입 변수에 <code>{}</code>를 할당하면 됩니다.</p><div class="language-dart line-numbers-mode" data-ext="dart"><pre class="language-dart"><code><span class="token keyword">var</span> name <span class="token operator">=</span> <span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token comment">// Set&lt;String&gt; names = {}; // 이것도 동작합니다.</span>
<span class="token comment">// var names = {}; // 이것은 세트가 아닌 맵으로 생성됩니다.</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="hint-container note"><p class="hint-container-title">세트? 맵?</p><p>맵 리터럴의 문법은 세트 리터럴과 유사합니다.<br> 맵 리터럴이 우선되기 때문에 <code>{}</code> 는 기본적으로 <code>Map</code> 타입이 됩니다.<br><code>{}</code> 또는 할당할 변수에 타입 어노테이션을 잊은 경우 Dart는 객체를 <code>Map&lt;dynamic, dynamic&gt;</code>으로 생성합니다.</p></div><p>기존 세트에 아이템을 추가하려면 <code>add()</code>나 <code>addAll()</code> 함수를 사용하면 됩니다.</p><div class="language-dart line-numbers-mode" data-ext="dart"><pre class="language-dart"><code><span class="token keyword">var</span> elements <span class="token operator">=</span> <span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
elements<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&#39;fluorine&#39;</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
elements<span class="token punctuation">.</span><span class="token function">addAll</span><span class="token punctuation">(</span>halogens<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>컴파일타임 상수로 세트를 생성하려면 <code>const</code>를 세트 리터럴 앞에 사용하면 됩니다.</p><div class="language-dart line-numbers-mode" data-ext="dart"><pre class="language-dart"><code><span class="token keyword">final</span> constantSet <span class="token operator">=</span> <span class="token keyword">const</span> <span class="token punctuation">{</span>
    <span class="token string-literal"><span class="token string">&#39;fluorine&#39;</span></span><span class="token punctuation">,</span>
    <span class="token string-literal"><span class="token string">&#39;chlorine&#39;</span></span><span class="token punctuation">,</span>
    <span class="token string-literal"><span class="token string">&#39;bromine&#39;</span></span><span class="token punctuation">,</span>
    <span class="token string-literal"><span class="token string">&#39;iodine&#39;</span></span><span class="token punctuation">,</span>
    <span class="token string-literal"><span class="token string">&#39;astatine&#39;</span></span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token comment">// constantSet.add(&#39;helium&#39;); // 이 코든느 오류가 발생합니다.</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>세트는 리스트와 동일하게 스프레드 연산자(<code>...</code>와 <code>...?</code>)와 콜렉션 <code>if</code>와 <code>for</code>를 지원합니다.<br> 자세한 정보는 <a href="#spread-operator">리스트 스프레드 연산자</a>와 <a href="#collection-operators">리스트 콜렉션 연산자</a> 부분을 참고하세요.</p>`,8),q={href:"https://dart.dev/guides/libraries/library-tour#sets",target:"_blank",rel:"noopener noreferrer"},z=s("h2",{id:"maps",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#maps","aria-hidden":"true"},"#"),n(" 맵")],-1),J=s("br",null,null,-1),K=s("br",null,null,-1),Q=s("br",null,null,-1),W={href:"https://api.dart.dev/stable/dart-core/Map-class.html",target:"_blank",rel:"noopener noreferrer"},Y=s("code",null,"Map",-1),Z=e(`<p>맵 리터럴을 사용한 간단한 Dart 맵 예제입니다.</p><div class="language-dart line-numbers-mode" data-ext="dart"><pre class="language-dart"><code><span class="token keyword">var</span> gifts <span class="token operator">=</span> <span class="token punctuation">{</span>
    <span class="token comment">// 키: 값</span>
    <span class="token string-literal"><span class="token string">&#39;first&#39;</span></span><span class="token punctuation">:</span> <span class="token string-literal"><span class="token string">&#39;partridge&#39;</span></span><span class="token punctuation">,</span>
    <span class="token string-literal"><span class="token string">&#39;second&#39;</span></span><span class="token punctuation">:</span> <span class="token string-literal"><span class="token string">&#39;turtledoves&#39;</span></span><span class="token punctuation">,</span>
    <span class="token string-literal"><span class="token string">&#39;fifth&#39;</span></span><span class="token punctuation">:</span> <span class="token string-literal"><span class="token string">&#39;golden rings&#39;</span></span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token keyword">var</span> nobleGases <span class="token operator">=</span> <span class="token punctuation">{</span>
    <span class="token number">2</span><span class="token punctuation">:</span> <span class="token string-literal"><span class="token string">&#39;helium&#39;</span></span><span class="token punctuation">,</span>
    <span class="token number">10</span><span class="token punctuation">:</span> <span class="token string-literal"><span class="token string">&#39;neon&#39;</span></span><span class="token punctuation">,</span>
    <span class="token number">18</span><span class="token punctuation">:</span> <span class="token string-literal"><span class="token string">&#39;argon&#39;</span></span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,2),nn={class:"hint-container note"},sn=s("p",{class:"hint-container-title"},"Note",-1),an=s("code",null,"gifts",-1),tn=s("code",null,"Map<String, String>",-1),en=s("code",null,"nobleGases",-1),pn=s("code",null,"Map<int, String>",-1),on=s("br",null,null,-1),ln=s("br",null,null,-1),cn={href:"https://dart.dev/guides/language/type-system#type-inference",target:"_blank",rel:"noopener noreferrer"},rn=e(`<p>Map 생성자로 동일한 객체를 만들 수 있습니다.</p><div class="language-dart line-numbers-mode" data-ext="dart"><pre class="language-dart"><code><span class="token keyword">var</span> gifts <span class="token operator">=</span> <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
gifts<span class="token punctuation">[</span><span class="token string-literal"><span class="token string">&#39;first&#39;</span></span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string-literal"><span class="token string">&#39;partridge&#39;</span></span><span class="token punctuation">;</span>
gifts<span class="token punctuation">[</span><span class="token string-literal"><span class="token string">&#39;second&#39;</span></span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string-literal"><span class="token string">&#39;turtledoves&#39;</span></span><span class="token punctuation">;</span>
gifts<span class="token punctuation">[</span><span class="token string-literal"><span class="token string">&#39;fifth&#39;</span></span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string-literal"><span class="token string">&#39;golden rings&#39;</span></span><span class="token punctuation">;</span>

<span class="token keyword">var</span> nobleGases <span class="token operator">=</span> <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span>int<span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
nobleGases<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string-literal"><span class="token string">&#39;helium&#39;</span></span><span class="token punctuation">;</span>
nobleGases<span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string-literal"><span class="token string">&#39;neon&#39;</span></span><span class="token punctuation">;</span>
nobleGases<span class="token punctuation">[</span><span class="token number">18</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string-literal"><span class="token string">&#39;argon&#39;</span></span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,2),un={class:"hint-container note"},dn=s("p",{class:"hint-container-title"},"Note",-1),kn=s("code",null,"new Map()",-1),gn=s("code",null,"Map()",-1),vn=s("br",null,null,-1),mn=s("code",null,"new",-1),bn=s("br",null,null,-1),hn=e(`<p>기존 맵에 새로운 키-값을 추가하려면 첨자 할당 연산자(<code>[]=</code>)를 사용하면 됩니다.</p><div class="language-dart line-numbers-mode" data-ext="dart"><pre class="language-dart"><code><span class="token keyword">var</span> gifts <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string-literal"><span class="token string">&#39;first&#39;</span></span><span class="token punctuation">:</span> <span class="token string-literal"><span class="token string">&#39;partridge&#39;</span></span><span class="token punctuation">}</span><span class="token punctuation">;</span>
gifts<span class="token punctuation">[</span><span class="token string-literal"><span class="token string">&#39;fourth&#39;</span></span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string-literal"><span class="token string">&#39;calling birds&#39;</span></span><span class="token punctuation">;</span> <span class="token comment">// 키와 값 쌍 추가</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>첨자 연산자(<code>[]</code>)를 사용하여 맵에서 값을 검색할 수 있습니다.</p><div class="language-dart line-numbers-mode" data-ext="dart"><pre class="language-dart"><code><span class="token keyword">var</span> gifts <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string-literal"><span class="token string">&#39;first&#39;</span></span><span class="token punctuation">:</span> <span class="token string-literal"><span class="token string">&#39;partridge&#39;</span></span><span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token keyword">assert</span><span class="token punctuation">(</span>gifts<span class="token punctuation">[</span><span class="token string-literal"><span class="token string">&#39;first&#39;</span></span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token string-literal"><span class="token string">&#39;partridge&#39;</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>만약 맵에서 해당 키가 없다면 <code>null</code>을 반환합니다.</p><div class="language-dart line-numbers-mode" data-ext="dart"><pre class="language-dart"><code><span class="token keyword">var</span> gifts <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string-literal"><span class="token string">&#39;first&#39;</span></span><span class="token punctuation">:</span> <span class="token string-literal"><span class="token string">&#39;partridge&#39;</span></span><span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token keyword">assert</span><span class="token punctuation">(</span>gifts<span class="token punctuation">[</span><span class="token string-literal"><span class="token string">&#39;fifth&#39;</span></span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p><code>.length</code>를 사용해서 맵의 키-값 쌍의 수를 알 수 있습니다.</p><div class="language-dart line-numbers-mode" data-ext="dart"><pre class="language-dart"><code><span class="token keyword">var</span> gifts <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string-literal"><span class="token string">&#39;first&#39;</span></span><span class="token punctuation">,</span> <span class="token string-literal"><span class="token string">&#39;partridge&#39;</span></span><span class="token punctuation">}</span><span class="token punctuation">;</span>
gifts<span class="token punctuation">[</span><span class="token string-literal"><span class="token string">&#39;fourth&#39;</span></span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string-literal"><span class="token string">&#39;calling birds&#39;</span></span><span class="token punctuation">;</span>
<span class="token keyword">assert</span><span class="token punctuation">(</span>gifts<span class="token punctuation">.</span>length <span class="token operator">==</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>컴파일타임 상수로 맵을 만드려면 맵 리터럴 앞에 <code>const</code>를 사용하면 됩니다.</p><div class="language-dart line-numbers-mode" data-ext="dart"><pre class="language-dart"><code><span class="token keyword">final</span> constantMap <span class="token operator">=</span> <span class="token keyword">const</span> <span class="token punctuation">{</span>
    <span class="token number">2</span><span class="token punctuation">:</span> <span class="token string-literal"><span class="token string">&#39;helium&#39;</span></span><span class="token punctuation">,</span>
    <span class="token number">10</span><span class="token punctuation">:</span> <span class="token string-literal"><span class="token string">&#39;neon&#39;</span></span><span class="token punctuation">,</span>
    <span class="token number">18</span><span class="token punctuation">:</span> <span class="token string-literal"><span class="token string">&#39;argon&#39;</span></span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token comment">// constantMap[2] = &#39;Helium&#39;; // 이 코드는 오류가 발생합니다.</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>맵은 리스트와 동일하게 스프레드 연산자(<code>...</code>와 <code>...?</code>)와 콜렉션 <code>if</code>와 <code>for</code>를 지원합니다.<br> 자세한 정보는 <a href="#spread-operator">리스트 스프레드 연산자</a>와 <a href="#collection-operators">리스트 콜렉션 연산자</a> 부분을 참고하세요.</p>`,11),_n={href:"https://dart.dev/guides/libraries/library-tour#maps",target:"_blank",rel:"noopener noreferrer"},fn=s("h2",{id:"runes-and-grapheme-clusters",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#runes-and-grapheme-clusters","aria-hidden":"true"},"#"),n(" 룬과 자소 클러스터")],-1),yn={href:"https://api.dart.dev/stable/dart-core/Runes-class.html",target:"_blank",rel:"noopener noreferrer"},wn=s("br",null,null,-1),xn={href:"https://pub.dev/packages/characters",target:"_blank",rel:"noopener noreferrer"},Sn={href:"https://unicode.org/reports/tr29/#Grapheme_Cluster_Boundaries",target:"_blank",rel:"noopener noreferrer"},Dn=e("<p>유니코드는 세계 문자 시스템 전부에 사용되는 글자, 숫자, 심볼을 유일한 숫자값으로 정의합니다.<br> Dart 문자열은 UTF-16 코드 단위 시퀀스이기 때문에 스트링에 유니코드 코드포인트를 표현하려면 특별한 문법이 필요합니다.<br> 유니코드 코드포인트를 표현하는 일반적인 방법은 <code>\\uXXXX</code>이며 XXXX는 4자리 16진수 입니다.<br> 예로 들어, 하트 문자(♥)는 <code>\\u2665</code>입니다.<br> 4자리가 아닐 경우에는 중괄효로 값을 표시합니다.<br> 예로 들어, 웃는 이모지(😆)는 <code>\\u{1f606}</code>입니다.</p>",1),Mn=s("code",null,"characters",-1),An=s("br",null,null,-1),Ln={href:"https://pub.dev/documentation/characters/latest/characters/Characters-class.html",target:"_blank",rel:"noopener noreferrer"},In=s("code",null,"Characters",-1),Nn=s("br",null,null,-1),Xn=e(`<div class="language-dart line-numbers-mode" data-ext="dart"><pre class="language-dart"><code><span class="token keyword">import</span> <span class="token string-literal"><span class="token string">&#39;package:characters/characters.dart&#39;</span></span><span class="token punctuation">;</span>
<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
<span class="token keyword">var</span> hi <span class="token operator">=</span> <span class="token string-literal"><span class="token string">&#39;Hi 🇩🇰&#39;</span></span><span class="token punctuation">;</span>
<span class="token function">print</span><span class="token punctuation">(</span>hi<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">print</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&#39;The end of the string: </span><span class="token interpolation"><span class="token punctuation">\${</span><span class="token expression">hi<span class="token punctuation">.</span><span class="token function">substring</span><span class="token punctuation">(</span>hi<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span></span><span class="token punctuation">}</span></span><span class="token string">&#39;</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">print</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&#39;The last character: </span><span class="token interpolation"><span class="token punctuation">\${</span><span class="token expression">hi<span class="token punctuation">.</span>characters<span class="token punctuation">.</span>last</span><span class="token punctuation">}</span></span><span class="token string">\\n&#39;</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>환경에 따라 다르지만 출력은 다음과 같을 것 입니다.</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token variable">$dart</span> run bin/main.dart
Hi 🇩🇰
The end of the string: ???
The last character: 🇩🇰
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,3),Bn={href:"https://pub.dev/packages/characters/example",target:"_blank",rel:"noopener noreferrer"},Cn={href:"https://pub.dev/documentation/characters",target:"_blank",rel:"noopener noreferrer"},Gn=s("h2",{id:"symbols",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#symbols","aria-hidden":"true"},"#"),n(" 심볼")],-1),Pn={href:"https://api.dart.dev/stable/dart-core/Symbol-class.html",target:"_blank",rel:"noopener noreferrer"},Tn=s("br",null,null,-1),On=e(`<p>식별자의 심볼을 가져오려면 심볼 리터럴을 사용하면 되며 식별자 앞에 <code>#</code>을 사용하면 됩니다.</p><div class="language-dart line-numbers-mode" data-ext="dart"><pre class="language-dart"><code>#radix
#bar
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>심볼 리터럴은 컴파일타임 상수입니다.</p>`,3);function Hn(Vn,$n){const t=l("ExternalLinkIcon"),p=l("RouterLink"),c=l("AdsenseB");return r(),u("div",null,[s("p",null,[n("원문 : "),s("a",k,[n("https://dart.dev/language/collections"),a(t)])]),g,s("p",null,[n("이전의 모든 프로그래밍 언어에 대한 가장 표준적 콜렉션은 정렬된 객체 그룹인 배열일 것 입니다."),v,n(" Dart에서 배열은 "),s("a",m,[b,a(t)]),n(" 객체이며 많은 사람들이 리스트라고 부릅니다.")]),h,s("div",_,[f,s("p",null,[n("Dart는 "),y,n("를 "),w,n(" 타입으로 추정합니다."),x,n(" 이 리스트에 정수가 아닌 객체를 추가하면 분석기 또는 런타임에 오류가 발생하게 됩니다."),S,n(" 자세한 정보는 "),a(p,{to:"/dart/language/type-system.html#type-inference"},{default:o(()=>[n("타입 추론")]),_:1}),n("을 참고하세요.")])]),D,s("p",null,[n("스프레드 연산자를 사용에 대한 자세한 정보와 예제는 "),s("a",M,[n("스프레드 연산자 제안"),a(t)]),n("을 참고하세요.")]),A,s("p",null,[n("콜렉션 "),L,n("나 "),I,n("의 사용에 대한 자세한 정보와 예제는 "),s("a",N,[n("콜렉션 제어흐름 제안"),a(t)]),n("을 참고하세요.")]),s("p",null,[n("리스트 타입은 리스트를 조작하기 위해 다양한 간편한 함수를 가지고 있습니다."),X,n(" 리스트에 대한 자세한 정보는 "),a(p,{to:"/dart/language/generics.html"},{default:o(()=>[n("제너릭")]),_:1}),n("과 "),s("a",B,[n("콜렉션"),a(t)]),n("을 참고하세요.")]),C,s("p",null,[n("Dart의 세트는 유일한 아이템의 정렬되지 않은 콜렉션 입니다."),G,n(" Dar의 세트 지원은 세트 리터럴과 "),s("a",P,[T,a(t)]),n("타입으로 제공됩니다.")]),O,s("div",H,[V,s("p",null,[n("Dart는 "),$,n("를 "),E,n("으로 추론합니다."),R,n(" 세트에 잘못된 타입의 값을 추가한다면 분석기나 런타임은 오류를 발생시킬 것 입니다."),F,n(" 자세한 정보는 "),s("a",U,[n("타입 추론"),a(t)]),n("을 참고하세요.")])]),j,s("p",null,[n("세트의 자세한 정보는 "),a(p,{to:"/dart/language/generics.html"},{default:o(()=>[n("제너릭")]),_:1}),n("과 "),s("a",q,[n("세트"),a(t)]),n("를 참고하세요.")]),z,s("p",null,[n("일반적으로 맵은 키와 값을 연결하는 객체입니다."),J,n(" 키와 값 모두 객체의 어느 타입이든 가능합니다."),K,n(" 각 키는 딱 한번만 사용되며, 동일한 값은 여러번 반복되도 됩니다."),Q,n(" Dart의 맵 지원은 맵 리터럴과 "),s("a",W,[Y,a(t)]),n("타입으로 제공됩니다.")]),Z,s("div",nn,[sn,s("p",null,[n("Dart는 "),an,n("를 "),tn,n(" 타입으로 "),en,n("를 "),pn,n(" 타입으로 추론합니다."),on,n(" 각 맵에 잘못된 타입의 값을 추가하면 분석기나 런타임은 오류를 발생시킵니다."),ln,n(" 자세한 정보는 "),s("a",cn,[n("타입 추론"),a(t)]),n("을 참고하세요.")])]),rn,s("div",un,[dn,s("p",null,[n("C#이나 자바같은 언어를 사용했다면 "),kn,n("이 아닌 "),gn,n("만 사용한 것을 알수 있습니다."),vn,n(" Dart에서 "),mn,n(" 키워드는 선택적입니다."),bn,n(" 자세한 내용은 "),a(p,{to:"/dart/language/classes.html#using-constructors"},{default:o(()=>[n("생성자 사용하기")]),_:1}),n("를 참고하세요.")])]),hn,s("p",null,[n("맵에 관련된 자세한 정보는 "),a(p,{to:"/dart/language/generics.html"},{default:o(()=>[n("제너릭")]),_:1}),n("과 라이브러리 둘러보기의 "),s("a",_n,[n("맵 API"),a(t)]),n("를 참고하세요.")]),fn,s("p",null,[n("Dart에서 "),s("a",yn,[n("룬"),a(t)]),n("은 문자열의 유니코드 코드포인트을 보여줍니다."),wn,s("a",xn,[n("문자 패키지"),a(t)]),n("를 사용하여 "),s("a",Sn,[n("유니코드(확장) 자소 클러스터"),a(t)]),n("라고 하는 사용자 인식 문자를 보거나 조작할 수 있습니다.")]),Dn,s("p",null,[n("개별 유니코드 문자를 읽거나 쓰고 싶을 경우, 문자 패키지의 문자열에 정의된 "),Mn,n(" getter를 사용합니다."),An,n(" 반환된 "),s("a",Ln,[In,a(t)]),n(" 객체는 자소 클러스터 시퀀스의 문자열입니다."),Nn,n(" 문자 API를 사용한 예제입니다.")]),Xn,s("p",null,[n("문자열을 조작하기 위해 문자 패키지를 사용하는 자세한 내용은 문자 패키지의 "),s("a",Bn,[n("예제"),a(t)]),n("와 "),s("a",Cn,[n("API 참조"),a(t)]),n("를 참고하세요.")]),Gn,s("p",null,[s("a",Pn,[n("심볼"),a(t)]),n(" 객체는 Dart 프로그램에서 선언된 연산자 또는 식별자를 나타냅니다."),Tn,n(" 심볼을 사용할 필요가 없을 수 있지만 축소는 식별자 이름을 변경하지만 식별자 심볼은 변경하지 않기 때문에 이름으로 식별자를 참조하는 API에는 매우 중요합니다.")]),On,a(c)])}const Rn=i(d,[["render",Hn],["__file","collections.html.vue"]]);export{Rn as default};
