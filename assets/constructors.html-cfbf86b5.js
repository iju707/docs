import{_ as d,r as c,o as l,c as k,a as s,b as n,d as a,w as p,f as i,g as u,e as t}from"./app-95e21c4a.js";const m={},v={href:"https://dart.dev/language/constructors",target:"_blank",rel:"noopener noreferrer"},b=s("br",null,null,-1),g=t(`<div class="language-dart line-numbers-mode" data-ext="dart"><pre class="language-dart"><code><span class="token keyword">class</span> <span class="token class-name">Point</span> <span class="token punctuation">{</span>
    double x <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    double y <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token class-name">Point</span><span class="token punctuation">(</span>double x<span class="token punctuation">,</span> double y<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// 인스턴스 변수를 초기화 하기 위해</span>
        <span class="token comment">// 좀더 나은 방식으로 형식 매개변수로 초기화하기를 참고하세요</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>x <span class="token operator">=</span> x<span class="token punctuation">;</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>y <span class="token operator">=</span> y<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>this</code> 키워드는 현재 인스턴스를 참조합니다.</p><div class="hint-container note"><p class="hint-container-title">Note</p><p>이름에 충돌이 있을 경우에만 <code>this</code> 키워드를 사용하세요.<br> 보통 Dart 스타일에서는 <code>this</code>를 생략합니다.</p></div><h2 id="initializing-formal-parameters" tabindex="-1"><a class="header-anchor" href="#initializing-formal-parameters" aria-hidden="true">#</a> 형식 매개변수로 초기화하기</h2><p>생성자의 인자를 인스턴스 변수에 할당하는 패턴은 매우 일반적이며, Dart는 형식 매개변수로 초기화하기를 사용하여 더 쉽게 만들어줍니다.</p><p>매개변수 초기화는 또한 초기화되거나 기본값이 제공되어야 하는 null이 아닌 또는 <code>final</code> 인스턴스 변수의 초기화에도 사용됩니다.</p><div class="language-dart line-numbers-mode" data-ext="dart"><pre class="language-dart"><code><span class="token keyword">class</span> <span class="token class-name">Point</span> <span class="token punctuation">{</span>
    <span class="token keyword">final</span> double x<span class="token punctuation">;</span>
    <span class="token keyword">final</span> double y<span class="token punctuation">;</span>

    <span class="token comment">// 생성자 본문이 실행되기 전에</span>
    <span class="token comment">// x와 y 인스턴스 변수를 설정합니다.</span>
    <span class="token class-name">Point</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>x<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>y<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>형식 초기화에 도입된 변수들은 암묵적 final이며 초기화 목록 범위 내에서만 사용가능합니다.</p><h2 id="default-constructors" tabindex="-1"><a class="header-anchor" href="#default-constructors" aria-hidden="true">#</a> 기본 생성자</h2><p>생성자를 선언하지 않으면 기본 생성자를 제공합니다.<br> 기본 생성자는 인자가 없으며 부모클래스의 인자없는 생성자를 실행합니다.</p><h2 id="constructors-arent-inherited" tabindex="-1"><a class="header-anchor" href="#constructors-arent-inherited" aria-hidden="true">#</a> 생성자는 상속되지 않음</h2><p>하위클래스는 상위클래스의 생성자를 상속하지는 않습니다.<br> 생성자를 선언하지 않은 하위클래스는 기본 생성자(인자 없음, 이름 없음)만 가지게 됩니다.</p><h2 id="named-constructors" tabindex="-1"><a class="header-anchor" href="#named-constructors" aria-hidden="true">#</a> 명명된 생성자</h2><p>클래스에 대해 여러 생성자를 구현하거나 추가적인 명확함을 제공하려면 명명된 생성자를 사용합니다.</p><div class="language-dart line-numbers-mode" data-ext="dart"><pre class="language-dart"><code><span class="token keyword">const</span> double xOrigin <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> double yOrigin <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>

<span class="token keyword">class</span> <span class="token class-name">Point</span> <span class="token punctuation">{</span>
    <span class="token keyword">final</span> double x<span class="token punctuation">;</span>
    <span class="token keyword">final</span> double y<span class="token punctuation">;</span>

    <span class="token class-name">Point</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>x<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>y<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">// 명명된 생성자</span>
    <span class="token class-name">Point</span><span class="token punctuation">.</span><span class="token function">origin</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
        <span class="token punctuation">:</span> x <span class="token operator">=</span> xOrigin<span class="token punctuation">,</span>
          y <span class="token operator">=</span> yOrigin<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>생성자는 상속이 되지 않음을 기억하며 부모클래스의 명명된 생성자는 하위클래스에 상속되지 않습니다.<br> 부모클래스에 정의된 명명된 생성자를 하위클래스에 생성하려면 반드시 하위클래스에 생성자를 구현해야합니다.</p><h2 id="invoking-a-non-default-superclass-constructor" tabindex="-1"><a class="header-anchor" href="#invoking-a-non-default-superclass-constructor" aria-hidden="true">#</a> 기본아닌 상위클래스 생성자 실행하기</h2>`,17),h=s("br",null,null,-1),y=s("br",null,null,-1),f=s("br",null,null,-1),x=t("<ol><li>초기화 목록</li><li>상위클래스의 인자없는 생성자</li><li>메인 클래스의 인자없는 생성자</li></ol><p>상위클래스가 이름없고 인자가 없는 생성자가 없다면, 상위클래스의 생성자 중 하나를 수동으로 호출해야합니다.<br> 생성자 본문 전에(누구든지) 콜론(<code>:</code>) 이후 상위클래스 생성자를 명시합니다.</p><p>아래 예제에서 Employee 클래스의 생성자는 상위클래스인 Person의 명명된 생성자를 호출합니다.<br> 코드를 실행하기 위해 <strong>Run</strong> 버튼을 클릭해보세요.</p>",3),_=t(`<pre>    <code class="language-run-dartpad:theme-light:mode-dart:ga_id-example1:width-100%:height-400px">
class Person {
  String? firstName;

  Person.fromJson(Map data) {
    print(&#39;in Person&#39;);
  }
}

class Employee extends Person {
  // Person does not have a default constructor;
  // you must call super.fromJson().
  Employee.fromJson(super.data) : super.fromJson() {
    print(&#39;in Employee&#39;);
  }
}

void main() {
  var employee = Employee.fromJson({});
  print(employee);
  // Prints:
  // in Person
  // in Employee
  // Instance of &#39;Employee&#39;
}
    </code>
</pre><p>상위클래스 생성자의 인자는 생성자가 실행되기전에 수행되므로 인자는 함수호출처럼 표현식이 가능합니다.</p><div class="language-dart line-numbers-mode" data-ext="dart"><pre class="language-dart"><code><span class="token keyword">class</span> <span class="token class-name">Employee</span> <span class="token keyword">extends</span> <span class="token class-name">Person</span> <span class="token punctuation">{</span>
    <span class="token class-name">Employee</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">:</span> <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">fromJson</span><span class="token punctuation">(</span><span class="token function">fetchDefaultData</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// ...</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="hint-container warning"><p class="hint-container-title">Note</p><p>상위클래스 생성자의 인자는 <code>this</code>에 접근할 수 없습니다.<br> 예로 들어, 인자는 정적 메소드를 호출할순 있지만 인스턴스 메소드는 불가합니다.</p></div><h3 id="super-parameters" tabindex="-1"><a class="header-anchor" href="#super-parameters" aria-hidden="true">#</a> super 매개변수</h3>`,5),w=s("br",null,null,-1),P=s("br",null,null,-1),L=t(`<div class="language-dart line-numbers-mode" data-ext="dart"><pre class="language-dart"><code><span class="token keyword">class</span> <span class="token class-name">Vector2d</span> <span class="token punctuation">{</span>
    <span class="token keyword">final</span> double x<span class="token punctuation">;</span>
    <span class="token keyword">final</span> double y<span class="token punctuation">;</span>

    <span class="token class-name">Vector2d</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>x<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>y<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">class</span> <span class="token class-name">Vector3d</span> <span class="token keyword">extends</span> <span class="token class-name">Vector2d</span> <span class="token punctuation">{</span>
    <span class="token keyword">final</span> double z<span class="token punctuation">;</span>

    <span class="token comment">// x와 y 매개변수를 기본 상위 생성자에 전달하는 것은 다음과 같습니다.</span>
    <span class="token comment">// Vector3d(final double x, final double y, this.z) : super(x, y);</span>
    <span class="token class-name">Vector3d</span><span class="token punctuation">(</span><span class="token keyword">super</span><span class="token punctuation">.</span>x<span class="token punctuation">,</span> <span class="token keyword">super</span><span class="token punctuation">.</span>y<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>z<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>상위 생성자 호출에 이미 위치인수가 있는 경우 상위 초기화 매개변수는 위치할 수 없지만 항상 다음과 같이 이름으로 지정할 수 있습니다.</p><div class="language-dart line-numbers-mode" data-ext="dart"><pre class="language-dart"><code><span class="token keyword">class</span> <span class="token class-name">Vector2d</span> <span class="token punctuation">{</span>
    <span class="token comment">// ...</span>

    <span class="token class-name">Vector2d</span><span class="token punctuation">.</span><span class="token function">named</span><span class="token punctuation">(</span><span class="token punctuation">{</span>required <span class="token keyword">this</span><span class="token punctuation">.</span>x<span class="token punctuation">,</span> required <span class="token keyword">this</span><span class="token punctuation">.</span>y<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">class</span> <span class="token class-name">Vector3d</span> <span class="token keyword">extends</span> <span class="token class-name">Vector2d</span> <span class="token punctuation">{</span>
    <span class="token comment">// ...</span>

    <span class="token comment">// y 매개변수를 명명된 상위 생성자로 전달한 예시</span>
    <span class="token comment">// Vector3d.yzPlane({required double y, required this.z})</span>
    <span class="token comment">//      : super.named(x: 0, y: y);</span>
    <span class="token class-name">Vector3d</span><span class="token punctuation">.</span><span class="token function">yzPlane</span><span class="token punctuation">(</span><span class="token punctuation">{</span>required <span class="token keyword">super</span><span class="token punctuation">.</span>y<span class="token punctuation">,</span> required <span class="token keyword">this</span><span class="token punctuation">.</span>z<span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token punctuation">:</span> <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">named</span><span class="token punctuation">(</span>x<span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,3),V={class:"hint-container note"},z=s("p",{class:"hint-container-title"},"버전노트",-1),J={href:"https://dart.dev/guides/language/evolution#language-versioning",target:"_blank",rel:"noopener noreferrer"},j=s("br",null,null,-1),E=t(`<h3 id="initializer-list" tabindex="-1"><a class="header-anchor" href="#initializer-list" aria-hidden="true">#</a> 초기화 목록</h3><p>상위클래스 생성자를 실행하는것 외에도 생성자 본문이 실행하기 전에 인스턴스 변수를 초기화할 수 있습니다.<br> 초기화를 쉼표로 구분합니다.</p><div class="language-dart line-numbers-mode" data-ext="dart"><pre class="language-dart"><code><span class="token comment">// 초기화 목록은 생성자 본문이 시작하기 전에 인스턴스 변수를 설정합니다.</span>
<span class="token class-name">Point</span><span class="token punctuation">.</span><span class="token function">fromJson</span><span class="token punctuation">(</span><span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> double<span class="token punctuation">&gt;</span></span> json<span class="token punctuation">)</span>
    <span class="token punctuation">:</span> x <span class="token operator">=</span> json<span class="token punctuation">[</span><span class="token string-literal"><span class="token string">&#39;x&#39;</span></span><span class="token punctuation">]</span><span class="token operator">!</span><span class="token punctuation">,</span>
      y <span class="token operator">=</span> json<span class="token punctuation">[</span><span class="token string-literal"><span class="token string">&#39;y&#39;</span></span><span class="token punctuation">]</span><span class="token operator">!</span> <span class="token punctuation">{</span>
    <span class="token function">print</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&#39;In Point.fromJson(): (</span><span class="token interpolation"><span class="token punctuation">$</span><span class="token expression">x</span></span><span class="token string"> </span><span class="token interpolation"><span class="token punctuation">$</span><span class="token expression">y</span></span><span class="token string">)&#39;</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="hint-container warning"><p class="hint-container-title">Note</p><p>초기화의 우편은 <code>this</code> 에 접근할 수 없습니다.</p></div><p>개발중에는 초기화목록에서 <code>assert</code>를 활용하여 입력를 검증할 수 있습니다.</p><div class="language-dart line-numbers-mode" data-ext="dart"><pre class="language-dart"><code><span class="token class-name">Point</span><span class="token punctuation">.</span><span class="token function">withAssert</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>x<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>y<span class="token punctuation">)</span> <span class="token punctuation">:</span> <span class="token keyword">assert</span><span class="token punctuation">(</span>x <span class="token operator">&gt;=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token function">print</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&#39;In Point.withAssert(): (</span><span class="token interpolation"><span class="token punctuation">$</span><span class="token expression">x</span></span><span class="token string">, </span><span class="token interpolation"><span class="token punctuation">$</span><span class="token expression">y</span></span><span class="token string">)&#39;</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>초기화 목록은 final 필드를 설정할 때 편리합니다.<br> 아래 예제는 3개의 final 필드를 초기화 목록에서 초기화 합니다.<br><strong>Run</strong>을 클릭하면 코드를 실행합니다.</p>`,7),I=t(`<pre>    <code class="language-run-dartpad:theme-light:mode-dart:ga_id-example1:width-100%:height-400px">
import &#39;dart:math&#39;;

class Point {
  final double x;
  final double y;
  final double distanceFromOrigin;

  Point(double x, double y)
      : x = x,
        y = y,
        distanceFromOrigin = sqrt(x * x + y * y);
}

void main() {
  var p = Point(2, 3);
  print(p.distanceFromOrigin);
}
    </code>
</pre><h3 id="redirecting-constructors" tabindex="-1"><a class="header-anchor" href="#redirecting-constructors" aria-hidden="true">#</a> 리디렉션 생성자</h3><p>때때로 동일 클래스의 다른 생성자에게 리디렉션할 목적으로 생성자를 사용할 수 있습니다.<br> 콜론(<code>:</code>) 다음에 생성자 호출(클래스 이름대신 <code>this</code>를 사용)하고 리디렉션 생성자의 본문은 비어있습니다.</p><div class="language-dart line-numbers-mode" data-ext="dart"><pre class="language-dart"><code><span class="token keyword">class</span> <span class="token class-name">Point</span> <span class="token punctuation">{</span>
    double x<span class="token punctuation">,</span> y<span class="token punctuation">;</span>

    <span class="token comment">// 이 클래스의 메인 생성자</span>
    <span class="token class-name">Point</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>x<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>y<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">// 메인 생성자에게 위임</span>
    <span class="token class-name">Point</span><span class="token punctuation">.</span><span class="token function">alongXAxis</span><span class="token punctuation">(</span>double x<span class="token punctuation">)</span> <span class="token punctuation">:</span> <span class="token keyword">this</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="constant-constructors" tabindex="-1"><a class="header-anchor" href="#constant-constructors" aria-hidden="true">#</a> 상수 생성자</h3><p>클래스가 절대 변경되지 않는 객체를 생성한다면 이 객체를 컴파일타임 상수로 만들 수 있습니다.<br> 이것을 하기 위해 <code>const</code> 생성자를 정의하고 모든 변수를 <code>final</code>로 만듭니다.</p><div class="language-dart line-numbers-mode" data-ext="dart"><pre class="language-dart"><code><span class="token keyword">class</span> <span class="token class-name">ImmutablePoint</span> <span class="token punctuation">{</span>
    <span class="token keyword">static</span> <span class="token keyword">const</span> <span class="token class-name">ImmutablePoint</span> origin <span class="token operator">=</span> <span class="token class-name">ImmutablePoint</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">final</span> double x<span class="token punctuation">,</span> y<span class="token punctuation">;</span>

    <span class="token keyword">const</span> <span class="token class-name">ImmutablePoint</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>x<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>y<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,7),S=s("br",null,null,-1),N=s("h3",{id:"factory-constructors",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#factory-constructors","aria-hidden":"true"},"#"),n(" 팩토리 생성자")],-1),O=s("p",null,[n("클래스의 생성자가 항상 새로운 인스턴스를 생성하지 않는다면 "),s("code",null,"factory"),n(" 키워드를 사용합니다."),s("br"),n(" 예로 들어, 팩토리 생성자는 캐시에서 인스턴스를 반환하거나 하위유형의 인스턴스를 반환합니다."),s("br"),n(" 팩토리 생성자의 다른 사용경우는 초기화 목록에서 다루지 못하는 로직을 사용하여 final 변수를 초기화하는 경우입니다.")],-1),q={class:"hint-container tip"},B=s("p",{class:"hint-container-title"},"Tips",-1),A={href:"https://dart.dev/guides/language/effective-dart/design#avoid-public-late-final-fields-without-initializers",target:"_blank",rel:"noopener noreferrer"},M=t(`<p>아래 예제에서 <code>Logger</code> 팩토리 생성자는 캐시에서 객체를 반환하며, <code>Logger.fromJson</code> 팩토리 생성자는 JSON 객체에서 final 변수를 초기화합니다.</p><div class="language-dart line-numbers-mode" data-ext="dart"><pre class="language-dart"><code><span class="token keyword">class</span> <span class="token class-name">Logger</span> <span class="token punctuation">{</span>
    <span class="token keyword">final</span> <span class="token class-name">String</span> name<span class="token punctuation">;</span>
    bool mute <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>

    <span class="token comment">// _cache는 이름앞에 _가 있어서 라이브러리 전용입니다.</span>
    <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Logger</span><span class="token punctuation">&gt;</span></span> _cache <span class="token operator">=</span> <span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Logger</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>

    <span class="token keyword">factory</span> <span class="token class-name">Logger</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> _cache<span class="token punctuation">.</span><span class="token function">putIfAbsent</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">&gt;</span> <span class="token class-name">Logger</span><span class="token punctuation">.</span><span class="token function">_internal</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">factory</span> <span class="token class-name">Logger</span><span class="token punctuation">.</span><span class="token function">fromJson</span><span class="token punctuation">(</span><span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">&gt;</span></span> json<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token class-name">Logger</span><span class="token punctuation">(</span>json<span class="token punctuation">[</span><span class="token string-literal"><span class="token string">&#39;name&#39;</span></span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token class-name">Logger</span><span class="token punctuation">.</span><span class="token function">_internal</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">void</span> <span class="token function">log</span><span class="token punctuation">(</span><span class="token class-name">String</span> msg<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>mute<span class="token punctuation">)</span> <span class="token function">print</span><span class="token punctuation">(</span>msg<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="hint-container note"><p class="hint-container-title">Note</p><p>팩토리 생성자는 <code>this</code>에 접근할 수 없습니다.</p></div><p>팩토리 생성자를 실행하는 것은 다른 생성자와 비슷합니다.</p><div class="language-dart line-numbers-mode" data-ext="dart"><pre class="language-dart"><code><span class="token keyword">var</span> logger <span class="token operator">=</span> <span class="token class-name">Logger</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&#39;UI&#39;</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
logger<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&#39;Button clicked&#39;</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">var</span> logMap <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string-literal"><span class="token string">&#39;name&#39;</span></span><span class="token punctuation">:</span> <span class="token string-literal"><span class="token string">&#39;UI&#39;</span></span><span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token keyword">var</span> loggerJson <span class="token operator">=</span> <span class="token class-name">Logger</span><span class="token punctuation">.</span><span class="token function">fromJson</span><span class="token punctuation">(</span>logMap<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,5);function D(R,$){const o=c("ExternalLinkIcon"),e=c("RouterLink"),r=c("AdsenseB");return l(),k("div",null,[s("p",null,[n("원문 : "),s("a",v,[n("https://dart.dev/language/constructors"),a(o)])]),s("p",null,[n("클래스와 동일한 이름으로 함수를 생성하면 생성자를 선언할 수 있습니다.(추가 선택적으로, "),a(e,{to:"/dart/language/constructors.html#named-constructors"},{default:p(()=>[n("명명된 생성자")]),_:1}),n("에 묘사된 추가적 식별자도 가능)"),b,n(" 생성자의 대부분 일반적인 유형은 생성을 위한 생성자로, 클래스의 새로운 인스턴스를 만들게 됩니다.")]),g,s("p",null,[n("기본적으로 하위클래스의 생성자는 상위클래스의 이름없고 인자가 없는 생성자를 호출합니다."),h,n(" 상위클래스의 생성자는 생성자 본문의 시작에 호출됩니다."),y,a(e,{to:"/dart/language/constructors.html#initializer-list"},{default:p(()=>[n("초기화 목록")]),_:1}),n("도 사용되었다면, 상위클래스가 호출되기전에 실행합니다."),f,n(" 요약하자면 실행의 순서는 다음과 같습니다.")]),x,(l(),i(u("script"),{type:"text/javascript",src:"https://dartpad.dev/inject_embed.dart.js",defer:""})),_,s("p",null,[n("상위 생성자의 호출에 각각 매개변수를 수동으로 전달하지 않기 위하여, 지정된 또는 기본 상위클래스 생성자상위-초기화 매개변수를 사용할 수 있습니다."),w,n(" 이 기능은 리디렉션 생성자와 함께 사용할 수 없습니다."),P,n(" 상위 초기화 매개변수는 "),a(e,{to:"/dart/language/constructors.html#initializing-formal-parameters"},{default:p(()=>[n("형식 매개변수로 초기화하기")]),_:1}),n("의 구문과 의미가 유사합니다.")]),L,s("div",V,[z,s("p",null,[n("상위 초기화 매개변수를 사용하려면 최소 2.17 "),s("a",J,[n("언어버전"),a(o)]),n("이 필요합니다."),j,n(" 이전 버전을 사용하고 있다면 모든 상위 생성자의 매개변수를 수동으로 전달해야 합니다.")])]),E,(l(),i(u("script"),{type:"text/javascript",src:"https://dartpad.dev/inject_embed.dart.js",defer:""})),I,s("p",null,[n("상수 생성자는 항상 상수를 생성하지는 않습니다."),S,n(" 자세한 내용은 "),a(e,{to:"/dart/language/classes.html#using-constructors"},{default:p(()=>[n("생성자 사용하기")]),_:1}),n("를 참고하세요.")]),N,O,s("div",q,[B,s("p",null,[n("final 변수의 지연된 초기화를 다루는 다른방법은 "),s("a",A,[n("late final을 사용"),a(o)]),n("하는 것 입니다. (주의!)")])]),M,a(r)])}const F=d(m,[["render",D],["__file","constructors.html.vue"]]);export{F as default};
